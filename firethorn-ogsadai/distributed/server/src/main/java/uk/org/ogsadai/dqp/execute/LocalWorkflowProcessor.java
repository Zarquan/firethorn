// Copyright (c) The University of Edinburgh, 2008.
//
// LICENCE-START
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// LICENCE-END


package uk.org.ogsadai.dqp.execute;

import java.util.List;

import uk.org.ogsadai.activity.RequestStatusBuilder;
import uk.org.ogsadai.client.toolkit.PipelineWorkflow;
import uk.org.ogsadai.client.toolkit.SingleActivityOutput;
import uk.org.ogsadai.dqp.common.EvaluationNode;

/**
 * Executes a subworkflow pipeline and creates data sources.
 *
 * @author The OGSA-DAI Project Team.
 */
public interface LocalWorkflowProcessor
{
    
    /**
     * Returns the local evaluation node.
     * 
     * @return local node
     */
    public EvaluationNode getLocalNode();
    
    /**
     * Request status builder which logs activity events as they're generated by
     * the local workflow processor.
     * 
     * @return request status builder
     */
    public RequestStatusBuilder getRequestStatusBuilder();
    
    /**
     * Creates the data sources with the specified names.
     * 
     * @param dataSourceNames
     *            data source names
     * @throws ExecutionException
     *             if a data source could not be created
     */
    public void createDataSources(List<String> dataSourceNames) 
        throws ExecutionException;

    /**
     * Creates the data sinks with the specified names.
     * 
     * @param dataSinkNames
     *            data sink names
     * @throws ExecutionException
     *             if a data sink could not be created
     */
    public void createDataSinks(List<String> dataSinkNames) 
        throws ExecutionException;

    /**
     * Executes the given pipeline.
     * 
     * @param pipeline
     *            pipeline to execute
     * @param unconnectedOutput
     *            activity output that produces the results
     * @throws ExecutionException
     */
    public void executePipeline(
            PipelineWorkflow pipeline, 
            SingleActivityOutput unconnectedOutput) 
        throws ExecutionException;

    /**
     * Destroys the data source with the specified names.
     * 
     * @param dataSourceNames
     *            data source names
     */
    public void destroyDataSources(List<String> dataSourceNames);

    /**
     * Destroys the data sink with the specified names.
     * 
     * @param dataSinkNames
     *            data sink names
     */
    public void destroyDataSinks(List<String> dataSinkNames);
}
