// Copyright (c) The University of Edinburgh,  2002 - 2008.
//
// LICENCE-START
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// LICENCE-END

package uk.org.ogsadai.dqp.lqp;

import java.util.Collection;
import java.util.List;

import uk.org.ogsadai.dqp.lqp.exceptions.AmbiguousAttributeException;
import uk.org.ogsadai.dqp.lqp.exceptions.AttributeNotFoundException;
import uk.org.ogsadai.tuple.TupleMetadata;

/**
 * Operator heading interface. Operator heading contains metadata about tuples
 * generated by the operator.
 * 
 * @author The OGSA-DAI Project Team
 */
public interface Heading
{
    /**
     * Gets an ordered list of attributes. A read only copy is returned.
     * 
     * @return list of head attributes.
     */
    public List<Attribute> getAttributes();

    /**
     * Merges heading with another heading. The heading provided as argument is
     * appended to the end of <code>this</code> heading. New Heading object is
     * created. References of the heading attribute objects are reused.
     * 
     * @param heading
     *            heading object to append.
     * @return new merged head object.
     */
    public Heading createMerged(Heading heading);

    /**
     * Invalidates keys. IsKey for all attributes will return false.
     */
    public void invalidateKeys();

    /**
     * Checks whether the heading contains a collection of attributes. This
     * check may fail due to missing attributes or ambiguity. Semantics of
     * equality is name, source (null matches all).
     * 
     * @param attributes
     *            attributes
     * @throws AmbiguousAttributeException
     *             if the attribute name cannot be uniquely resolved
     * @throws AttributeNotFoundException
     *             if an attribute cannot be found in the head
     */
    public void containsAll(Collection<Attribute> attributes)
        throws AmbiguousAttributeException, AttributeNotFoundException;

    /**
     * Checks if for each attribute in a collection there is a unique match in
     * the heading attribute list. Semantics of equality is name, source (null
     * matches all).
     * 
     * @return <code>true</code> if there is unambiguous mapping from each
     *         attribute in the input list to the attribute in heading
     */
    public boolean containsAllUnambiguous(Collection<Attribute> attributes);

    /**
     * Checks if a given attribute is part of the heading. Semantics of equality
     * is name, source (null matches all).
     * 
     * @param attr
     *            an attribute
     * @return <code>true</code> if an attribute is in the heading -
     *         <code>false</code> otherwise
     */
    public boolean contains(Attribute attr);

    /**
     * Returns matching attribute or <code>null</code>. Semantics of equality is
     * name, source (null matches all).
     * 
     * @param attribute
     *            attribute to match
     * @return matching attribute
     * @throws AmbiguousAttributeException
     *             if the attribute name cannot be uniquely resolved
     * @throws AttributeNotFoundException
     *             if an attribute cannot be found in the head
     */
    public Attribute getMatchingAttribute(Attribute attribute)
        throws AmbiguousAttributeException, AttributeNotFoundException;

    /**
     * Creates a clone of a heading.
     * 
     * @return deep copy of a heading.
     */
    public Heading getClone();
    
    /**
     * Converts Heading to a {@link TupleMetadata} object.
     * 
     * @return tuple metadata
     */
    public TupleMetadata getTupleMetadata();
}
