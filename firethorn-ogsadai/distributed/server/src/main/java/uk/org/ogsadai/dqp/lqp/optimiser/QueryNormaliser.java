// Copyright (c) The University of Edinburgh, 2010.//// LICENCE-START// Licensed under the Apache License, Version 2.0 (the "License");// you may not use this file except in compliance with the License.// You may obtain a copy of the License at//// http://www.apache.org/licenses/LICENSE-2.0//// Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS,// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.// See the License for the specific language governing permissions and// limitations under the License.// LICENCE-ENDpackage uk.org.ogsadai.dqp.lqp.optimiser;import java.util.Set;import uk.org.ogsadai.dqp.common.CompilerConfiguration;import uk.org.ogsadai.dqp.common.RequestDetails;import uk.org.ogsadai.dqp.lqp.Annotation;import uk.org.ogsadai.dqp.lqp.Attribute;import uk.org.ogsadai.dqp.lqp.Operator;import uk.org.ogsadai.dqp.lqp.exceptions.LQPException;import uk.org.ogsadai.dqp.lqp.operators.ApplyOperator;import uk.org.ogsadai.resource.dataresource.dqp.RequestDQPFederation;/** * Query normaliser. *  * TODO: Bring this code into LQPBuilder. *  * @author The OGSA-DAI Project Team. */public class QueryNormaliser implements Optimiser{    /** Copyright notice. */    private static final String COPYRIGHT_NOTICE =        "Copyright (c) The University of Edinburgh, 2010";    /**     * {@inheritDoc}     */    public Operator optimise(        Operator lqpRoot,         RequestDQPFederation requestFederation,        CompilerConfiguration compilerConfiguration,         RequestDetails requestDetails) throws LQPException    {        processCorrelations(lqpRoot);        return lqpRoot;    }        /**     * Detect correlations and insert APPLY operators where appropriate.     *      * @param rootOperator     *            root of the query plan to process     * @throws LQPException     *             if update after inserting the APPLY operator fails     */    private void processCorrelations(Operator rootOperator) throws LQPException    {        if (rootOperator == null)            return;        Set<Attribute> correlatedAttr =            Annotation.getCorrelatedSetAnnotation(rootOperator);        if (correlatedAttr != null)        {            Operator applyOperator = new ApplyOperator(rootOperator, correlatedAttr);                        rootOperator.getParent().replaceChild(rootOperator, applyOperator);            applyOperator.setChild(0, rootOperator.getChild(0));            applyOperator.setChild(1, rootOperator.getChild(1));            applyOperator.update();            rootOperator.setChild(0, null);            rootOperator.setChild(1, null);                        rootOperator = applyOperator;        }        if (rootOperator.isBinary())        {            processCorrelations(rootOperator.getChild(0));            processCorrelations(rootOperator.getChild(1));        }        else        {            processCorrelations(rootOperator.getChild(0));        }    }}