# HG changeset patch
# User Stelios Voutsinas <stv@roe.ac.uk>
# Date 1417713620 -7200
#      Thu Dec 04 19:20:20 2014 +0200
# Branch 1.11.28-stv-cds-adql-2
# Node ID 26d783778c0d4997d256a36d598a650c5e559af4
# Parent  77acd0a0fe3cb69bc3c74853725d8ffd14ee4dd6
CAST() Support [CDS-Patch]

diff -r 77acd0a0fe3c -r 26d783778c0d adql/parser/ADQLParser.java
--- a/adql/parser/ADQLParser.java	Thu Dec 04 02:34:05 2014 +0200
+++ b/adql/parser/ADQLParser.java	Thu Dec 04 19:20:20 2014 +0200
@@ -662,6 +662,7 @@
         case COT:
         case SIN:
         case TAN:
+        case CAST:
         case STRING_LITERAL:
         case DELIMITED_IDENTIFIER:
         case REGULAR_IDENTIFIER:
@@ -1330,6 +1331,10 @@
         op = SqlFunction();
                                     {if (true) return op;}
         break;
+      case CAST:
+        op = CastFunction();
+                                     {if (true) return op;}
+        break;
       case LEFT_PAR:
         jj_consume_token(LEFT_PAR);
         op = NumericExpression();
@@ -1449,6 +1454,7 @@
             case COT:
             case SIN:
             case TAN:
+            case CAST:
             case DELIMITED_IDENTIFIER:
             case REGULAR_IDENTIFIER:
             case SCIENTIFIC_NUMBER:
@@ -1621,6 +1627,7 @@
       case MIN:
       case SUM:
       case COUNT:
+      case CAST:
       case DELIMITED_IDENTIFIER:
       case REGULAR_IDENTIFIER:
       case SCIENTIFIC_NUMBER:
@@ -1915,6 +1922,7 @@
           case COT:
           case SIN:
           case TAN:
+          case CAST:
           case STRING_LITERAL:
           case DELIMITED_IDENTIFIER:
           case REGULAR_IDENTIFIER:
@@ -2146,6 +2154,7 @@
         case COT:
         case SIN:
         case TAN:
+        case CAST:
         case STRING_LITERAL:
         case DELIMITED_IDENTIFIER:
         case REGULAR_IDENTIFIER:
@@ -2210,6 +2219,26 @@
     throw new Error("Missing return statement in function");
   }
 
+/* ************* */
+/* CAST FUNCTION */
+/* ************* */
+  final public CastFunction CastFunction() throws ParseException {
+                              Token type; ADQLOperand oper = null; CastFunction funct = null;
+    try {
+      jj_consume_token(CAST);
+      jj_consume_token(LEFT_PAR);
+      oper = ValueExpression();
+      jj_consume_token(AS);
+      type = jj_consume_token(CAST_TYPE);
+      jj_consume_token(RIGHT_PAR);
+              funct = queryFactory.createCastFunction(type, oper);
+    } catch (Exception ex) {
+                {if (true) throw generateParseException(ex);}
+    }
+          {if (true) return funct;}
+    throw new Error("Missing return statement in function");
+  }
+
 /* ************** */
 /* ADQL FUNCTIONS */
 /* ************** */
@@ -2663,6 +2692,7 @@
         case COT:
         case SIN:
         case TAN:
+        case CAST:
         case DELIMITED_IDENTIFIER:
         case REGULAR_IDENTIFIER:
         case SCIENTIFIC_NUMBER:
@@ -2850,6 +2880,7 @@
     case COT:
     case SIN:
     case TAN:
+    case CAST:
     case STRING_LITERAL:
     case DELIMITED_IDENTIFIER:
     case REGULAR_IDENTIFIER:
@@ -3011,31 +3042,6 @@
     finally { jj_save(15, xla); }
   }
 
-  private boolean jj_3R_16() {
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_31()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_47() {
-    if (jj_scan_token(CONCAT)) return true;
-    if (jj_3R_35()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_177() {
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_195()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_176() {
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_195()) return true;
-    return false;
-  }
-
   private boolean jj_3R_27() {
     if (jj_3R_35()) return true;
     Token xsp;
@@ -3051,23 +3057,33 @@
     return false;
   }
 
+  private boolean jj_3R_136() {
+    if (jj_3R_159()) return true;
+    return false;
+  }
+
   private boolean jj_3R_135() {
+    if (jj_3R_158()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_134() {
     if (jj_3R_157()) return true;
     return false;
   }
 
-  private boolean jj_3R_134() {
+  private boolean jj_3R_133() {
     if (jj_3R_156()) return true;
     return false;
   }
 
-  private boolean jj_3R_133() {
-    if (jj_3R_155()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_132() {
-    if (jj_3R_154()) return true;
+  private boolean jj_3R_24() {
+    if (jj_scan_token(REGULAR_IDENTIFIER)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_126()) jj_scanpos = xsp;
+    if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
 
@@ -3076,6 +3092,11 @@
     return false;
   }
 
+  private boolean jj_3R_177() {
+    if (jj_3R_110()) return true;
+    return false;
+  }
+
   private boolean jj_3R_52() {
     Token xsp;
     xsp = jj_scanpos;
@@ -3086,7 +3107,7 @@
     return false;
   }
 
-  private boolean jj_3R_194() {
+  private boolean jj_3R_196() {
     Token xsp;
     xsp = jj_scanpos;
     if (jj_scan_token(13)) {
@@ -3096,22 +3117,30 @@
     if (jj_scan_token(15)) return true;
     }
     }
-    if (jj_3R_160()) return true;
+    if (jj_3R_162()) return true;
     return false;
   }
 
   private boolean jj_3R_31() {
     if (jj_3R_48()) return true;
-    if (jj_3R_131()) return true;
+    if (jj_3R_132()) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_132()) jj_scanpos = xsp;
-    xsp = jj_scanpos;
     if (jj_3R_133()) jj_scanpos = xsp;
     xsp = jj_scanpos;
     if (jj_3R_134()) jj_scanpos = xsp;
     xsp = jj_scanpos;
     if (jj_3R_135()) jj_scanpos = xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_136()) jj_scanpos = xsp;
+    return false;
+  }
+
+  private boolean jj_3R_102() {
+    if (jj_scan_token(TAN)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_110()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
 
@@ -3127,7 +3156,23 @@
     return false;
   }
 
-  private boolean jj_3R_171() {
+  private boolean jj_3R_101() {
+    if (jj_scan_token(SIN)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_110()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_100() {
+    if (jj_scan_token(COT)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_110()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_173() {
     Token xsp;
     xsp = jj_scanpos;
     if (jj_scan_token(10)) {
@@ -3137,59 +3182,7 @@
     if (jj_scan_token(12)) return true;
     }
     }
-    if (jj_3R_137()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_24() {
-    if (jj_scan_token(REGULAR_IDENTIFIER)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_125()) jj_scanpos = xsp;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_175() {
-    if (jj_3R_110()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_114() {
-    if (jj_scan_token(FULL)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_160() {
-    if (jj_3R_34()) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_194()) jj_scanpos = xsp;
-    return false;
-  }
-
-  private boolean jj_3R_102() {
-    if (jj_scan_token(TAN)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_110()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_101() {
-    if (jj_scan_token(SIN)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_110()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_100() {
-    if (jj_scan_token(COT)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_110()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
+    if (jj_3R_138()) return true;
     return false;
   }
 
@@ -3219,34 +3212,6 @@
     return false;
   }
 
-  private boolean jj_3R_158() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_scan_token(8)) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(9)) return true;
-    }
-    if (jj_3R_110()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_19() {
-    if (jj_3R_34()) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_scan_token(8)) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(9)) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(10)) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(11)) return true;
-    }
-    }
-    }
-    return false;
-  }
-
   private boolean jj_3R_96() {
     if (jj_scan_token(ASIN)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3291,19 +3256,13 @@
     return false;
   }
 
-  private boolean jj_3R_20() {
-    if (jj_3R_35()) return true;
-    if (jj_scan_token(CONCAT)) return true;
-    return false;
-  }
-
   private boolean jj_3R_94() {
     if (jj_scan_token(TRUNCATE)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
     if (jj_3R_110()) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_177()) jj_scanpos = xsp;
+    if (jj_3R_179()) jj_scanpos = xsp;
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
@@ -3316,21 +3275,13 @@
     return false;
   }
 
-  private boolean jj_3R_137() {
-    if (jj_3R_160()) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_171()) jj_scanpos = xsp;
-    return false;
-  }
-
   private boolean jj_3R_92() {
     if (jj_scan_token(ROUND)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
     if (jj_3R_110()) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_176()) jj_scanpos = xsp;
+    if (jj_3R_178()) jj_scanpos = xsp;
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
@@ -3340,11 +3291,24 @@
     if (jj_scan_token(LEFT_PAR)) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_175()) jj_scanpos = xsp;
+    if (jj_3R_177()) jj_scanpos = xsp;
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
 
+  private boolean jj_3R_162() {
+    if (jj_3R_34()) return true;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_196()) jj_scanpos = xsp;
+    return false;
+  }
+
+  private boolean jj_3R_114() {
+    if (jj_scan_token(FULL)) return true;
+    return false;
+  }
+
   private boolean jj_3R_90() {
     if (jj_scan_token(RADIANS)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3363,11 +3327,6 @@
     return false;
   }
 
-  private boolean jj_3_9() {
-    if (jj_3R_22()) return true;
-    return false;
-  }
-
   private boolean jj_3R_88() {
     if (jj_scan_token(SIGN)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3376,11 +3335,6 @@
     return false;
   }
 
-  private boolean jj_3_8() {
-    if (jj_3R_21()) return true;
-    return false;
-  }
-
   private boolean jj_3R_87() {
     if (jj_scan_token(SQUARE)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3396,17 +3350,6 @@
     return false;
   }
 
-  private boolean jj_3_7() {
-    if (jj_scan_token(REGULAR_IDENTIFIER)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_117() {
-    if (jj_scan_token(FULL)) return true;
-    return false;
-  }
-
   private boolean jj_3R_85() {
     if (jj_scan_token(MOD)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3417,11 +3360,6 @@
     return false;
   }
 
-  private boolean jj_3_6() {
-    if (jj_scan_token(LEFT_PAR)) return true;
-    return false;
-  }
-
   private boolean jj_3R_84() {
     if (jj_scan_token(LOG10)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3430,49 +3368,47 @@
     return false;
   }
 
-  private boolean jj_3_5() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_scan_token(67)) {
-    jj_scanpos = xsp;
-    if (jj_3R_20()) return true;
-    }
-    return false;
-  }
-
-  private boolean jj_3R_83() {
-    if (jj_scan_token(LOG)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_110()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_82() {
-    if (jj_scan_token(FLOOR)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_110()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3_4() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_18()) {
-    jj_scanpos = xsp;
-    if (jj_3R_19()) return true;
-    }
-    return false;
-  }
-
-  private boolean jj_3R_18() {
+  private boolean jj_3R_160() {
     Token xsp;
     xsp = jj_scanpos;
     if (jj_scan_token(8)) {
     jj_scanpos = xsp;
     if (jj_scan_token(9)) return true;
     }
+    if (jj_3R_110()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_19() {
+    if (jj_3R_34()) return true;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_scan_token(8)) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(9)) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(10)) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(11)) return true;
+    }
+    }
+    }
+    return false;
+  }
+
+  private boolean jj_3R_83() {
+    if (jj_scan_token(LOG)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_110()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_82() {
+    if (jj_scan_token(FLOOR)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_110()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
 
@@ -3492,8 +3428,9 @@
     return false;
   }
 
-  private boolean jj_3R_69() {
-    if (jj_3R_34()) return true;
+  private boolean jj_3R_20() {
+    if (jj_3R_35()) return true;
+    if (jj_scan_token(CONCAT)) return true;
     return false;
   }
 
@@ -3505,24 +3442,6 @@
     return false;
   }
 
-  private boolean jj_3R_68() {
-    if (jj_3R_35()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_67() {
-    if (jj_3R_21()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_110() {
-    if (jj_3R_137()) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_158()) jj_scanpos = xsp;
-    return false;
-  }
-
   private boolean jj_3R_78() {
     if (jj_scan_token(ABS)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3531,35 +3450,37 @@
     return false;
   }
 
-  private boolean jj_3R_66() {
-    if (jj_3R_111()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_65() {
-    if (jj_3R_24()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_64() {
+  private boolean jj_3R_138() {
+    if (jj_3R_162()) return true;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_173()) jj_scanpos = xsp;
+    return false;
+  }
+
+  private boolean jj_3_9() {
+    if (jj_3R_22()) return true;
+    return false;
+  }
+
+  private boolean jj_3_8() {
+    if (jj_3R_21()) return true;
+    return false;
+  }
+
+  private boolean jj_3_7() {
+    if (jj_scan_token(REGULAR_IDENTIFIER)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_46()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_63() {
-    if (jj_3R_27()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_62() {
-    if (jj_3R_110()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_113() {
-    if (jj_scan_token(RIGHT)) return true;
+    return false;
+  }
+
+  private boolean jj_3_6() {
+    if (jj_scan_token(LEFT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_117() {
+    if (jj_scan_token(FULL)) return true;
     return false;
   }
 
@@ -3618,30 +3539,155 @@
     return false;
   }
 
-  private boolean jj_3R_128() {
+  private boolean jj_3_5() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_scan_token(67)) {
+    jj_scanpos = xsp;
+    if (jj_3R_20()) return true;
+    }
+    return false;
+  }
+
+  private boolean jj_3_4() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_18()) {
+    jj_scanpos = xsp;
+    if (jj_3R_19()) return true;
+    }
+    return false;
+  }
+
+  private boolean jj_3R_18() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_scan_token(8)) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(9)) return true;
+    }
+    return false;
+  }
+
+  private boolean jj_3R_41() {
+    if (jj_3R_24()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_40() {
+    if (jj_3R_59()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_69() {
+    if (jj_3R_34()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_39() {
+    if (jj_3R_58()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_68() {
+    if (jj_3R_35()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_67() {
+    if (jj_3R_21()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_110() {
+    if (jj_3R_138()) return true;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_160()) jj_scanpos = xsp;
+    return false;
+  }
+
+  private boolean jj_3R_38() {
+    if (jj_3R_57()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_66() {
+    if (jj_3R_111()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_23() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_38()) {
+    jj_scanpos = xsp;
+    if (jj_3R_39()) {
+    jj_scanpos = xsp;
+    if (jj_3R_40()) {
+    jj_scanpos = xsp;
+    if (jj_3R_41()) return true;
+    }
+    }
+    }
+    return false;
+  }
+
+  private boolean jj_3R_65() {
+    if (jj_3R_24()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_64() {
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_46()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_63() {
+    if (jj_3R_27()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_62() {
+    if (jj_3R_110()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_113() {
+    if (jj_scan_token(RIGHT)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_129() {
     if (jj_scan_token(LEFT_PAR)) return true;
     if (jj_3R_27()) return true;
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
 
-  private boolean jj_3R_41() {
-    if (jj_3R_24()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_40() {
-    if (jj_3R_59()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_127() {
+  private boolean jj_3R_128() {
     if (jj_3R_21()) return true;
     return false;
   }
 
-  private boolean jj_3R_39() {
-    if (jj_3R_58()) return true;
+  private boolean jj_3R_75() {
+    if (jj_scan_token(COORDSYS)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_125()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_183() {
+    if (jj_3R_21()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_176() {
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_175()) return true;
     return false;
   }
 
@@ -3673,103 +3719,17 @@
     return false;
   }
 
-  private boolean jj_3R_126() {
-    if (jj_3R_22()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_38() {
-    if (jj_3R_57()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_23() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_38()) {
-    jj_scanpos = xsp;
-    if (jj_3R_39()) {
-    jj_scanpos = xsp;
-    if (jj_3R_40()) {
-    jj_scanpos = xsp;
-    if (jj_3R_41()) return true;
-    }
-    }
-    }
-    return false;
-  }
-
-  private boolean jj_3R_123() {
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_110()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_122() {
-    if (jj_3R_145()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_76() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_126()) {
-    jj_scanpos = xsp;
-    if (jj_3R_127()) {
-    jj_scanpos = xsp;
-    if (jj_3R_128()) return true;
-    }
-    }
-    return false;
-  }
-
-  private boolean jj_3R_121() {
-    if (jj_3R_21()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_116() {
-    if (jj_scan_token(RIGHT)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_120() {
-    if (jj_3R_144()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_75() {
-    if (jj_scan_token(COORDSYS)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_124()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
   private boolean jj_3R_181() {
     if (jj_3R_21()) return true;
     return false;
   }
 
-  private boolean jj_3R_174() {
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_173()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_179() {
-    if (jj_3R_21()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_205() {
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_14()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_143() {
+  private boolean jj_3R_127() {
+    if (jj_3R_22()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_144() {
     if (jj_scan_token(REGION)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
     if (jj_3R_27()) return true;
@@ -3777,12 +3737,99 @@
     return false;
   }
 
-  private boolean jj_3R_161() {
+  private boolean jj_3R_124() {
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_110()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_163() {
     if (jj_scan_token(POINT)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_172()) return true;
+    if (jj_3R_174()) return true;
     if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_173()) return true;
+    if (jj_3R_175()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_123() {
+    if (jj_3R_147()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_76() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_127()) {
+    jj_scanpos = xsp;
+    if (jj_3R_128()) {
+    jj_scanpos = xsp;
+    if (jj_3R_129()) return true;
+    }
+    }
+    return false;
+  }
+
+  private boolean jj_3R_122() {
+    if (jj_3R_146()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_121() {
+    if (jj_3R_21()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_116() {
+    if (jj_scan_token(RIGHT)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_120() {
+    if (jj_3R_145()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_143() {
+    if (jj_scan_token(POLYGON)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_174()) return true;
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_175()) return true;
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_175()) return true;
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_175()) return true;
+    Token xsp;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_176()) { jj_scanpos = xsp; break; }
+    }
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_142() {
+    if (jj_3R_163()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_207() {
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_14()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_141() {
+    if (jj_scan_token(CIRCLE)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_174()) return true;
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_175()) return true;
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_110()) return true;
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
@@ -3796,7 +3843,10 @@
     jj_scanpos = xsp;
     if (jj_3R_122()) {
     jj_scanpos = xsp;
-    if (jj_3R_123()) return true;
+    if (jj_3R_123()) {
+    jj_scanpos = xsp;
+    if (jj_3R_124()) return true;
+    }
     }
     }
     }
@@ -3808,6 +3858,14 @@
     return false;
   }
 
+  private boolean jj_3R_140() {
+    if (jj_scan_token(CENTROID)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_125()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
   private boolean jj_3R_70() {
     Token xsp;
     xsp = jj_scanpos;
@@ -3823,7 +3881,7 @@
     return false;
   }
 
-  private boolean jj_3R_201() {
+  private boolean jj_3R_203() {
     Token xsp;
     xsp = jj_scanpos;
     if (jj_scan_token(8)) {
@@ -3833,35 +3891,30 @@
     return false;
   }
 
-  private boolean jj_3R_195() {
+  private boolean jj_3R_197() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_201()) jj_scanpos = xsp;
+    if (jj_3R_203()) jj_scanpos = xsp;
     if (jj_scan_token(UNSIGNED_INTEGER)) return true;
     return false;
   }
 
-  private boolean jj_3R_142() {
-    if (jj_scan_token(POLYGON)) return true;
+  private boolean jj_3R_139() {
+    if (jj_scan_token(BOX)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_172()) return true;
+    if (jj_3R_174()) return true;
     if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_173()) return true;
+    if (jj_3R_175()) return true;
     if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_173()) return true;
+    if (jj_3R_110()) return true;
     if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_173()) return true;
-    Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_174()) { jj_scanpos = xsp; break; }
-    }
+    if (jj_3R_110()) return true;
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
 
-  private boolean jj_3R_141() {
-    if (jj_3R_161()) return true;
+  private boolean jj_3R_187() {
+    if (jj_3R_21()) return true;
     return false;
   }
 
@@ -3875,50 +3928,72 @@
     return false;
   }
 
-  private boolean jj_3R_140() {
-    if (jj_scan_token(CIRCLE)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_172()) return true;
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_173()) return true;
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_110()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_139() {
-    if (jj_scan_token(CENTROID)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_124()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_144() {
+  private boolean jj_3R_185() {
+    if (jj_3R_21()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_111() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(105)) {
+    if (jj_3R_139()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(106)) {
+    if (jj_3R_140()) {
     jj_scanpos = xsp;
+    if (jj_3R_141()) {
+    jj_scanpos = xsp;
+    if (jj_3R_142()) {
+    jj_scanpos = xsp;
+    if (jj_3R_143()) {
+    jj_scanpos = xsp;
+    if (jj_3R_144()) return true;
+    }
+    }
+    }
+    }
+    }
+    return false;
+  }
+
+  private boolean jj_3R_186() {
+    if (jj_3R_163()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_182() {
+    if (jj_3R_163()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_145() {
+    Token xsp;
+    xsp = jj_scanpos;
     if (jj_scan_token(107)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(110)) return true;
+    if (jj_scan_token(108)) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(109)) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(112)) return true;
     }
     }
     }
     return false;
   }
 
-  private boolean jj_3R_204() {
+  private boolean jj_3R_180() {
+    if (jj_3R_163()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_206() {
     if (jj_scan_token(USING)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
     if (jj_3R_14()) return true;
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_205()) { jj_scanpos = xsp; break; }
+      if (jj_3R_207()) { jj_scanpos = xsp; break; }
     }
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
@@ -3929,6 +4004,11 @@
     return false;
   }
 
+  private boolean jj_3R_174() {
+    if (jj_3R_27()) return true;
+    return false;
+  }
+
   private boolean jj_3R_71() {
     Token xsp;
     xsp = jj_scanpos;
@@ -3944,28 +4024,9 @@
     return false;
   }
 
-  private boolean jj_3R_203() {
+  private boolean jj_3R_205() {
     if (jj_scan_token(ON)) return true;
-    if (jj_3R_166()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_138() {
-    if (jj_scan_token(BOX)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_172()) return true;
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_173()) return true;
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_110()) return true;
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_110()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_185() {
-    if (jj_3R_21()) return true;
+    if (jj_3R_168()) return true;
     return false;
   }
 
@@ -3984,7 +4045,12 @@
     return false;
   }
 
-  private boolean jj_3R_186() {
+  private boolean jj_3R_184() {
+    if (jj_3R_163()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_188() {
     if (jj_3R_46()) return true;
     return false;
   }
@@ -4006,50 +4072,13 @@
     if (jj_scan_token(JOIN)) return true;
     if (jj_3R_51()) return true;
     xsp = jj_scanpos;
-    if (jj_3R_203()) {
+    if (jj_3R_205()) {
     jj_scanpos = xsp;
-    if (jj_3R_204()) return true;
+    if (jj_3R_206()) return true;
     }
     return false;
   }
 
-  private boolean jj_3R_183() {
-    if (jj_3R_21()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_111() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_138()) {
-    jj_scanpos = xsp;
-    if (jj_3R_139()) {
-    jj_scanpos = xsp;
-    if (jj_3R_140()) {
-    jj_scanpos = xsp;
-    if (jj_3R_141()) {
-    jj_scanpos = xsp;
-    if (jj_3R_142()) {
-    jj_scanpos = xsp;
-    if (jj_3R_143()) return true;
-    }
-    }
-    }
-    }
-    }
-    return false;
-  }
-
-  private boolean jj_3R_184() {
-    if (jj_3R_161()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_180() {
-    if (jj_3R_161()) return true;
-    return false;
-  }
-
   private boolean jj_3R_32() {
     if (jj_scan_token(NATURAL)) return true;
     Token xsp;
@@ -4060,51 +4089,27 @@
     return false;
   }
 
-  private boolean jj_3R_178() {
-    if (jj_3R_161()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_172() {
-    if (jj_3R_27()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_196() {
+  private boolean jj_3R_107() {
+    if (jj_scan_token(DISTANCE)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
-    if (jj_3R_14()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_182() {
-    if (jj_3R_161()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_193() {
-    Token xsp;
+    if (jj_3R_184()) {
+    jj_scanpos = xsp;
+    if (jj_3R_185()) return true;
+    }
+    if (jj_scan_token(COMMA)) return true;
     xsp = jj_scanpos;
-    if (jj_scan_token(49)) {
+    if (jj_3R_186()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(50)) return true;
+    if (jj_3R_187()) return true;
     }
-    return false;
-  }
-
-  private boolean jj_3R_17() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_32()) {
-    jj_scanpos = xsp;
-    if (jj_3R_33()) return true;
-    }
-    return false;
-  }
-
-  private boolean jj_3R_107() {
-    if (jj_scan_token(DISTANCE)) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_106() {
+    if (jj_scan_token(COORD2)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
     Token xsp;
     xsp = jj_scanpos;
@@ -4112,23 +4117,20 @@
     jj_scanpos = xsp;
     if (jj_3R_183()) return true;
     }
-    if (jj_scan_token(COMMA)) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_198() {
+    Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_184()) {
-    jj_scanpos = xsp;
-    if (jj_3R_185()) return true;
-    }
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_202() {
-    if (jj_3R_17()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_106() {
-    if (jj_scan_token(COORD2)) return true;
+    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_3R_14()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_105() {
+    if (jj_scan_token(COORD1)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
     Token xsp;
     xsp = jj_scanpos;
@@ -4140,64 +4142,20 @@
     return false;
   }
 
-  private boolean jj_3R_105() {
-    if (jj_scan_token(COORD1)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_178()) {
-    jj_scanpos = xsp;
-    if (jj_3R_179()) return true;
-    }
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_119() {
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_197()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
   private boolean jj_3R_104() {
     if (jj_scan_token(AREA)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_124()) return true;
+    if (jj_3R_125()) return true;
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
 
-  private boolean jj_3R_197() {
-    if (jj_3R_72()) return true;
-    Token xsp;
-    if (jj_3R_202()) return true;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_202()) { jj_scanpos = xsp; break; }
-    }
-    return false;
-  }
-
-  private boolean jj_3_3() {
-    if (jj_3R_17()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_118() {
-    if (jj_3R_77()) return true;
+  private boolean jj_3R_195() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_196()) jj_scanpos = xsp;
-    return false;
-  }
-
-  private boolean jj_3R_51() {
-    if (jj_3R_72()) return true;
-    Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3_3()) { jj_scanpos = xsp; break; }
+    if (jj_scan_token(49)) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(50)) return true;
     }
     return false;
   }
@@ -4210,37 +4168,65 @@
     if (jj_scan_token(63)) return true;
     }
     if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_124()) return true;
+    if (jj_3R_125()) return true;
     if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_124()) return true;
+    if (jj_3R_125()) return true;
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
 
-  private boolean jj_3_2() {
-    if (jj_3R_16()) return true;
+  private boolean jj_3R_17() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) jj_scanpos = xsp;
-    if (jj_3R_14()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_159() {
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_46()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_72() {
+    if (jj_3R_32()) {
+    jj_scanpos = xsp;
+    if (jj_3R_33()) return true;
+    }
+    return false;
+  }
+
+  private boolean jj_3R_204() {
+    if (jj_3R_17()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_119() {
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_199()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_199() {
+    if (jj_3R_72()) return true;
+    Token xsp;
+    if (jj_3R_204()) return true;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_204()) { jj_scanpos = xsp; break; }
+    }
+    return false;
+  }
+
+  private boolean jj_3_3() {
+    if (jj_3R_17()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_118() {
+    if (jj_3R_77()) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_118()) {
-    jj_scanpos = xsp;
-    if (jj_3_2()) {
-    jj_scanpos = xsp;
-    if (jj_3R_119()) return true;
-    }
+    if (jj_3R_198()) jj_scanpos = xsp;
+    return false;
+  }
+
+  private boolean jj_3R_51() {
+    if (jj_3R_72()) return true;
+    Token xsp;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3_3()) { jj_scanpos = xsp; break; }
     }
     return false;
   }
@@ -4264,7 +4250,42 @@
     return false;
   }
 
-  private boolean jj_3R_163() {
+  private boolean jj_3_2() {
+    if (jj_3R_16()) return true;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_scan_token(26)) jj_scanpos = xsp;
+    if (jj_3R_14()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_175() {
+    if (jj_3R_110()) return true;
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_110()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_161() {
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_46()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_72() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_118()) {
+    jj_scanpos = xsp;
+    if (jj_3_2()) {
+    jj_scanpos = xsp;
+    if (jj_3R_119()) return true;
+    }
+    }
+    return false;
+  }
+
+  private boolean jj_3R_165() {
     Token xsp;
     xsp = jj_scanpos;
     if (jj_scan_token(51)) {
@@ -4285,14 +4306,7 @@
     return false;
   }
 
-  private boolean jj_3R_173() {
-    if (jj_3R_110()) return true;
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_110()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_162() {
+  private boolean jj_3R_164() {
     if (jj_scan_token(COUNT)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
     Token xsp;
@@ -4301,13 +4315,50 @@
     xsp = jj_scanpos;
     if (jj_scan_token(10)) {
     jj_scanpos = xsp;
-    if (jj_3R_186()) return true;
+    if (jj_3R_188()) return true;
     }
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
 
-  private boolean jj_3R_192() {
+  private boolean jj_3R_147() {
+    if (jj_scan_token(CAST)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_46()) return true;
+    if (jj_scan_token(AS)) return true;
+    if (jj_scan_token(CAST_TYPE)) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_194() {
+    if (jj_3R_36()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_171() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_194()) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(109)) return true;
+    }
+    xsp = jj_scanpos;
+    if (jj_3R_195()) jj_scanpos = xsp;
+    return false;
+  }
+
+  private boolean jj_3R_146() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_164()) {
+    jj_scanpos = xsp;
+    if (jj_3R_165()) return true;
+    }
+    return false;
+  }
+
+  private boolean jj_3R_193() {
     if (jj_3R_36()) return true;
     return false;
   }
@@ -4315,36 +4366,9 @@
   private boolean jj_3R_169() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_192()) {
+    if (jj_3R_193()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(107)) return true;
-    }
-    xsp = jj_scanpos;
-    if (jj_3R_193()) jj_scanpos = xsp;
-    return false;
-  }
-
-  private boolean jj_3R_145() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_162()) {
-    jj_scanpos = xsp;
-    if (jj_3R_163()) return true;
-    }
-    return false;
-  }
-
-  private boolean jj_3R_191() {
-    if (jj_3R_36()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_167() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_191()) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(107)) return true;
+    if (jj_scan_token(109)) return true;
     }
     return false;
   }
@@ -4360,13 +4384,13 @@
     return false;
   }
 
-  private boolean jj_3R_136() {
+  private boolean jj_3R_137() {
     if (jj_scan_token(LEFT_PAR)) return true;
     if (jj_3R_46()) return true;
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_159()) { jj_scanpos = xsp; break; }
+      if (jj_3R_161()) { jj_scanpos = xsp; break; }
     }
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
@@ -4385,7 +4409,7 @@
     xsp = jj_scanpos;
     if (jj_3_16()) {
     jj_scanpos = xsp;
-    if (jj_3R_136()) return true;
+    if (jj_3R_137()) return true;
     }
     return false;
   }
@@ -4398,13 +4422,13 @@
     return false;
   }
 
-  private boolean jj_3R_130() {
+  private boolean jj_3R_131() {
     if (jj_scan_token(DOT)) return true;
     if (jj_3R_14()) return true;
     return false;
   }
 
-  private boolean jj_3R_129() {
+  private boolean jj_3R_130() {
     if (jj_scan_token(DOT)) return true;
     if (jj_3R_14()) return true;
     return false;
@@ -4435,9 +4459,9 @@
     if (jj_3R_14()) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_129()) jj_scanpos = xsp;
+    if (jj_3R_130()) jj_scanpos = xsp;
     xsp = jj_scanpos;
-    if (jj_3R_130()) jj_scanpos = xsp;
+    if (jj_3R_131()) jj_scanpos = xsp;
     return false;
   }
 
@@ -4450,16 +4474,16 @@
     return false;
   }
 
+  private boolean jj_3R_60() {
+    if (jj_3R_108()) return true;
+    return false;
+  }
+
   private boolean jj_3R_29() {
     if (jj_scan_token(DELIMITED_IDENTIFIER)) return true;
     return false;
   }
 
-  private boolean jj_3R_60() {
-    if (jj_3R_108()) return true;
-    return false;
-  }
-
   private boolean jj_3_14() {
     if (jj_3R_21()) return true;
     if (jj_scan_token(IS)) return true;
@@ -4544,26 +4568,26 @@
     return false;
   }
 
-  private boolean jj_3R_170() {
+  private boolean jj_3R_172() {
     if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_169()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_157() {
+    if (jj_3R_171()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_159() {
     if (jj_scan_token(ORDER_BY)) return true;
-    if (jj_3R_169()) return true;
+    if (jj_3R_171()) return true;
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_170()) { jj_scanpos = xsp; break; }
+      if (jj_3R_172()) { jj_scanpos = xsp; break; }
     }
     return false;
   }
 
-  private boolean jj_3R_156() {
+  private boolean jj_3R_158() {
     if (jj_scan_token(HAVING)) return true;
-    if (jj_3R_166()) return true;
+    if (jj_3R_168()) return true;
     return false;
   }
 
@@ -4583,25 +4607,25 @@
     return false;
   }
 
-  private boolean jj_3R_168() {
+  private boolean jj_3R_170() {
     if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_167()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_187() {
+    if (jj_3R_169()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_189() {
     if (jj_scan_token(AS)) return true;
     if (jj_3R_14()) return true;
     return false;
   }
 
-  private boolean jj_3R_155() {
+  private boolean jj_3R_157() {
     if (jj_scan_token(GROUP_BY)) return true;
-    if (jj_3R_167()) return true;
+    if (jj_3R_169()) return true;
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_168()) { jj_scanpos = xsp; break; }
+      if (jj_3R_170()) { jj_scanpos = xsp; break; }
     }
     return false;
   }
@@ -4611,63 +4635,69 @@
     return false;
   }
 
-  private boolean jj_3R_153() {
+  private boolean jj_3R_155() {
     if (jj_scan_token(COMMA)) return true;
     if (jj_3R_51()) return true;
     return false;
   }
 
-  private boolean jj_3R_154() {
+  private boolean jj_3R_156() {
     if (jj_scan_token(WHERE)) return true;
-    if (jj_3R_166()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_199() {
+    if (jj_3R_168()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_201() {
     if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_166()) return true;
+    if (jj_3R_168()) return true;
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
   }
 
-  private boolean jj_3R_198() {
+  private boolean jj_3R_200() {
     if (jj_3R_25()) return true;
     return false;
   }
 
+  private boolean jj_3R_191() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_200()) {
+    jj_scanpos = xsp;
+    if (jj_3R_201()) return true;
+    }
+    return false;
+  }
+
   private boolean jj_3R_30() {
     if (jj_3R_14()) return true;
     if (jj_scan_token(DOT)) return true;
     return false;
   }
 
-  private boolean jj_3R_189() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_198()) {
-    jj_scanpos = xsp;
-    if (jj_3R_199()) return true;
-    }
-    return false;
-  }
-
-  private boolean jj_3R_200() {
+  private boolean jj_3R_202() {
     if (jj_scan_token(NOT)) return true;
     return false;
   }
 
-  private boolean jj_3R_131() {
+  private boolean jj_3R_150() {
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_46()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_132() {
     if (jj_scan_token(FROM)) return true;
     if (jj_3R_51()) return true;
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_153()) { jj_scanpos = xsp; break; }
+      if (jj_3R_155()) { jj_scanpos = xsp; break; }
     }
     return false;
   }
 
-  private boolean jj_3R_190() {
+  private boolean jj_3R_192() {
     Token xsp;
     xsp = jj_scanpos;
     if (jj_scan_token(37)) {
@@ -4675,16 +4705,16 @@
     if (jj_scan_token(38)) return true;
     }
     xsp = jj_scanpos;
-    if (jj_3R_200()) jj_scanpos = xsp;
-    if (jj_3R_189()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_165() {
+    if (jj_3R_202()) jj_scanpos = xsp;
+    if (jj_3R_191()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_167() {
     if (jj_3R_46()) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_187()) jj_scanpos = xsp;
+    if (jj_3R_189()) jj_scanpos = xsp;
     return false;
   }
 
@@ -4697,39 +4727,33 @@
     return false;
   }
 
-  private boolean jj_3R_148() {
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_46()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_188() {
+  private boolean jj_3R_190() {
     if (jj_scan_token(NOT)) return true;
     return false;
   }
 
-  private boolean jj_3R_147() {
+  private boolean jj_3R_149() {
     if (jj_3R_111()) return true;
     return false;
   }
 
-  private boolean jj_3R_164() {
-    if (jj_scan_token(ASTERISK)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_166() {
+  private boolean jj_3R_168() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_188()) jj_scanpos = xsp;
-    if (jj_3R_189()) return true;
+    if (jj_3R_190()) jj_scanpos = xsp;
+    if (jj_3R_191()) return true;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_190()) { jj_scanpos = xsp; break; }
+      if (jj_3R_192()) { jj_scanpos = xsp; break; }
     }
     return false;
   }
 
+  private boolean jj_3R_166() {
+    if (jj_scan_token(ASTERISK)) return true;
+    return false;
+  }
+
   private boolean jj_3_1() {
     if (jj_3R_14()) return true;
     if (jj_scan_token(DOT)) return true;
@@ -4740,26 +4764,36 @@
     return false;
   }
 
-  private boolean jj_3R_151() {
+  private boolean jj_3R_153() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_164()) {
+    if (jj_3R_166()) {
     jj_scanpos = xsp;
     if (jj_3_1()) {
     jj_scanpos = xsp;
-    if (jj_3R_165()) return true;
+    if (jj_3R_167()) return true;
     }
     }
     return false;
   }
 
-  private boolean jj_3R_152() {
+  private boolean jj_3R_126() {
+    if (jj_3R_46()) return true;
+    Token xsp;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_150()) { jj_scanpos = xsp; break; }
+    }
+    return false;
+  }
+
+  private boolean jj_3R_154() {
     if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_151()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_146() {
+    if (jj_3R_153()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_148() {
     if (jj_3R_21()) return true;
     return false;
   }
@@ -4769,16 +4803,22 @@
     return false;
   }
 
-  private boolean jj_3R_124() {
+  private boolean jj_3R_125() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_146()) {
+    if (jj_3R_148()) {
     jj_scanpos = xsp;
-    if (jj_3R_147()) return true;
+    if (jj_3R_149()) return true;
     }
     return false;
   }
 
+  private boolean jj_3R_179() {
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_197()) return true;
+    return false;
+  }
+
   private boolean jj_3R_55() {
     if (jj_3R_76()) return true;
     return false;
@@ -4807,13 +4847,19 @@
     return false;
   }
 
-  private boolean jj_3R_150() {
+  private boolean jj_3R_178() {
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_197()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_152() {
     if (jj_scan_token(TOP)) return true;
     if (jj_scan_token(UNSIGNED_INTEGER)) return true;
     return false;
   }
 
-  private boolean jj_3R_149() {
+  private boolean jj_3R_151() {
     if (jj_scan_token(QUANTIFIER)) return true;
     return false;
   }
@@ -4822,24 +4868,27 @@
     if (jj_scan_token(SELECT)) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_149()) jj_scanpos = xsp;
+    if (jj_3R_151()) jj_scanpos = xsp;
     xsp = jj_scanpos;
-    if (jj_3R_150()) jj_scanpos = xsp;
-    if (jj_3R_151()) return true;
+    if (jj_3R_152()) jj_scanpos = xsp;
+    if (jj_3R_153()) return true;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_152()) { jj_scanpos = xsp; break; }
+      if (jj_3R_154()) { jj_scanpos = xsp; break; }
     }
     return false;
   }
 
-  private boolean jj_3R_125() {
-    if (jj_3R_46()) return true;
-    Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_148()) { jj_scanpos = xsp; break; }
-    }
+  private boolean jj_3R_16() {
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_31()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_47() {
+    if (jj_scan_token(CONCAT)) return true;
+    if (jj_3R_35()) return true;
     return false;
   }
 
@@ -4872,10 +4921,10 @@
       jj_la1_1 = new int[] {0x0,0x10,0x4000,0x8000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfff80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x60000,0x0,0x0,0x0,0x0,0x0,0x3,0x1,0x0,0x1,0x1,0x1,0x0,0x1,0x1,0x0,0xc,0x3,0x0,0x0,0x0,0x0,0x0,0xf80000,0x0,0x3f000000,0xc0f80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf80000,0x0,0x0,0x0,0x3f000000,0x80,0x60,0x60,0x80,0x0,0x80,0x80,0x0,0x1080,0x2000,0xfff80000,0x0,0x80,0x80,0x0,0x0,0x0,0xfff80000,0x780000,0x0,0xf80000,0xc0000000,0x8000000,0x8000000,0x8000000,0x8000000,0xc0000000,0x0,0x3f000000,0xc0000000,0xc0f80000,0x0,0x0,0x0,0x0,0x0,0xfff80000,};
    }
    private static void jj_la1_init_2() {
-      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x3fffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17,0x0,0x0,0x3ffffff7,0x3ffffff7,0x0,0x0,0x3fffe0,0x3fc00000,0x0,0x3fffffff,};
+      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x7ffffff7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x7fffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17,0x0,0x0,0x3ffffff7,0x7ffffff7,0x0,0x0,0x3fffe0,0x3fc00000,0x0,0x7fffffff,};
    }
    private static void jj_la1_init_3() {
-      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x4ec8,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x8c0,0x8c0,0x0,0x0,0x0,0xc0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4e00,0xc00,0x0,0x0,0x4ec0,0xc8,0x0,0x4ec0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4ec0,0x0,0x0,0xc8,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4ec8,0x0,0x0,0x0,0x0,0x0,0x0,0x4ec8,0x0,0x0,0x0,0x0,0xc0,0xc0,0xc0,0xc0,0x0,0x0,0x0,0x80,0x4ec0,0x0,0x0,0x0,0x0,0x0,0x4ec8,};
+      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300,0x300,0x0,0x0,0x13b20,0x0,0x0,0x0,0x300,0x0,0x0,0x0,0x2300,0x2300,0x0,0x0,0x0,0x300,0x0,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x13800,0x3000,0x0,0x0,0x13b00,0x320,0x0,0x13b00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x13b00,0x0,0x0,0x320,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x13b20,0x0,0x0,0x0,0x0,0x0,0x0,0x13b20,0x0,0x0,0x0,0x0,0x300,0x300,0x300,0x300,0x0,0x0,0x0,0x200,0x13b00,0x0,0x0,0x0,0x0,0x0,0x13b20,};
    }
   final private JJCalls[] jj_2_rtns = new JJCalls[16];
   private boolean jj_rescan = false;
@@ -5064,7 +5113,7 @@
   /** Generate ParseException. */
   public ParseException generateParseException() {
     jj_expentries.clear();
-    boolean[] la1tokens = new boolean[112];
+    boolean[] la1tokens = new boolean[114];
     if (jj_kind >= 0) {
       la1tokens[jj_kind] = true;
       jj_kind = -1;
@@ -5087,7 +5136,7 @@
         }
       }
     }
-    for (int i = 0; i < 112; i++) {
+    for (int i = 0; i < 114; i++) {
       if (la1tokens[i]) {
         jj_expentry = new int[1];
         jj_expentry[0] = i;
diff -r 77acd0a0fe3c -r 26d783778c0d adql/parser/ADQLParserConstants.java
--- a/adql/parser/ADQLParserConstants.java	Thu Dec 04 02:34:05 2014 +0200
+++ b/adql/parser/ADQLParserConstants.java	Thu Dec 04 19:20:20 2014 +0200
@@ -195,27 +195,31 @@
   /** RegularExpression Id. */
   int TAN = 93;
   /** RegularExpression Id. */
-  int STRING_LITERAL = 99;
+  int CAST = 94;
   /** RegularExpression Id. */
-  int DELIMITED_IDENTIFIER = 102;
+  int CAST_TYPE = 95;
   /** RegularExpression Id. */
-  int REGULAR_IDENTIFIER = 103;
+  int STRING_LITERAL = 101;
   /** RegularExpression Id. */
-  int Letter = 104;
+  int DELIMITED_IDENTIFIER = 104;
   /** RegularExpression Id. */
-  int SCIENTIFIC_NUMBER = 105;
+  int REGULAR_IDENTIFIER = 105;
   /** RegularExpression Id. */
-  int UNSIGNED_FLOAT = 106;
+  int Letter = 106;
   /** RegularExpression Id. */
-  int UNSIGNED_INTEGER = 107;
+  int SCIENTIFIC_NUMBER = 107;
   /** RegularExpression Id. */
-  int DIGIT = 108;
+  int UNSIGNED_FLOAT = 108;
   /** RegularExpression Id. */
-  int HEX_PREFIX = 109;
+  int UNSIGNED_INTEGER = 109;
   /** RegularExpression Id. */
-  int HEX_INTEGER = 110;
+  int DIGIT = 110;
   /** RegularExpression Id. */
-  int HEX_DIGIT = 111;
+  int HEX_PREFIX = 111;
+  /** RegularExpression Id. */
+  int HEX_INTEGER = 112;
+  /** RegularExpression Id. */
+  int HEX_DIGIT = 113;
 
   /** Lexical state. */
   int DEFAULT = 0;
@@ -322,14 +326,16 @@
     "\"COT\"",
     "\"SIN\"",
     "\"TAN\"",
-    "<token of kind 94>",
-    "<token of kind 95>",
+    "\"CAST\"",
+    "<CAST_TYPE>",
     "<token of kind 96>",
-    "\"\\\'\"",
+    "<token of kind 97>",
     "<token of kind 98>",
     "\"\\\'\"",
+    "<token of kind 100>",
+    "\"\\\'\"",
     "\"\\\"\"",
-    "<token of kind 101>",
+    "<token of kind 103>",
     "\"\\\"\"",
     "<REGULAR_IDENTIFIER>",
     "<Letter>",
diff -r 77acd0a0fe3c -r 26d783778c0d adql/parser/ADQLParserTokenManager.java
--- a/adql/parser/ADQLParserTokenManager.java	Thu Dec 04 02:34:05 2014 +0200
+++ b/adql/parser/ADQLParserTokenManager.java	Thu Dec 04 19:20:20 2014 +0200
@@ -50,7 +50,7 @@
    switch(curChar)
    {
       case 34:
-         return jjStartNfaWithStates_3(0, 102, 1);
+         return jjStartNfaWithStates_3(0, 104, 1);
       default :
          return jjMoveNfa_3(0, 0);
    }
@@ -87,15 +87,15 @@
                case 0:
                   if ((0xfffffffbffffffffL & l) != 0L)
                   {
-                     if (kind > 101)
-                        kind = 101;
+                     if (kind > 103)
+                        kind = 103;
                   }
                   else if (curChar == 34)
                      jjstateSet[jjnewStateCnt++] = 1;
                   break;
                case 1:
-                  if (curChar == 34 && kind > 101)
-                     kind = 101;
+                  if (curChar == 34 && kind > 103)
+                     kind = 103;
                   break;
                case 2:
                   if (curChar == 34)
@@ -113,7 +113,7 @@
             switch(jjstateSet[--i])
             {
                case 0:
-                  kind = 101;
+                  kind = 103;
                   break;
                default : break;
             }
@@ -128,8 +128,8 @@
             switch(jjstateSet[--i])
             {
                case 0:
-                  if ((jjbitVec0[i2] & l2) != 0L && kind > 101)
-                     kind = 101;
+                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
+                     kind = 103;
                   break;
                default : break;
             }
@@ -153,77 +153,140 @@
    switch (pos)
    {
       case 0:
-         if ((active0 & 0xfff1ffdffb400000L) != 0L || (active1 & 0x3c3fff4eL) != 0L)
+         if ((active0 & 0xc0000L) != 0L)
+            return 3;
+         if ((active0 & 0x40000000400000L) != 0L || (active1 & 0x10118000L) != 0L)
          {
-            jjmatchedKind = 103;
-            return 40;
+            jjmatchedKind = 105;
+            return 37;
+         }
+         if ((active0 & 0x80080000000L) != 0L || (active1 & 0xc00L) != 0L)
+         {
+            jjmatchedKind = 105;
+            return 18;
+         }
+         if ((active0 & 0x7eb1e2de69000000L) != 0L || (active1 & 0x6c2e714eL) != 0L)
+         {
+            jjmatchedKind = 105;
+            return 77;
          }
          if ((active0 & 0xa002004000000L) != 0L || (active1 & 0x3c00021L) != 0L)
          {
-            jjmatchedKind = 103;
-            return 16;
+            jjmatchedKind = 105;
+            return 8;
          }
          if ((active0 & 0x10L) != 0L)
-            return 41;
+            return 78;
+         if ((active0 & 0x102000000L) != 0L || (active1 & 0x200L) != 0L)
+         {
+            jjmatchedKind = 105;
+            return 22;
+         }
          if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x90L) != 0L)
          {
-            jjmatchedKind = 103;
-            return 13;
+            jjmatchedKind = 105;
+            return 56;
          }
-         if ((active0 & 0xc0000L) != 0L)
-            return 3;
-         if ((active1 & 0x200000000000L) != 0L)
+         if ((active0 & 0x100040000000000L) != 0L)
          {
-            jjmatchedKind = 107;
-            return 22;
+            jjmatchedKind = 105;
+            return 14;
+         }
+         if ((active1 & 0x800000000000L) != 0L)
+         {
+            jjmatchedKind = 109;
+            return 28;
          }
          if ((active0 & 0x200L) != 0L)
-            return 19;
+            return 25;
+         if ((active0 & 0x8000110010000000L) != 0L)
+         {
+            jjmatchedKind = 105;
+            return 42;
+         }
          return -1;
       case 1:
-         if ((active0 & 0x8003114414000000L) != 0L || (active1 & 0x802000L) != 0L)
-            return 40;
-         if ((active1 & 0x200000000000L) != 0L)
-            return 23;
          if ((active1 & 0x10L) != 0L)
          {
             if (jjmatchedPos != 1)
             {
-               jjmatchedKind = 103;
+               jjmatchedKind = 105;
                jjmatchedPos = 1;
             }
-            return 12;
+            return 55;
          }
-         if ((active0 & 0x7ffceebbeb400000L) != 0L || (active1 & 0x3f7fdfefL) != 0L)
+         if ((active0 & 0x7ffceebbeb400000L) != 0L || (active1 & 0x7f7fd1efL) != 0L)
          {
             if (jjmatchedPos != 1)
             {
-               jjmatchedKind = 103;
+               jjmatchedKind = 105;
                jjmatchedPos = 1;
             }
-            return 40;
+            return 77;
          }
+         if ((active0 & 0x8000100010000000L) != 0L)
+            return 47;
+         if ((active0 & 0x3014404000000L) != 0L || (active1 & 0x802000L) != 0L)
+            return 77;
+         if ((active1 & 0xc00L) != 0L)
+         {
+            if (jjmatchedPos != 1)
+            {
+               jjmatchedKind = 105;
+               jjmatchedPos = 1;
+            }
+            return 17;
+         }
+         if ((active1 & 0x200L) != 0L)
+         {
+            if (jjmatchedPos != 1)
+            {
+               jjmatchedKind = 105;
+               jjmatchedPos = 1;
+            }
+            return 21;
+         }
+         if ((active1 & 0x800000000000L) != 0L)
+            return 29;
          return -1;
       case 2:
+         if ((active1 & 0x200L) != 0L)
+         {
+            if (jjmatchedPos != 2)
+            {
+               jjmatchedKind = 105;
+               jjmatchedPos = 2;
+            }
+            return 20;
+         }
+         if ((active0 & 0x17a00a001000000L) != 0L || (active1 & 0x3c001d20L) != 0L)
+            return 77;
          if ((active1 & 0x10L) != 0L)
          {
             if (jjmatchedPos != 2)
             {
-               jjmatchedKind = 103;
+               jjmatchedKind = 105;
                jjmatchedPos = 2;
             }
-            return 11;
+            return 54;
          }
-         if ((active0 & 0x17a00a001000000L) != 0L || (active1 & 0x3c001d20L) != 0L)
-            return 40;
-         if ((active0 & 0xfe85ee1bfa400000L) != 0L || (active1 & 0x3ffc2cfL) != 0L)
+         if ((active0 & 0x7e85ee1bfa400000L) != 0L || (active1 & 0x43ffc0cfL) != 0L)
          {
             if (jjmatchedPos != 2)
             {
-               jjmatchedKind = 103;
+               jjmatchedKind = 105;
                jjmatchedPos = 2;
             }
-            return 40;
+            return 77;
+         }
+         if ((active0 & 0x8000000000000000L) != 0L)
+         {
+            if (jjmatchedPos != 2)
+            {
+               jjmatchedKind = 95;
+               jjmatchedPos = 2;
+            }
+            return 46;
          }
          return -1;
       case 3:
@@ -231,109 +294,118 @@
          {
             if (jjmatchedPos != 3)
             {
-               jjmatchedKind = 103;
+               jjmatchedKind = 105;
                jjmatchedPos = 3;
             }
-            return 21;
+            return 27;
          }
-         if ((active0 & 0xfe81e41878400000L) != 0L || (active1 & 0x2ac2ceL) != 0L)
+         if ((active0 & 0x8000000000000000L) != 0L)
          {
             if (jjmatchedPos != 3)
             {
-               jjmatchedKind = 103;
+               jjmatchedKind = 105;
                jjmatchedPos = 3;
             }
-            return 40;
+            return 45;
          }
-         if ((active0 & 0x40a0382000000L) != 0L || (active1 & 0x3d50001L) != 0L)
-            return 40;
+         if ((active0 & 0x40a0382000000L) != 0L || (active1 & 0x43d50001L) != 0L)
+            return 77;
+         if ((active0 & 0x7e81e41878400000L) != 0L || (active1 & 0x2ac2ceL) != 0L)
+         {
+            if (jjmatchedPos != 3)
+            {
+               jjmatchedKind = 105;
+               jjmatchedPos = 3;
+            }
+            return 77;
+         }
          if ((active1 & 0x10L) != 0L)
          {
             if (jjmatchedPos != 3)
             {
-               jjmatchedKind = 103;
+               jjmatchedKind = 105;
                jjmatchedPos = 3;
             }
-            return 10;
+            return 53;
          }
          return -1;
       case 4:
-         if ((active0 & 0x880001870000000L) != 0L || (active1 & 0x84200L) != 0L)
-            return 40;
-         if ((active1 & 0x2000800L) != 0L)
-            return 21;
          if ((active0 & 0xf601e40008400000L) != 0L || (active1 & 0x2280deL) != 0L)
          {
-            jjmatchedKind = 103;
+            jjmatchedKind = 105;
             jjmatchedPos = 4;
-            return 40;
+            return 77;
          }
+         if ((active0 & 0x880001870000000L) != 0L || (active1 & 0x84200L) != 0L)
+            return 77;
+         if ((active1 & 0x2000800L) != 0L)
+            return 27;
          return -1;
       case 5:
+         if ((active0 & 0x2400a00000400000L) != 0L || (active1 & 0x8000L) != 0L)
+            return 77;
+         if ((active1 & 0x6L) != 0L)
+            return 27;
+         if ((active0 & 0xd200040008000000L) != 0L || (active1 & 0x2200d8L) != 0L)
+         {
+            jjmatchedKind = 105;
+            jjmatchedPos = 5;
+            return 77;
+         }
          if ((active0 & 0x1400000000000L) != 0L)
          {
             if (jjmatchedPos < 4)
             {
-               jjmatchedKind = 103;
+               jjmatchedKind = 105;
                jjmatchedPos = 4;
             }
             return -1;
          }
-         if ((active0 & 0x2400a00000400000L) != 0L || (active1 & 0x8000L) != 0L)
-            return 40;
-         if ((active1 & 0x6L) != 0L)
-            return 21;
-         if ((active0 & 0xd200040008000000L) != 0L || (active1 & 0x2200d8L) != 0L)
-         {
-            jjmatchedKind = 103;
-            jjmatchedPos = 5;
-            return 40;
-         }
          return -1;
       case 6:
          if ((active0 & 0xc200000000000000L) != 0L || (active1 & 0x200018L) != 0L)
          {
-            jjmatchedKind = 103;
+            jjmatchedKind = 105;
             jjmatchedPos = 6;
-            return 40;
+            return 77;
          }
+         if ((active0 & 0x1000040008000000L) != 0L || (active1 & 0x200c0L) != 0L)
+            return 77;
          if ((active0 & 0x1400000000000L) != 0L)
          {
             if (jjmatchedPos < 4)
             {
-               jjmatchedKind = 103;
+               jjmatchedKind = 105;
                jjmatchedPos = 4;
             }
             return -1;
          }
-         if ((active0 & 0x1000040008000000L) != 0L || (active1 & 0x200c0L) != 0L)
-            return 40;
          return -1;
       case 7:
+         if ((active0 & 0x8000000000000000L) != 0L)
+         {
+            jjmatchedKind = 105;
+            jjmatchedPos = 7;
+            return 77;
+         }
+         if ((active0 & 0x4200000000000000L) != 0L || (active1 & 0x200018L) != 0L)
+            return 77;
          if ((active0 & 0x1400000000000L) != 0L)
          {
             if (jjmatchedPos < 4)
             {
-               jjmatchedKind = 103;
+               jjmatchedKind = 105;
                jjmatchedPos = 4;
             }
             return -1;
          }
-         if ((active0 & 0x4200000000000000L) != 0L || (active1 & 0x200018L) != 0L)
-            return 40;
-         if ((active0 & 0x8000000000000000L) != 0L)
-         {
-            jjmatchedKind = 103;
-            jjmatchedPos = 7;
-            return 40;
-         }
          return -1;
       case 8:
          if ((active0 & 0x8000000000000000L) != 0L)
          {
-            jjmatchedKind = 103;
+            jjmatchedKind = 105;
             jjmatchedPos = 8;
-            return 40;
+            return 77;
          }
          return -1;
       default :
@@ -349,13 +421,13 @@
    switch(curChar)
    {
       case 34:
-         return jjStopAtPos(0, 100);
+         return jjStopAtPos(0, 102);
       case 37:
          return jjStopAtPos(0, 12);
       case 38:
          return jjStopAtPos(0, 13);
       case 39:
-         return jjStopAtPos(0, 97);
+         return jjStopAtPos(0, 99);
       case 40:
          return jjStopAtPos(0, 2);
       case 41:
@@ -367,13 +439,13 @@
       case 44:
          return jjStopAtPos(0, 5);
       case 45:
-         return jjStartNfaWithStates_0(0, 9, 19);
+         return jjStartNfaWithStates_0(0, 9, 25);
       case 46:
-         return jjStartNfaWithStates_0(0, 4, 41);
+         return jjStartNfaWithStates_0(0, 4, 78);
       case 47:
          return jjStopAtPos(0, 11);
       case 48:
-         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
+         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L);
       case 59:
          return jjStopAtPos(0, 6);
       case 60:
@@ -394,7 +466,7 @@
          return jjMoveStringLiteralDfa1_0(0x100040000000000L, 0x0L);
       case 67:
       case 99:
-         return jjMoveStringLiteralDfa1_0(0x4680000000000000L, 0xc00004eL);
+         return jjMoveStringLiteralDfa1_0(0x4680000000000000L, 0x4c00004eL);
       case 68:
       case 100:
          return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x90L);
@@ -470,7 +542,7 @@
          break;
       case 65:
       case 97:
-         return jjMoveStringLiteralDfa2_0(active0, 0x10800008000000L, active1, 0x20060000L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x10800008000000L, active1, 0x60060000L);
       case 66:
       case 98:
          return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
@@ -486,7 +558,7 @@
       case 73:
       case 105:
          if ((active1 & 0x2000L) != 0L)
-            return jjStartNfaWithStates_0(1, 77, 40);
+            return jjStartNfaWithStates_0(1, 77, 77);
          return jjMoveStringLiteralDfa2_0(active0, 0x420080040000000L, active1, 0x10010010L);
       case 76:
       case 108:
@@ -494,7 +566,7 @@
       case 78:
       case 110:
          if ((active0 & 0x400000000L) != 0L)
-            return jjStartNfaWithStates_0(1, 34, 40);
+            return jjStartNfaWithStates_0(1, 34, 77);
          else if ((active0 & 0x100000000000L) != 0L)
          {
             jjmatchedKind = 44;
@@ -523,7 +595,7 @@
             jjmatchedPos = 1;
          }
          else if ((active0 & 0x10000000000L) != 0L)
-            return jjStartNfaWithStates_0(1, 40, 40);
+            return jjStartNfaWithStates_0(1, 40, 77);
          return jjMoveStringLiteralDfa2_0(active0, 0x2000800000000L, active1, 0x800000L);
       case 84:
       case 116:
@@ -536,8 +608,8 @@
          return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
       case 88:
       case 120:
-         if ((active1 & 0x200000000000L) != 0L)
-            return jjStartNfaWithStates_0(1, 109, 23);
+         if ((active1 & 0x800000000000L) != 0L)
+            return jjStartNfaWithStates_0(1, 111, 29);
          return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x100L);
       case 124:
          if ((active0 & 0x80L) != 0L)
@@ -565,14 +637,14 @@
       case 67:
       case 99:
          if ((active0 & 0x2000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 49, 40);
+            return jjStartNfaWithStates_0(2, 49, 77);
          break;
       case 68:
       case 100:
          if ((active0 & 0x2000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 37, 40);
+            return jjStartNfaWithStates_0(2, 37, 77);
          else if ((active1 & 0x1000L) != 0L)
-            return jjStartNfaWithStates_0(2, 76, 40);
+            return jjStartNfaWithStates_0(2, 76, 77);
          return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x20000L);
       case 69:
       case 101:
@@ -583,7 +655,7 @@
       case 71:
       case 103:
          if ((active0 & 0x8000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 51, 40);
+            return jjStartNfaWithStates_0(2, 51, 77);
          else if ((active1 & 0x400L) != 0L)
          {
             jjmatchedKind = 74;
@@ -602,16 +674,16 @@
       case 77:
       case 109:
          if ((active0 & 0x40000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 54, 40);
+            return jjStartNfaWithStates_0(2, 54, 77);
          break;
       case 78:
       case 110:
          if ((active0 & 0x20000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 53, 40);
+            return jjStartNfaWithStates_0(2, 53, 77);
          else if ((active1 & 0x10000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 92, 40);
+            return jjStartNfaWithStates_0(2, 92, 77);
          else if ((active1 & 0x20000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 93, 40);
+            return jjStartNfaWithStates_0(2, 93, 77);
          return jjMoveStringLiteralDfa3_0(active0, 0x4200000010000000L, active1, 0x40000L);
       case 79:
       case 111:
@@ -619,9 +691,9 @@
       case 80:
       case 112:
          if ((active0 & 0x1000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 24, 40);
+            return jjStartNfaWithStates_0(2, 24, 77);
          else if ((active1 & 0x100L) != 0L)
-            return jjStartNfaWithStates_0(2, 72, 40);
+            return jjStartNfaWithStates_0(2, 72, 77);
          break;
       case 82:
       case 114:
@@ -629,16 +701,16 @@
       case 83:
       case 115:
          if ((active1 & 0x20L) != 0L)
-            return jjStartNfaWithStates_0(2, 69, 40);
+            return jjStartNfaWithStates_0(2, 69, 77);
          else if ((active1 & 0x4000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 90, 40);
-         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x10L);
+            return jjStartNfaWithStates_0(2, 90, 77);
+         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x40000010L);
       case 84:
       case 116:
          if ((active0 & 0x8000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 39, 40);
+            return jjStartNfaWithStates_0(2, 39, 77);
          else if ((active1 & 0x8000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 91, 40);
+            return jjStartNfaWithStates_0(2, 91, 77);
          return jjMoveStringLiteralDfa3_0(active0, 0x8000040028000000L, active1, 0L);
       case 85:
       case 117:
@@ -652,9 +724,9 @@
       case 88:
       case 120:
          if ((active0 & 0x10000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 52, 40);
+            return jjStartNfaWithStates_0(2, 52, 77);
          else if ((active0 & 0x100000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 56, 40);
+            return jjStartNfaWithStates_0(2, 56, 77);
          break;
       default :
          break;
@@ -677,22 +749,22 @@
       case 65:
       case 97:
          if ((active1 & 0x1L) != 0L)
-            return jjStartNfaWithStates_0(3, 64, 40);
+            return jjStartNfaWithStates_0(3, 64, 77);
          return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L);
       case 67:
       case 99:
          if ((active0 & 0x4000000000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 50, 40);
+            return jjStartNfaWithStates_0(3, 50, 77);
          return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
       case 68:
       case 100:
          if ((active1 & 0x40000L) != 0L)
-            return jjStartNfaWithStates_0(3, 82, 40);
+            return jjStartNfaWithStates_0(3, 82, 77);
          break;
       case 69:
       case 101:
          if ((active0 & 0x80000000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 43, 40);
+            return jjStartNfaWithStates_0(3, 43, 77);
          return jjMoveStringLiteralDfa4_0(active0, 0x8001000030400000L, active1, 0x4000L);
       case 72:
       case 104:
@@ -703,23 +775,23 @@
       case 76:
       case 108:
          if ((active0 & 0x100000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 32, 40);
+            return jjStartNfaWithStates_0(3, 32, 77);
          else if ((active0 & 0x20000000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 41, 40);
+            return jjStartNfaWithStates_0(3, 41, 77);
          return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
       case 77:
       case 109:
          if ((active0 & 0x2000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 25, 40);
+            return jjStartNfaWithStates_0(3, 25, 77);
          break;
       case 78:
       case 110:
          if ((active0 & 0x200000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 33, 40);
+            return jjStartNfaWithStates_0(3, 33, 77);
          else if ((active1 & 0x10000L) != 0L)
-            return jjStartNfaWithStates_0(3, 80, 40);
+            return jjStartNfaWithStates_0(3, 80, 77);
          else if ((active1 & 0x800000L) != 0L)
-            return jjStartNfaWithStates_0(3, 87, 40);
+            return jjStartNfaWithStates_0(3, 87, 77);
          else if ((active1 & 0x1000000L) != 0L)
          {
             jjmatchedKind = 88;
@@ -735,14 +807,16 @@
       case 83:
       case 115:
          if ((active1 & 0x400000L) != 0L)
-            return jjStartNfaWithStates_0(3, 86, 40);
+            return jjStartNfaWithStates_0(3, 86, 77);
          return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
       case 84:
       case 116:
          if ((active0 & 0x80000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 31, 40);
+            return jjStartNfaWithStates_0(3, 31, 77);
          else if ((active1 & 0x100000L) != 0L)
-            return jjStartNfaWithStates_0(3, 84, 40);
+            return jjStartNfaWithStates_0(3, 84, 77);
+         else if ((active1 & 0x40000000L) != 0L)
+            return jjStartNfaWithStates_0(3, 94, 77);
          return jjMoveStringLiteralDfa4_0(active0, 0x4200000000000000L, active1, 0x10L);
       case 85:
       case 117:
@@ -771,11 +845,11 @@
    {
       case 48:
          if ((active1 & 0x800L) != 0L)
-            return jjStartNfaWithStates_0(4, 75, 21);
+            return jjStartNfaWithStates_0(4, 75, 27);
          break;
       case 50:
          if ((active1 & 0x2000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 89, 21);
+            return jjStartNfaWithStates_0(4, 89, 27);
          break;
       case 65:
       case 97:
@@ -786,17 +860,17 @@
       case 68:
       case 100:
          if ((active1 & 0x80000L) != 0L)
-            return jjStartNfaWithStates_0(4, 83, 40);
+            return jjStartNfaWithStates_0(4, 83, 77);
          return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xeL);
       case 69:
       case 101:
          if ((active0 & 0x1000000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 36, 40);
+            return jjStartNfaWithStates_0(4, 36, 77);
          return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0x80L);
       case 71:
       case 103:
          if ((active0 & 0x800000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 35, 40);
+            return jjStartNfaWithStates_0(4, 35, 77);
          return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
       case 73:
       case 105:
@@ -816,22 +890,22 @@
       case 82:
       case 114:
          if ((active0 & 0x10000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 28, 40);
+            return jjStartNfaWithStates_0(4, 28, 77);
          else if ((active0 & 0x20000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 29, 40);
+            return jjStartNfaWithStates_0(4, 29, 77);
          else if ((active1 & 0x200L) != 0L)
-            return jjStartNfaWithStates_0(4, 73, 40);
+            return jjStartNfaWithStates_0(4, 73, 77);
          else if ((active1 & 0x4000L) != 0L)
-            return jjStartNfaWithStates_0(4, 78, 40);
+            return jjStartNfaWithStates_0(4, 78, 77);
          return jjMoveStringLiteralDfa5_0(active0, 0x8201000008000000L, active1, 0x8000L);
       case 84:
       case 116:
          if ((active0 & 0x40000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 30, 40);
+            return jjStartNfaWithStates_0(4, 30, 77);
          else if ((active0 & 0x80000000000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 55, 40);
+            return jjStartNfaWithStates_0(4, 55, 77);
          else if ((active0 & 0x800000000000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 59, 40);
+            return jjStartNfaWithStates_0(4, 59, 77);
          return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
       default :
          break;
@@ -853,11 +927,11 @@
          return jjMoveStringLiteralDfa6_0(active0, 0x1400000000000L, active1, 0L);
       case 49:
          if ((active1 & 0x2L) != 0L)
-            return jjStartNfaWithStates_0(5, 65, 21);
+            return jjStartNfaWithStates_0(5, 65, 27);
          break;
       case 50:
          if ((active1 & 0x4L) != 0L)
-            return jjStartNfaWithStates_0(5, 66, 21);
+            return jjStartNfaWithStates_0(5, 66, 27);
          break;
       case 65:
       case 97:
@@ -865,14 +939,14 @@
       case 69:
       case 101:
          if ((active0 & 0x400000000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 58, 40);
+            return jjStartNfaWithStates_0(5, 58, 77);
          else if ((active1 & 0x8000L) != 0L)
-            return jjStartNfaWithStates_0(5, 79, 40);
+            return jjStartNfaWithStates_0(5, 79, 77);
          return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x80L);
       case 71:
       case 103:
          if ((active0 & 0x800000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 47, 40);
+            return jjStartNfaWithStates_0(5, 47, 77);
          break;
       case 73:
       case 105:
@@ -880,7 +954,7 @@
       case 78:
       case 110:
          if ((active0 & 0x2000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 61, 40);
+            return jjStartNfaWithStates_0(5, 61, 77);
          return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20050L);
       case 79:
       case 111:
@@ -888,12 +962,12 @@
       case 83:
       case 115:
          if ((active0 & 0x200000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 45, 40);
+            return jjStartNfaWithStates_0(5, 45, 77);
          return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x8L);
       case 84:
       case 116:
          if ((active0 & 0x400000L) != 0L)
-            return jjStartNfaWithStates_0(5, 22, 40);
+            return jjStartNfaWithStates_0(5, 22, 77);
          break;
       default :
          break;
@@ -923,7 +997,7 @@
       case 71:
       case 103:
          if ((active1 & 0x40L) != 0L)
-            return jjStartNfaWithStates_0(6, 70, 40);
+            return jjStartNfaWithStates_0(6, 70, 77);
          break;
       case 73:
       case 105:
@@ -931,21 +1005,21 @@
       case 76:
       case 108:
          if ((active0 & 0x8000000L) != 0L)
-            return jjStartNfaWithStates_0(6, 27, 40);
+            return jjStartNfaWithStates_0(6, 27, 77);
          break;
       case 78:
       case 110:
          if ((active0 & 0x40000000000L) != 0L)
-            return jjStartNfaWithStates_0(6, 42, 40);
+            return jjStartNfaWithStates_0(6, 42, 77);
          else if ((active0 & 0x1000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(6, 60, 40);
+            return jjStartNfaWithStates_0(6, 60, 77);
          return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
       case 83:
       case 115:
          if ((active1 & 0x80L) != 0L)
-            return jjStartNfaWithStates_0(6, 71, 40);
+            return jjStartNfaWithStates_0(6, 71, 77);
          else if ((active1 & 0x20000L) != 0L)
-            return jjStartNfaWithStates_0(6, 81, 40);
+            return jjStartNfaWithStates_0(6, 81, 77);
          break;
       case 84:
       case 116:
@@ -975,21 +1049,21 @@
       case 68:
       case 100:
          if ((active0 & 0x200000000000000L) != 0L)
-            return jjStartNfaWithStates_0(7, 57, 40);
+            return jjStartNfaWithStates_0(7, 57, 77);
          break;
       case 69:
       case 101:
          if ((active1 & 0x10L) != 0L)
-            return jjStartNfaWithStates_0(7, 68, 40);
+            return jjStartNfaWithStates_0(7, 68, 77);
          else if ((active1 & 0x200000L) != 0L)
-            return jjStartNfaWithStates_0(7, 85, 40);
+            return jjStartNfaWithStates_0(7, 85, 77);
          break;
       case 83:
       case 115:
          if ((active0 & 0x4000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(7, 62, 40);
+            return jjStartNfaWithStates_0(7, 62, 77);
          else if ((active1 & 0x8L) != 0L)
-            return jjStartNfaWithStates_0(7, 67, 40);
+            return jjStartNfaWithStates_0(7, 67, 77);
          break;
       case 89:
       case 121:
@@ -1036,7 +1110,7 @@
       case 83:
       case 115:
          if ((active0 & 0x8000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(9, 63, 40);
+            return jjStartNfaWithStates_0(9, 63, 77);
          break;
       default :
          break;
@@ -1054,7 +1128,7 @@
 private int jjMoveNfa_0(int startState, int curPos)
 {
    int startsAt = 0;
-   jjnewStateCnt = 40;
+   jjnewStateCnt = 77;
    int i = 1;
    jjstateSet[0] = startState;
    int kind = 0x7fffffff;
@@ -1069,11 +1143,163 @@
          {
             switch(jjstateSet[--i])
             {
+               case 20:
+               case 27:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 8:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 37:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 47:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 21:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 14:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 17:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 42:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 22:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 45:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 18:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 55:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 56:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 77:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 28:
+                  if ((0x3ff000000000000L & l) != 0L)
+                  {
+                     if (kind > 109)
+                        kind = 109;
+                     jjCheckNAdd(76);
+                  }
+                  else if (curChar == 46)
+                  {
+                     if (kind > 108)
+                        kind = 108;
+                     jjCheckNAdd(75);
+                  }
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(73, 74);
+                  else if (curChar == 46)
+                     jjCheckNAddTwoStates(72, 64);
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(70, 71);
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(69, 64);
+                  break;
+               case 53:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 46:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 54:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 78:
+                  if ((0x3ff000000000000L & l) != 0L)
+                  {
+                     if (kind > 108)
+                        kind = 108;
+                     jjCheckNAdd(67);
+                  }
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(63, 64);
+                  break;
                case 0:
                   if ((0x3ff000000000000L & l) != 0L)
                   {
-                     if (kind > 107)
-                        kind = 107;
+                     if (kind > 109)
+                        kind = 109;
                      jjCheckNAddStates(0, 6);
                   }
                   else if ((0x100002600L & l) != 0L)
@@ -1082,93 +1308,18 @@
                         kind = 1;
                   }
                   else if (curChar == 46)
-                     jjCheckNAddTwoStates(26, 30);
+                     jjCheckNAddTwoStates(63, 67);
                   else if (curChar == 45)
-                     jjCheckNAdd(19);
+                     jjCheckNAdd(25);
                   else if (curChar == 33)
                      jjstateSet[jjnewStateCnt++] = 5;
                   else if (curChar == 60)
                      jjstateSet[jjnewStateCnt++] = 3;
                   if (curChar == 48)
-                     jjstateSet[jjnewStateCnt++] = 22;
+                     jjstateSet[jjnewStateCnt++] = 28;
                   else if (curChar == 13)
                      jjstateSet[jjnewStateCnt++] = 1;
                   break;
-               case 12:
-               case 21:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 103)
-                     kind = 103;
-                  jjCheckNAdd(21);
-                  break;
-               case 10:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 103)
-                     kind = 103;
-                  jjCheckNAdd(21);
-                  break;
-               case 13:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 103)
-                     kind = 103;
-                  jjCheckNAdd(21);
-                  break;
-               case 11:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 103)
-                     kind = 103;
-                  jjCheckNAdd(21);
-                  break;
-               case 22:
-                  if ((0x3ff000000000000L & l) != 0L)
-                  {
-                     if (kind > 107)
-                        kind = 107;
-                     jjCheckNAdd(39);
-                  }
-                  else if (curChar == 46)
-                  {
-                     if (kind > 106)
-                        kind = 106;
-                     jjCheckNAdd(38);
-                  }
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(36, 37);
-                  else if (curChar == 46)
-                     jjCheckNAddTwoStates(35, 27);
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(33, 34);
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(32, 27);
-                  break;
-               case 16:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 103)
-                     kind = 103;
-                  jjCheckNAdd(21);
-                  break;
-               case 40:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 103)
-                     kind = 103;
-                  jjCheckNAdd(21);
-                  break;
-               case 41:
-                  if ((0x3ff000000000000L & l) != 0L)
-                  {
-                     if (kind > 106)
-                        kind = 106;
-                     jjCheckNAdd(30);
-                  }
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(26, 27);
-                  break;
                case 1:
                   if (curChar == 10 && kind > 1)
                      kind = 1;
@@ -1193,101 +1344,101 @@
                   if (curChar == 33)
                      jjstateSet[jjnewStateCnt++] = 5;
                   break;
-               case 18:
+               case 24:
                   if (curChar == 45)
-                     jjCheckNAdd(19);
+                     jjCheckNAdd(25);
                   break;
-               case 19:
+               case 25:
                   if (curChar != 45)
                      break;
-                  if (kind > 94)
-                     kind = 94;
-                  jjCheckNAdd(19);
-                  break;
-               case 23:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 110)
-                     kind = 110;
-                  jjstateSet[jjnewStateCnt++] = 23;
-                  break;
-               case 24:
-                  if (curChar == 48)
-                     jjstateSet[jjnewStateCnt++] = 22;
-                  break;
-               case 25:
-                  if (curChar == 46)
-                     jjCheckNAddTwoStates(26, 30);
-                  break;
-               case 26:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(26, 27);
-                  break;
-               case 28:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(29);
+                  if (kind > 96)
+                     kind = 96;
+                  jjCheckNAdd(25);
                   break;
                case 29:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 105)
-                     kind = 105;
-                  jjCheckNAdd(29);
+                  if (kind > 112)
+                     kind = 112;
+                  jjstateSet[jjnewStateCnt++] = 29;
                   break;
                case 30:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 106)
-                     kind = 106;
-                  jjCheckNAdd(30);
+                  if (curChar == 48)
+                     jjstateSet[jjnewStateCnt++] = 28;
                   break;
-               case 31:
+               case 62:
+                  if (curChar == 46)
+                     jjCheckNAddTwoStates(63, 67);
+                  break;
+               case 63:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(63, 64);
+                  break;
+               case 65:
+                  if ((0x280000000000L & l) != 0L)
+                     jjCheckNAdd(66);
+                  break;
+               case 66:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
                   if (kind > 107)
                      kind = 107;
+                  jjCheckNAdd(66);
+                  break;
+               case 67:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 108)
+                     kind = 108;
+                  jjCheckNAdd(67);
+                  break;
+               case 68:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 109)
+                     kind = 109;
                   jjCheckNAddStates(0, 6);
                   break;
-               case 32:
+               case 69:
                   if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(32, 27);
+                     jjCheckNAddTwoStates(69, 64);
                   break;
-               case 33:
+               case 70:
                   if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(33, 34);
+                     jjCheckNAddTwoStates(70, 71);
                   break;
-               case 34:
+               case 71:
                   if (curChar == 46)
-                     jjCheckNAddTwoStates(35, 27);
+                     jjCheckNAddTwoStates(72, 64);
                   break;
-               case 35:
+               case 72:
                   if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(35, 27);
+                     jjCheckNAddTwoStates(72, 64);
                   break;
-               case 36:
+               case 73:
                   if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(36, 37);
+                     jjCheckNAddTwoStates(73, 74);
                   break;
-               case 37:
+               case 74:
                   if (curChar != 46)
                      break;
-                  if (kind > 106)
-                     kind = 106;
-                  jjCheckNAdd(38);
+                  if (kind > 108)
+                     kind = 108;
+                  jjCheckNAdd(75);
                   break;
-               case 38:
+               case 75:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 106)
-                     kind = 106;
-                  jjCheckNAdd(38);
+                  if (kind > 108)
+                     kind = 108;
+                  jjCheckNAdd(75);
                   break;
-               case 39:
+               case 76:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 107)
-                     kind = 107;
-                  jjCheckNAdd(39);
+                  if (kind > 109)
+                     kind = 109;
+                  jjCheckNAdd(76);
                   break;
                default : break;
             }
@@ -1300,164 +1451,462 @@
          {
             switch(jjstateSet[--i])
             {
+               case 20:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x200000002L & l) != 0L)
+                     jjCheckNAdd(10);
+                  break;
+               case 8:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x100000001000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 7;
+                  break;
+               case 37:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x10000000100L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 39;
+                  else if ((0x200000002000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 36;
+                  break;
+               case 47:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x10000000100000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 46;
+                  if ((0x10000000100000L & l) != 0L)
+                  {
+                     if (kind > 95)
+                        kind = 95;
+                  }
+                  break;
+               case 21:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x800000008000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 20;
+                  break;
+               case 14:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x20000000200L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 13;
+                  break;
+               case 17:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x400000004000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 16;
+                  break;
+               case 42:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x400000004000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 47;
+                  if ((0x400000004000L & l) != 0L)
+                     jjCheckNAdd(10);
+                  break;
+               case 22:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x100000001000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 21;
+                  break;
+               case 45:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x8000000080L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 44;
+                  break;
+               case 18:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x800000008000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 17;
+                  break;
+               case 55:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x8000000080000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 54;
+                  break;
+               case 56:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x800000008000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 60;
+                  else if ((0x20000000200L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 55;
+                  break;
+               case 77:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  break;
+               case 28:
+                  if ((0x100000001000000L & l) != 0L)
+                     jjCheckNAdd(29);
+                  else if ((0x2000000020L & l) != 0L)
+                     jjAddStates(7, 8);
+                  break;
+               case 53:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x20000000200L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 52;
+                  break;
+               case 46:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x2000000020L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 45;
+                  break;
+               case 54:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAdd(27);
+                  }
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
+                  }
+                  if ((0x10000000100000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 53;
+                  break;
                case 0:
                   if ((0x7fffffe07fffffeL & l) != 0L)
                   {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAddTwoStates(20, 21);
+                     if (kind > 105)
+                        kind = 105;
+                     jjCheckNAddTwoStates(26, 27);
                   }
+                  if ((0x1000000010L & l) != 0L)
+                     jjAddStates(9, 10);
+                  else if ((0x20000000200L & l) != 0L)
+                     jjAddStates(11, 12);
+                  else if ((0x8000000080000L & l) != 0L)
+                     jjAddStates(13, 14);
+                  else if ((0x4000000040L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 22;
+                  else if ((0x100000001000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 18;
+                  else if ((0x400000004L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 14;
+                  else if ((0x200000002L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 8;
+                  break;
+               case 7:
+                  if ((0x100000001000L & l) != 0L && kind > 23)
+                     kind = 23;
+                  break;
+               case 9:
                   if ((0x200000002L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 16;
-                  else if ((0x1000000010L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 13;
+                     jjstateSet[jjnewStateCnt++] = 8;
+                  break;
+               case 10:
+                  if ((0x10000000100000L & l) != 0L && kind > 95)
+                     kind = 95;
+                  break;
+               case 11:
+               case 32:
+                  if ((0x400000004000L & l) != 0L)
+                     jjCheckNAdd(10);
                   break;
                case 12:
-                  if ((0x7fffffe87fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAdd(21);
-                  }
-                  if ((0x7fffffe07fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAddTwoStates(20, 21);
-                  }
-                  if ((0x8000000080000L & l) != 0L)
+                  if ((0x20000000200L & l) != 0L)
                      jjstateSet[jjnewStateCnt++] = 11;
                   break;
-               case 10:
-                  if ((0x7fffffe87fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAdd(21);
-                  }
-                  if ((0x7fffffe07fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAddTwoStates(20, 21);
-                  }
-                  if ((0x20000000200L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 9;
-                  break;
                case 13:
-                  if ((0x7fffffe87fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAdd(21);
-                  }
-                  if ((0x7fffffe07fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAddTwoStates(20, 21);
-                  }
-                  if ((0x20000000200L & l) != 0L)
+                  if ((0x8000000080L & l) != 0L)
                      jjstateSet[jjnewStateCnt++] = 12;
                   break;
-               case 11:
-                  if ((0x7fffffe87fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAdd(21);
-                  }
-                  if ((0x7fffffe07fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAddTwoStates(20, 21);
-                  }
-                  if ((0x10000000100000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 10;
-                  break;
-               case 22:
-                  if ((0x100000001000000L & l) != 0L)
-                     jjCheckNAdd(23);
-                  else if ((0x2000000020L & l) != 0L)
-                     jjAddStates(7, 8);
+               case 15:
+                  if ((0x400000004L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 14;
                   break;
                case 16:
-                  if ((0x7fffffe87fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAdd(21);
-                  }
-                  if ((0x7fffffe07fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAddTwoStates(20, 21);
-                  }
+                  if ((0x8000000080L & l) != 0L && kind > 95)
+                     kind = 95;
+                  break;
+               case 19:
                   if ((0x100000001000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 15;
+                     jjstateSet[jjnewStateCnt++] = 18;
+                  break;
+               case 23:
+                  if ((0x4000000040L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 22;
+                  break;
+               case 26:
+                  if ((0x7fffffe07fffffeL & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAddTwoStates(26, 27);
+                  break;
+               case 27:
+                  if ((0x7fffffe87fffffeL & l) == 0L)
+                     break;
+                  if (kind > 105)
+                     kind = 105;
+                  jjCheckNAdd(27);
+                  break;
+               case 29:
+                  if ((0x7e0000007eL & l) == 0L)
+                     break;
+                  if (kind > 112)
+                     kind = 112;
+                  jjCheckNAdd(29);
+                  break;
+               case 31:
+                  if ((0x8000000080000L & l) != 0L)
+                     jjAddStates(13, 14);
+                  break;
+               case 33:
+                  if ((0x20000000200L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 32;
+                  break;
+               case 34:
+                  if ((0x100000001000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 33;
+                  break;
+               case 35:
+                  if ((0x100000001000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 34;
+                  break;
+               case 36:
+                  if ((0x200000002L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 35;
+                  break;
+               case 38:
+                  if ((0x4000000040000L & l) != 0L)
+                     jjCheckNAdd(10);
+                  break;
+               case 39:
+                  if ((0x800000008000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 38;
                   break;
                case 40:
-                  if ((0x7fffffe87fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAdd(21);
-                  }
-                  if ((0x7fffffe07fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAddTwoStates(20, 21);
-                  }
+                  if ((0x10000000100L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 39;
                   break;
-               case 7:
+               case 41:
+                  if ((0x20000000200L & l) != 0L)
+                     jjAddStates(11, 12);
+                  break;
+               case 43:
+                  if ((0x4000000040000L & l) != 0L && kind > 95)
+                     kind = 95;
+                  break;
+               case 44:
+                  if ((0x2000000020L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 43;
+                  break;
+               case 48:
+                  if ((0x400000004000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 47;
+                  break;
+               case 49:
+                  if ((0x1000000010L & l) != 0L)
+                     jjAddStates(9, 10);
+                  break;
+               case 50:
                   if ((0x10000000100000L & l) != 0L && kind > 23)
                      kind = 23;
                   break;
-               case 8:
+               case 51:
                   if ((0x800000008L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 7;
+                     jjstateSet[jjnewStateCnt++] = 50;
                   break;
-               case 9:
+               case 52:
                   if ((0x400000004000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 8;
+                     jjstateSet[jjnewStateCnt++] = 51;
                   break;
-               case 14:
-                  if ((0x1000000010L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 13;
+               case 57:
+                  if ((0x2000000020L & l) != 0L && kind > 95)
+                     kind = 95;
                   break;
-               case 15:
-                  if ((0x100000001000L & l) != 0L && kind > 23)
-                     kind = 23;
+               case 58:
+                  if ((0x100000001000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 57;
                   break;
-               case 17:
-                  if ((0x200000002L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 16;
+               case 59:
+                  if ((0x400000004L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 58;
                   break;
-               case 20:
-                  if ((0x7fffffe07fffffeL & l) == 0L)
-                     break;
-                  if (kind > 103)
-                     kind = 103;
-                  jjCheckNAddTwoStates(20, 21);
+               case 60:
+                  if ((0x20000000200000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 59;
                   break;
-               case 21:
-                  if ((0x7fffffe87fffffeL & l) == 0L)
-                     break;
-                  if (kind > 103)
-                     kind = 103;
-                  jjCheckNAdd(21);
+               case 61:
+                  if ((0x800000008000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 60;
                   break;
-               case 23:
-                  if ((0x7e0000007eL & l) == 0L)
-                     break;
-                  if (kind > 110)
-                     kind = 110;
-                  jjCheckNAdd(23);
-                  break;
-               case 27:
+               case 64:
                   if ((0x2000000020L & l) != 0L)
                      jjAddStates(7, 8);
                   break;
@@ -1484,7 +1933,7 @@
          kind = 0x7fffffff;
       }
       ++curPos;
-      if ((i = jjnewStateCnt) == (startsAt = 40 - (jjnewStateCnt = startsAt)))
+      if ((i = jjnewStateCnt) == (startsAt = 77 - (jjnewStateCnt = startsAt)))
          return curPos;
       try { curChar = input_stream.readChar(); }
       catch(java.io.IOException e) { return curPos; }
@@ -1507,7 +1956,7 @@
    switch(curChar)
    {
       case 39:
-         return jjStartNfaWithStates_2(0, 99, 1);
+         return jjStartNfaWithStates_2(0, 101, 1);
       default :
          return jjMoveNfa_2(0, 0);
    }
@@ -1541,15 +1990,15 @@
                case 0:
                   if ((0xffffff7fffffffffL & l) != 0L)
                   {
-                     if (kind > 98)
-                        kind = 98;
+                     if (kind > 100)
+                        kind = 100;
                   }
                   else if (curChar == 39)
                      jjstateSet[jjnewStateCnt++] = 1;
                   break;
                case 1:
-                  if (curChar == 39 && kind > 98)
-                     kind = 98;
+                  if (curChar == 39 && kind > 100)
+                     kind = 100;
                   break;
                case 2:
                   if (curChar == 39)
@@ -1567,7 +2016,7 @@
             switch(jjstateSet[--i])
             {
                case 0:
-                  kind = 98;
+                  kind = 100;
                   break;
                default : break;
             }
@@ -1582,8 +2031,8 @@
             switch(jjstateSet[--i])
             {
                case 0:
-                  if ((jjbitVec0[i2] & l2) != 0L && kind > 98)
-                     kind = 98;
+                  if ((jjbitVec0[i2] & l2) != 0L && kind > 100)
+                     kind = 100;
                   break;
                default : break;
             }
@@ -1627,15 +2076,15 @@
                case 0:
                   if ((0x2400L & l) != 0L)
                   {
-                     if (kind > 95)
-                        kind = 95;
+                     if (kind > 97)
+                        kind = 97;
                   }
                   if (curChar == 13)
                      jjstateSet[jjnewStateCnt++] = 1;
                   break;
                case 1:
-                  if (curChar == 10 && kind > 95)
-                     kind = 95;
+                  if (curChar == 10 && kind > 97)
+                     kind = 97;
                   break;
                case 2:
                   if (curChar == 13)
@@ -1682,7 +2131,7 @@
    }
 }
 static final int[] jjnextStates = {
-   32, 33, 34, 27, 36, 37, 39, 28, 29, 
+   69, 70, 71, 64, 73, 74, 76, 65, 66, 56, 61, 42, 48, 37, 40, 
 };
 
 /** Token literal values. */
@@ -1695,7 +2144,7 @@
 null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
 null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
 null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
-null, null, null, null, null, null, };
+null, null, null, null, null, null, null, null, };
 
 /** Lexer state names. */
 public static final String[] lexStateNames = {
@@ -1710,21 +2159,21 @@
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, -1, 0, 
-   3, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
+   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, 
+   -1, 0, 3, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
 };
 static final long[] jjtoToken = {
-   0xfffffffffffffffdL, 0x6ec83fffffffL, 
+   0xfffffffffffffffdL, 0x1bb20ffffffffL, 
 };
 static final long[] jjtoSkip = {
-   0x2L, 0x80000000L, 
+   0x2L, 0x200000000L, 
 };
 static final long[] jjtoMore = {
-   0x0L, 0x3740000000L, 
+   0x0L, 0xdd00000000L, 
 };
 protected SimpleCharStream input_stream;
-private final int[] jjrounds = new int[40];
-private final int[] jjstateSet = new int[80];
+private final int[] jjrounds = new int[77];
+private final int[] jjstateSet = new int[154];
 protected char curChar;
 /** Constructor. */
 public ADQLParserTokenManager(SimpleCharStream stream){
@@ -1751,7 +2200,7 @@
 {
    int i;
    jjround = 0x80000001;
-   for (i = 40; i-- > 0;)
+   for (i = 77; i-- > 0;)
       jjrounds[i] = 0x80000000;
 }
 
@@ -1835,9 +2284,9 @@
          jjmatchedKind = 0x7fffffff;
          jjmatchedPos = 0;
          curPos = jjMoveStringLiteralDfa0_1();
-         if (jjmatchedPos == 0 && jjmatchedKind > 96)
+         if (jjmatchedPos == 0 && jjmatchedKind > 98)
          {
-            jjmatchedKind = 96;
+            jjmatchedKind = 98;
          }
          break;
        case 2:
diff -r 77acd0a0fe3c -r 26d783778c0d adql/parser/ADQLQueryFactory.java
--- a/adql/parser/ADQLQueryFactory.java	Thu Dec 04 02:34:05 2014 +0200
+++ b/adql/parser/ADQLQueryFactory.java	Thu Dec 04 19:20:20 2014 +0200
@@ -49,6 +49,7 @@
 import adql.query.from.OuterJoin.OuterType;
 import adql.query.operand.ADQLColumn;
 import adql.query.operand.ADQLOperand;
+import adql.query.operand.function.CastFunction;
 import adql.query.operand.Concatenation;
 import adql.query.operand.NegativeOperand;
 import adql.query.operand.NumericConstant;
@@ -271,6 +272,14 @@
 	public MathFunction createMathFunction(MathFunctionType type, ADQLOperand param1, ADQLOperand param2) throws Exception{
 		return new MathFunction(type, param1, param2);
 	}
+	
+	public CastFunction createCastFunction(Token type, ADQLOperand oper)
+	{
+	return new CastFunction(
+		type,
+		oper
+		);
+	}
 
 	/**
 	 * <p>Creates the user defined functions called as the given name and with the given parameters.</p>
diff -r 77acd0a0fe3c -r 26d783778c0d adql/parser/adqlGrammar.jj
--- a/adql/parser/adqlGrammar.jj	Thu Dec 04 02:34:05 2014 +0200
+++ b/adql/parser/adqlGrammar.jj	Thu Dec 04 19:20:20 2014 +0200
@@ -652,6 +652,16 @@
 |	< TAN: "TAN" >
 }
 
+
+/* *************** */
+/* CAST            */
+/* *************** */
+TOKEN : {
+    < CAST: "CAST" >
+|   < CAST_TYPE : "SMALLINT"| "SHORT" | "INT" | "INTEGER" | "BIGINT" | "LONG" | "FLOAT" | "DOUBLE" >
+}
+
+
 /* ******* */
 /* Comment */
 /* ******* */
@@ -1022,6 +1032,7 @@
 		| column=Column() {column.setExpectedType('N'); return column;}
 		// set_function_specification
 		| op=SqlFunction() {return op;}
+		| op=CastFunction() {return op;}
 		// LEFT_PAR value_expression RIGHT_PAR
 		| (<LEFT_PAR> op=NumericExpression() <RIGHT_PAR>) {return queryFactory.createWrappedOperand(op);})
 	}catch(Exception ex){
@@ -1296,6 +1307,23 @@
 	{ return funct; }
 }
 
+/* ************* */
+/* CAST FUNCTION */
+/* ************* */
+CastFunction CastFunction(): {Token type; ADQLOperand oper = null; CastFunction funct = null;}{
+    try {
+		(
+	        ( <CAST> <LEFT_PAR> oper = ValueExpression() <AS> type = <CAST_TYPE> <RIGHT_PAR>
+            { funct = queryFactory.createCastFunction(type, oper); } )
+		)
+	    }
+	catch(Exception ex)
+	    {
+		throw generateParseException(ex);
+	    }
+	{ return funct; }
+    }
+
 
 /* ************** */
 /* ADQL FUNCTIONS */
