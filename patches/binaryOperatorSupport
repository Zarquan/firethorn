# HG changeset patch
# User Stelios Voutsinas <stv@roe.ac.uk>
# Date 1417632696 -7200
#      Wed Dec 03 20:51:36 2014 +0200
# Branch 1.11.28-stv-cds-adql-2
# Node ID 7acedfd37cb50419abc5992208c128ab06fec461
# Parent  6600260db9344d5fd6f64a2458eadde56a23d1eb
Binary operator support [CDS-Patch]

diff -r 6600260db934 -r 7acedfd37cb5 firethorn-cds/adql/src/main/java/adql/parser/ADQLParser.java
--- a/firethorn-cds/adql/src/main/java/adql/parser/ADQLParser.java	Wed Dec 03 18:48:24 2014 +0200
+++ b/firethorn-cds/adql/src/main/java/adql/parser/ADQLParser.java	Wed Dec 03 20:51:36 2014 +0200
@@ -2930,41 +2930,6 @@
     finally { jj_save(15, xla); }
   }
 
-  private boolean jj_3R_185() {
-    if (jj_scan_token(NOT)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_146() {
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_46()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_149() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_161()) {
-    jj_scanpos = xsp;
-    if (jj_3_1()) {
-    jj_scanpos = xsp;
-    if (jj_3R_162()) return true;
-    }
-    }
-    return false;
-  }
-
-  private boolean jj_3R_150() {
-    if (jj_scan_token(COMMA)) return true;
-    if (jj_3R_149()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_145() {
-    if (jj_3R_109()) return true;
-    return false;
-  }
-
   private boolean jj_3R_163() {
     Token xsp;
     xsp = jj_scanpos;
@@ -3315,7 +3280,7 @@
   private boolean jj_3_5() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(63)) {
+    if (jj_scan_token(66)) {
     jj_scanpos = xsp;
     if (jj_3R_20()) return true;
     }
@@ -3780,7 +3745,7 @@
     }
     }
     xsp = jj_scanpos;
-    if (jj_scan_token(25)) jj_scanpos = xsp;
+    if (jj_scan_token(28)) jj_scanpos = xsp;
     return false;
   }
 
@@ -3829,7 +3794,7 @@
   private boolean jj_3R_49() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(24)) {
+    if (jj_scan_token(27)) {
     jj_scanpos = xsp;
     if (jj_3R_70()) return true;
     }
@@ -3857,11 +3822,11 @@
   private boolean jj_3R_142() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(99)) {
+    if (jj_scan_token(102)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(100)) {
+    if (jj_scan_token(103)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(101)) return true;
+    if (jj_scan_token(104)) return true;
     }
     }
     return false;
@@ -3915,7 +3880,7 @@
     }
     }
     xsp = jj_scanpos;
-    if (jj_scan_token(25)) jj_scanpos = xsp;
+    if (jj_scan_token(28)) jj_scanpos = xsp;
     return false;
   }
 
@@ -3960,7 +3925,7 @@
   private boolean jj_3R_50() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(24)) {
+    if (jj_scan_token(27)) {
     jj_scanpos = xsp;
     if (jj_3R_71()) return true;
     }
@@ -4016,7 +3981,7 @@
   private boolean jj_3R_192() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(22)) jj_scanpos = xsp;
+    if (jj_scan_token(25)) jj_scanpos = xsp;
     if (jj_3R_14()) return true;
     return false;
   }
@@ -4029,9 +3994,9 @@
   private boolean jj_3R_190() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(45)) {
+    if (jj_scan_token(48)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(46)) return true;
+    if (jj_scan_token(49)) return true;
     }
     return false;
   }
@@ -4153,7 +4118,7 @@
     if (jj_3R_16()) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(22)) jj_scanpos = xsp;
+    if (jj_scan_token(25)) jj_scanpos = xsp;
     if (jj_3R_14()) return true;
     return false;
   }
@@ -4227,9 +4192,9 @@
   private boolean jj_3R_101() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(58)) {
+    if (jj_scan_token(61)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(59)) return true;
+    if (jj_scan_token(62)) return true;
     }
     if (jj_scan_token(LEFT_PAR)) return true;
     if (jj_3R_122()) return true;
@@ -4255,7 +4220,7 @@
     xsp = jj_scanpos;
     if (jj_3R_189()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(101)) return true;
+    if (jj_scan_token(104)) return true;
     }
     xsp = jj_scanpos;
     if (jj_3R_190()) jj_scanpos = xsp;
@@ -4284,19 +4249,19 @@
   private boolean jj_3R_160() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(47)) {
+    if (jj_scan_token(50)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(48)) {
+    if (jj_scan_token(51)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(49)) {
+    if (jj_scan_token(52)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(50)) return true;
+    if (jj_scan_token(53)) return true;
     }
     }
     }
     if (jj_scan_token(LEFT_PAR)) return true;
     xsp = jj_scanpos;
-    if (jj_scan_token(19)) jj_scanpos = xsp;
+    if (jj_scan_token(22)) jj_scanpos = xsp;
     if (jj_3R_46()) return true;
     if (jj_scan_token(RIGHT_PAR)) return true;
     return false;
@@ -4314,7 +4279,7 @@
     if (jj_scan_token(LEFT_PAR)) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(19)) jj_scanpos = xsp;
+    if (jj_scan_token(22)) jj_scanpos = xsp;
     xsp = jj_scanpos;
     if (jj_scan_token(10)) {
     jj_scanpos = xsp;
@@ -4334,7 +4299,7 @@
     xsp = jj_scanpos;
     if (jj_3R_188()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(101)) return true;
+    if (jj_scan_token(104)) return true;
     }
     return false;
   }
@@ -4400,7 +4365,7 @@
   private boolean jj_3R_107() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(35)) jj_scanpos = xsp;
+    if (jj_scan_token(38)) jj_scanpos = xsp;
     if (jj_scan_token(IN)) return true;
     xsp = jj_scanpos;
     if (jj_3_16()) {
@@ -4433,7 +4398,7 @@
   private boolean jj_3R_26() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(35)) jj_scanpos = xsp;
+    if (jj_scan_token(38)) jj_scanpos = xsp;
     if (jj_scan_token(BETWEEN)) return true;
     if (jj_3R_46()) return true;
     if (jj_scan_token(AND)) return true;
@@ -4465,7 +4430,7 @@
     if (jj_3R_27()) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(35)) jj_scanpos = xsp;
+    if (jj_scan_token(38)) jj_scanpos = xsp;
     if (jj_scan_token(LIKE)) return true;
     return false;
   }
@@ -4490,17 +4455,17 @@
   private boolean jj_3R_106() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(12)) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(13)) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(14)) {
-    jj_scanpos = xsp;
     if (jj_scan_token(15)) {
     jj_scanpos = xsp;
     if (jj_scan_token(16)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(17)) return true;
+    if (jj_scan_token(17)) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(18)) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(19)) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(20)) return true;
     }
     }
     }
@@ -4545,7 +4510,7 @@
     if (jj_3R_27()) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(35)) jj_scanpos = xsp;
+    if (jj_scan_token(38)) jj_scanpos = xsp;
     if (jj_scan_token(LIKE)) return true;
     if (jj_3R_27()) return true;
     return false;
@@ -4562,7 +4527,7 @@
     if (jj_scan_token(IS)) return true;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(35)) jj_scanpos = xsp;
+    if (jj_scan_token(38)) jj_scanpos = xsp;
     if (jj_scan_token(NULL)) return true;
     return false;
   }
@@ -4687,9 +4652,9 @@
   private boolean jj_3R_187() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(33)) {
+    if (jj_scan_token(36)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(34)) return true;
+    if (jj_scan_token(37)) return true;
     }
     xsp = jj_scanpos;
     if (jj_3R_196()) jj_scanpos = xsp;
@@ -4712,6 +4677,41 @@
     return false;
   }
 
+  private boolean jj_3R_185() {
+    if (jj_scan_token(NOT)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_146() {
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_46()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_149() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_161()) {
+    jj_scanpos = xsp;
+    if (jj_3_1()) {
+    jj_scanpos = xsp;
+    if (jj_3R_162()) return true;
+    }
+    }
+    return false;
+  }
+
+  private boolean jj_3R_150() {
+    if (jj_scan_token(COMMA)) return true;
+    if (jj_3R_149()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_145() {
+    if (jj_3R_109()) return true;
+    return false;
+  }
+
   /** Generated Token Manager. */
   public ADQLParserTokenManager token_source;
   SimpleCharStream jj_input_stream;
@@ -4735,16 +4735,16 @@
       jj_la1_init_3();
    }
    private static void jj_la1_init_0() {
-      jj_la1_0 = new int[] {0x41,0x0,0x0,0x0,0x0,0x80000,0x100000,0x20,0x0,0x0,0x400000,0x400,0x304,0x20,0x20,0x20,0x0,0x10,0x10,0x10,0x0,0x0,0x0,0x0,0x400000,0x400000,0x400000,0x0,0x4,0x3d800000,0x1c000000,0x2000000,0x1d000000,0x1d000000,0x1c000000,0x2000000,0x1d000000,0x1d000000,0x20,0xc0000000,0x3d800000,0x0,0x0,0x0,0x300,0x300,0x4,0x4,0x0,0x304,0x300,0x300,0xc00,0xc00,0x300,0x300,0x4,0x80,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x3f000,0x0,0x0,0x304,0x3f000,0x0,0x0,0x20,0x4,0x80000,0x704,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x304,0x20,0x20,0x0,0x0,0x20,0x304,};
+      jj_la1_0 = new int[] {0x41,0x0,0x0,0x0,0x0,0x400000,0x800000,0x20,0x0,0x0,0x2000000,0x400,0x304,0x20,0x20,0x20,0x0,0x10,0x10,0x10,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x2000000,0x0,0x4,0xec000000,0xe0000000,0x10000000,0xe8000000,0xe8000000,0xe0000000,0x10000000,0xe8000000,0xe8000000,0x20,0x0,0xec000000,0x0,0x0,0x0,0x300,0x300,0x4,0x4,0x0,0x304,0x300,0x300,0xc00,0xc00,0x300,0x300,0x4,0x80,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x1f8000,0x0,0x0,0x304,0x1f8000,0x0,0x0,0x20,0x4,0x400000,0x704,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x304,0x20,0x20,0x0,0x0,0x20,0x304,};
    }
    private static void jj_la1_init_1() {
-      jj_la1_1 = new int[] {0x0,0x1,0x400,0x800,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffff8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000,0x6000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf8000,0x0,0x3f00000,0x7c0f8000,0x0,0x0,0x0,0x0,0x0,0x0,0xf8000,0x0,0x80000000,0x0,0x3f00000,0x8,0x6,0x6,0x8,0x0,0x8,0x8,0x0,0x108,0x200,0xffff8000,0x0,0x8,0x8,0x0,0x0,0x0,0xffff8000,0x78000,0x0,0xf8000,0xc000000,0x800000,0x800000,0x800000,0x800000,0x7c000000,0x0,0x3f00000,0x7c000000,0x7c0f8000,0x0,0x0,0x0,0x0,0x0,0xffff8000,};
+      jj_la1_1 = new int[] {0x0,0x8,0x2000,0x4000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000,0x30000,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x1,0x0,0x0,0x0,0x0,0x0,0x7c0000,0x0,0x1f800000,0xe07c0000,0x0,0x0,0x0,0x0,0x0,0x0,0x7c0000,0x0,0x0,0x0,0x1f800000,0x40,0x30,0x30,0x40,0x0,0x40,0x40,0x0,0x840,0x1000,0xfffc0000,0x0,0x40,0x40,0x0,0x0,0x0,0xfffc0000,0x3c0000,0x0,0x7c0000,0x60000000,0x4000000,0x4000000,0x4000000,0x4000000,0xe0000000,0x0,0x1f800000,0xe0000000,0xe07c0000,0x0,0x0,0x0,0x0,0x0,0xfffc0000,};
    }
    private static void jj_la1_init_2() {
-      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0xffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x20ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0xffffff,0xffffff,0x0,0x0,0xfffe,0xff0000,0x0,0x20ffffff,};
+      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fffffb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x7ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb,0x0,0x0,0x7fffffb,0x7fffffb,0x0,0x0,0x7fff0,0x7f80000,0x0,0x7ffffff,};
    }
    private static void jj_la1_init_3() {
-      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x3b,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x23,0x23,0x0,0x0,0x0,0x3,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38,0x30,0x0,0x0,0x3b,0x3,0x0,0x3b,0x0,0x0,0x0,0x0,0x0,0x0,0x3b,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3b,0x0,0x0,0x0,0x0,0x0,0x0,0x3b,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x2,0x3b,0x0,0x0,0x0,0x0,0x0,0x3b,};
+      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x0,0x0,0x1d9,0x0,0x0,0x0,0x18,0x0,0x0,0x0,0x118,0x118,0x0,0x0,0x0,0x18,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1c0,0x180,0x0,0x0,0x1d8,0x19,0x0,0x1d8,0x0,0x0,0x0,0x0,0x0,0x0,0x1d8,0x0,0x0,0x19,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1d9,0x0,0x0,0x0,0x0,0x0,0x0,0x1d9,0x0,0x0,0x0,0x0,0x18,0x18,0x18,0x18,0x0,0x0,0x0,0x10,0x1d8,0x0,0x0,0x0,0x0,0x0,0x1d9,};
    }
   final private JJCalls[] jj_2_rtns = new JJCalls[16];
   private boolean jj_rescan = false;
@@ -4933,7 +4933,7 @@
   /** Generate ParseException. */
   public ParseException generateParseException() {
     jj_expentries.clear();
-    boolean[] la1tokens = new boolean[103];
+    boolean[] la1tokens = new boolean[106];
     if (jj_kind >= 0) {
       la1tokens[jj_kind] = true;
       jj_kind = -1;
@@ -4956,7 +4956,7 @@
         }
       }
     }
-    for (int i = 0; i < 103; i++) {
+    for (int i = 0; i < 106; i++) {
       if (la1tokens[i]) {
         jj_expentry = new int[1];
         jj_expentry[0] = i;
diff -r 6600260db934 -r 7acedfd37cb5 firethorn-cds/adql/src/main/java/adql/parser/ADQLParserConstants.java
--- a/firethorn-cds/adql/src/main/java/adql/parser/ADQLParserConstants.java	Wed Dec 03 18:48:24 2014 +0200
+++ b/firethorn-cds/adql/src/main/java/adql/parser/ADQLParserConstants.java	Wed Dec 03 20:51:36 2014 +0200
@@ -31,173 +31,179 @@
   /** RegularExpression Id. */
   int DIVIDE = 11;
   /** RegularExpression Id. */
-  int EQUAL = 12;
+  int BIT_AND = 12;
   /** RegularExpression Id. */
-  int NOT_EQUAL = 13;
+  int BIT_OR = 13;
   /** RegularExpression Id. */
-  int LESS_THAN = 14;
+  int BIT_XOR = 14;
   /** RegularExpression Id. */
-  int LESS_EQUAL_THAN = 15;
+  int EQUAL = 15;
   /** RegularExpression Id. */
-  int GREATER_THAN = 16;
+  int NOT_EQUAL = 16;
   /** RegularExpression Id. */
-  int GREATER_EQUAL_THAN = 17;
+  int LESS_THAN = 17;
   /** RegularExpression Id. */
-  int SELECT = 18;
+  int LESS_EQUAL_THAN = 18;
   /** RegularExpression Id. */
-  int QUANTIFIER = 19;
+  int GREATER_THAN = 19;
   /** RegularExpression Id. */
-  int TOP = 20;
+  int GREATER_EQUAL_THAN = 20;
   /** RegularExpression Id. */
-  int FROM = 21;
+  int SELECT = 21;
   /** RegularExpression Id. */
-  int AS = 22;
+  int QUANTIFIER = 22;
   /** RegularExpression Id. */
-  int NATURAL = 23;
+  int TOP = 23;
   /** RegularExpression Id. */
-  int INNER = 24;
+  int FROM = 24;
   /** RegularExpression Id. */
-  int OUTER = 25;
+  int AS = 25;
   /** RegularExpression Id. */
-  int RIGHT = 26;
+  int NATURAL = 26;
   /** RegularExpression Id. */
-  int LEFT = 27;
+  int INNER = 27;
   /** RegularExpression Id. */
-  int FULL = 28;
+  int OUTER = 28;
   /** RegularExpression Id. */
-  int JOIN = 29;
+  int RIGHT = 29;
   /** RegularExpression Id. */
-  int ON = 30;
+  int LEFT = 30;
   /** RegularExpression Id. */
-  int USING = 31;
+  int FULL = 31;
   /** RegularExpression Id. */
-  int WHERE = 32;
+  int JOIN = 32;
   /** RegularExpression Id. */
-  int AND = 33;
+  int ON = 33;
   /** RegularExpression Id. */
-  int OR = 34;
+  int USING = 34;
   /** RegularExpression Id. */
-  int NOT = 35;
+  int WHERE = 35;
   /** RegularExpression Id. */
-  int IS = 36;
+  int AND = 36;
   /** RegularExpression Id. */
-  int NULL = 37;
+  int OR = 37;
   /** RegularExpression Id. */
-  int BETWEEN = 38;
+  int NOT = 38;
   /** RegularExpression Id. */
-  int LIKE = 39;
+  int IS = 39;
   /** RegularExpression Id. */
-  int IN = 40;
+  int NULL = 40;
   /** RegularExpression Id. */
-  int EXISTS = 41;
+  int BETWEEN = 41;
   /** RegularExpression Id. */
-  int GROUP_BY = 42;
+  int LIKE = 42;
   /** RegularExpression Id. */
-  int HAVING = 43;
+  int IN = 43;
   /** RegularExpression Id. */
-  int ORDER_BY = 44;
+  int EXISTS = 44;
   /** RegularExpression Id. */
-  int ASC = 45;
+  int GROUP_BY = 45;
   /** RegularExpression Id. */
-  int DESC = 46;
+  int HAVING = 46;
   /** RegularExpression Id. */
-  int AVG = 47;
+  int ORDER_BY = 47;
   /** RegularExpression Id. */
-  int MAX = 48;
+  int ASC = 48;
   /** RegularExpression Id. */
-  int MIN = 49;
+  int DESC = 49;
   /** RegularExpression Id. */
-  int SUM = 50;
+  int AVG = 50;
   /** RegularExpression Id. */
-  int COUNT = 51;
+  int MAX = 51;
   /** RegularExpression Id. */
-  int BOX = 52;
+  int MIN = 52;
   /** RegularExpression Id. */
-  int CENTROID = 53;
+  int SUM = 53;
   /** RegularExpression Id. */
-  int CIRCLE = 54;
+  int COUNT = 54;
   /** RegularExpression Id. */
-  int POINT = 55;
+  int BOX = 55;
   /** RegularExpression Id. */
-  int POLYGON = 56;
+  int CENTROID = 56;
   /** RegularExpression Id. */
-  int REGION = 57;
+  int CIRCLE = 57;
   /** RegularExpression Id. */
-  int CONTAINS = 58;
+  int POINT = 58;
   /** RegularExpression Id. */
-  int INTERSECTS = 59;
+  int POLYGON = 59;
   /** RegularExpression Id. */
-  int AREA = 60;
+  int REGION = 60;
   /** RegularExpression Id. */
-  int COORD1 = 61;
+  int CONTAINS = 61;
   /** RegularExpression Id. */
-  int COORD2 = 62;
+  int INTERSECTS = 62;
   /** RegularExpression Id. */
-  int COORDSYS = 63;
+  int AREA = 63;
   /** RegularExpression Id. */
-  int DISTANCE = 64;
+  int COORD1 = 64;
   /** RegularExpression Id. */
-  int ABS = 65;
+  int COORD2 = 65;
   /** RegularExpression Id. */
-  int CEILING = 66;
+  int COORDSYS = 66;
   /** RegularExpression Id. */
-  int DEGREES = 67;
+  int DISTANCE = 67;
   /** RegularExpression Id. */
-  int EXP = 68;
+  int ABS = 68;
   /** RegularExpression Id. */
-  int FLOOR = 69;
+  int CEILING = 69;
   /** RegularExpression Id. */
-  int LOG = 70;
+  int DEGREES = 70;
   /** RegularExpression Id. */
-  int LOG10 = 71;
+  int EXP = 71;
   /** RegularExpression Id. */
-  int MOD = 72;
+  int FLOOR = 72;
   /** RegularExpression Id. */
-  int PI = 73;
+  int LOG = 73;
   /** RegularExpression Id. */
-  int POWER = 74;
+  int LOG10 = 74;
   /** RegularExpression Id. */
-  int RADIANS = 75;
+  int MOD = 75;
   /** RegularExpression Id. */
-  int RAND = 76;
+  int PI = 76;
   /** RegularExpression Id. */
-  int ROUND = 77;
+  int POWER = 77;
   /** RegularExpression Id. */
-  int SQRT = 78;
+  int RADIANS = 78;
   /** RegularExpression Id. */
-  int TRUNCATE = 79;
+  int RAND = 79;
   /** RegularExpression Id. */
-  int ACOS = 80;
+  int ROUND = 80;
   /** RegularExpression Id. */
-  int ASIN = 81;
+  int SQRT = 81;
   /** RegularExpression Id. */
-  int ATAN = 82;
+  int TRUNCATE = 82;
   /** RegularExpression Id. */
-  int ATAN2 = 83;
+  int ACOS = 83;
   /** RegularExpression Id. */
-  int COS = 84;
+  int ASIN = 84;
   /** RegularExpression Id. */
-  int COT = 85;
+  int ATAN = 85;
   /** RegularExpression Id. */
-  int SIN = 86;
+  int ATAN2 = 86;
   /** RegularExpression Id. */
-  int TAN = 87;
+  int COS = 87;
   /** RegularExpression Id. */
-  int STRING_LITERAL = 93;
+  int COT = 88;
   /** RegularExpression Id. */
-  int DELIMITED_IDENTIFIER = 96;
+  int SIN = 89;
   /** RegularExpression Id. */
-  int REGULAR_IDENTIFIER = 97;
+  int TAN = 90;
   /** RegularExpression Id. */
-  int Letter = 98;
+  int STRING_LITERAL = 96;
   /** RegularExpression Id. */
-  int SCIENTIFIC_NUMBER = 99;
+  int DELIMITED_IDENTIFIER = 99;
   /** RegularExpression Id. */
-  int UNSIGNED_FLOAT = 100;
+  int REGULAR_IDENTIFIER = 100;
   /** RegularExpression Id. */
-  int UNSIGNED_INTEGER = 101;
+  int Letter = 101;
   /** RegularExpression Id. */
-  int DIGIT = 102;
+  int SCIENTIFIC_NUMBER = 102;
+  /** RegularExpression Id. */
+  int UNSIGNED_FLOAT = 103;
+  /** RegularExpression Id. */
+  int UNSIGNED_INTEGER = 104;
+  /** RegularExpression Id. */
+  int DIGIT = 105;
 
   /** Lexical state. */
   int DEFAULT = 0;
@@ -222,6 +228,9 @@
     "\"-\"",
     "\"*\"",
     "\"/\"",
+    "\"&\"",
+    "\"|\"",
+    "\"^\"",
     "\"=\"",
     "<NOT_EQUAL>",
     "\"<\"",
@@ -298,14 +307,14 @@
     "\"COT\"",
     "\"SIN\"",
     "\"TAN\"",
-    "<token of kind 88>",
-    "<token of kind 89>",
-    "<token of kind 90>",
+    "<token of kind 91>",
+    "<token of kind 92>",
+    "<token of kind 93>",
     "\"\\\'\"",
-    "<token of kind 92>",
+    "<token of kind 95>",
     "\"\\\'\"",
     "\"\\\"\"",
-    "<token of kind 95>",
+    "<token of kind 98>",
     "\"\\\"\"",
     "<REGULAR_IDENTIFIER>",
     "<Letter>",
diff -r 6600260db934 -r 7acedfd37cb5 firethorn-cds/adql/src/main/java/adql/parser/ADQLParserTokenManager.java
--- a/firethorn-cds/adql/src/main/java/adql/parser/ADQLParserTokenManager.java	Wed Dec 03 18:48:24 2014 +0200
+++ b/firethorn-cds/adql/src/main/java/adql/parser/ADQLParserTokenManager.java	Wed Dec 03 20:51:36 2014 +0200
@@ -50,7 +50,7 @@
    switch(curChar)
    {
       case 34:
-         return jjStartNfaWithStates_3(0, 96, 1);
+         return jjStartNfaWithStates_3(0, 99, 1);
       default :
          return jjMoveNfa_3(0, 0);
    }
@@ -87,15 +87,15 @@
                case 0:
                   if ((0xfffffffbffffffffL & l) != 0L)
                   {
-                     if (kind > 95)
-                        kind = 95;
+                     if (kind > 98)
+                        kind = 98;
                   }
                   else if (curChar == 34)
                      jjstateSet[jjnewStateCnt++] = 1;
                   break;
                case 1:
-                  if (curChar == 34 && kind > 95)
-                     kind = 95;
+                  if (curChar == 34 && kind > 98)
+                     kind = 98;
                   break;
                case 2:
                   if (curChar == 34)
@@ -113,7 +113,7 @@
             switch(jjstateSet[--i])
             {
                case 0:
-                  kind = 95;
+                  kind = 98;
                   break;
                default : break;
             }
@@ -128,8 +128,8 @@
             switch(jjstateSet[--i])
             {
                case 0:
-                  if ((jjbitVec0[i2] & l2) != 0L && kind > 95)
-                     kind = 95;
+                  if ((jjbitVec0[i2] & l2) != 0L && kind > 98)
+                     kind = 98;
                   break;
                default : break;
             }
@@ -153,180 +153,180 @@
    switch (pos)
    {
       case 0:
-         if ((active0 & 0xefff1ffdffb40000L) != 0L || (active1 & 0xf0fff4L) != 0L)
+         if ((active0 & 0x10L) != 0L)
+            return 37;
+         if ((active0 & 0x8005001002000000L) != 0L || (active1 & 0x780010L) != 0L)
          {
-            jjmatchedKind = 97;
-            return 37;
-         }
-         if ((active0 & 0x1000a00200400000L) != 0L || (active1 & 0xf0002L) != 0L)
-         {
-            jjmatchedKind = 97;
+            jjmatchedKind = 100;
             return 16;
          }
-         if ((active0 & 0x10L) != 0L)
-            return 38;
-         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x9L) != 0L)
+         if ((active0 & 0x60000L) != 0L)
+            return 3;
+         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0x48L) != 0L)
          {
-            jjmatchedKind = 97;
+            jjmatchedKind = 100;
             return 13;
          }
-         if ((active0 & 0xc000L) != 0L)
-            return 3;
+         if ((active0 & 0x7ff8ffeffda00000L) != 0L || (active1 & 0x787ffa7L) != 0L)
+         {
+            jjmatchedKind = 100;
+            return 38;
+         }
          if ((active0 & 0x200L) != 0L)
             return 19;
          return -1;
       case 1:
-         if ((active0 & 0xf7ffceebbeb40000L) != 0L || (active1 & 0xfdfdfeL) != 0L)
+         if ((active1 & 0x8L) != 0L)
          {
             if (jjmatchedPos != 1)
             {
-               jjmatchedKind = 97;
-               jjmatchedPos = 1;
-            }
-            return 37;
-         }
-         if ((active0 & 0x800311441400000L) != 0L || (active1 & 0x20200L) != 0L)
-            return 37;
-         if ((active1 & 0x1L) != 0L)
-         {
-            if (jjmatchedPos != 1)
-            {
-               jjmatchedKind = 97;
+               jjmatchedKind = 100;
                jjmatchedPos = 1;
             }
             return 12;
          }
+         if ((active0 & 0x400188a20a000000L) != 0L || (active1 & 0x101000L) != 0L)
+            return 38;
+         if ((active0 & 0xbffe775df5a00000L) != 0L || (active1 & 0x7efeff7L) != 0L)
+         {
+            if (jjmatchedPos != 1)
+            {
+               jjmatchedKind = 100;
+               jjmatchedPos = 1;
+            }
+            return 38;
+         }
          return -1;
       case 2:
-         if ((active1 & 0x1L) != 0L)
+         if ((active0 & 0xff42f70dfd200000L) != 0L || (active1 & 0x7fe167L) != 0L)
          {
             if (jjmatchedPos != 2)
             {
-               jjmatchedKind = 97;
+               jjmatchedKind = 100;
+               jjmatchedPos = 2;
+            }
+            return 38;
+         }
+         if ((active0 & 0xbd005000800000L) != 0L || (active1 & 0x7800e90L) != 0L)
+            return 38;
+         if ((active1 & 0x8L) != 0L)
+         {
+            if (jjmatchedPos != 2)
+            {
+               jjmatchedKind = 100;
                jjmatchedPos = 2;
             }
             return 11;
          }
-         if ((active0 & 0x17a00a00100000L) != 0L || (active1 & 0xf001d2L) != 0L)
-            return 37;
-         if ((active0 & 0xffe85ee1bfa40000L) != 0L || (active1 & 0xffc2cL) != 0L)
-         {
-            if (jjmatchedPos != 2)
-            {
-               jjmatchedKind = 97;
-               jjmatchedPos = 2;
-            }
-            return 37;
-         }
          return -1;
       case 3:
-         if ((active0 & 0xefe81e4187840000L) != 0L || (active1 & 0xac2cL) != 0L)
+         if ((active1 & 0x400L) != 0L)
          {
             if (jjmatchedPos != 3)
             {
-               jjmatchedKind = 97;
-               jjmatchedPos = 3;
-            }
-            return 37;
-         }
-         if ((active0 & 0x100040a038200000L) != 0L || (active1 & 0xf5000L) != 0L)
-            return 37;
-         if ((active1 & 0x80L) != 0L)
-         {
-            if (jjmatchedPos != 3)
-            {
-               jjmatchedKind = 97;
+               jjmatchedKind = 100;
                jjmatchedPos = 3;
             }
             return 21;
          }
-         if ((active1 & 0x1L) != 0L)
+         if ((active0 & 0x80020501c1000000L) != 0L || (active1 & 0x7a8000L) != 0L)
+            return 38;
+         if ((active0 & 0x7f40f20c3c200000L) != 0L || (active1 & 0x56167L) != 0L)
          {
             if (jjmatchedPos != 3)
             {
-               jjmatchedKind = 97;
+               jjmatchedKind = 100;
+               jjmatchedPos = 3;
+            }
+            return 38;
+         }
+         if ((active1 & 0x8L) != 0L)
+         {
+            if (jjmatchedPos != 3)
+            {
+               jjmatchedKind = 100;
                jjmatchedPos = 3;
             }
             return 10;
          }
          return -1;
       case 4:
-         if ((active0 & 0xef601e4000840000L) != 0L || (active1 & 0x880dL) != 0L)
+         if ((active0 & 0x440000c38000000L) != 0L || (active1 & 0x12100L) != 0L)
+            return 38;
+         if ((active1 & 0x400400L) != 0L)
+            return 21;
+         if ((active0 & 0x7b00f20004200000L) != 0L || (active1 & 0x4406fL) != 0L)
          {
-            jjmatchedKind = 97;
+            jjmatchedKind = 100;
             jjmatchedPos = 4;
-            return 37;
+            return 38;
          }
-         if ((active0 & 0x88000187000000L) != 0L || (active1 & 0x2420L) != 0L)
-            return 37;
-         if ((active1 & 0x80080L) != 0L)
-            return 21;
          return -1;
       case 5:
-         if ((active0 & 0x2400a0000040000L) != 0L)
-            return 37;
-         if ((active0 & 0x6000000000000000L) != 0L)
-            return 21;
-         if ((active0 & 0x8d20004000800000L) != 0L || (active1 & 0x880dL) != 0L)
-         {
-            jjmatchedKind = 97;
-            jjmatchedPos = 5;
-            return 37;
-         }
-         if ((active0 & 0x140000000000L) != 0L)
+         if ((active0 & 0xa00000000000L) != 0L)
          {
             if (jjmatchedPos < 4)
             {
-               jjmatchedKind = 97;
+               jjmatchedKind = 100;
                jjmatchedPos = 4;
             }
             return -1;
          }
+         if ((active0 & 0x6900020004000000L) != 0L || (active1 & 0x4406cL) != 0L)
+         {
+            jjmatchedKind = 100;
+            jjmatchedPos = 5;
+            return 38;
+         }
+         if ((active0 & 0x1200500000200000L) != 0L)
+            return 38;
+         if ((active1 & 0x3L) != 0L)
+            return 21;
          return -1;
       case 6:
-         if ((active0 & 0x8c20000000000000L) != 0L || (active1 & 0x8001L) != 0L)
+         if ((active0 & 0x6100000000000000L) != 0L || (active1 & 0x4000cL) != 0L)
          {
-            jjmatchedKind = 97;
+            jjmatchedKind = 100;
             jjmatchedPos = 6;
-            return 37;
+            return 38;
          }
-         if ((active0 & 0x100004000800000L) != 0L || (active1 & 0x80cL) != 0L)
-            return 37;
-         if ((active0 & 0x140000000000L) != 0L)
+         if ((active0 & 0xa00000000000L) != 0L)
          {
             if (jjmatchedPos < 4)
             {
-               jjmatchedKind = 97;
+               jjmatchedKind = 100;
                jjmatchedPos = 4;
             }
             return -1;
          }
+         if ((active0 & 0x800020004000000L) != 0L || (active1 & 0x4060L) != 0L)
+            return 38;
          return -1;
       case 7:
-         if ((active0 & 0x800000000000000L) != 0L)
-         {
-            jjmatchedKind = 97;
-            jjmatchedPos = 7;
-            return 37;
-         }
-         if ((active0 & 0x8420000000000000L) != 0L || (active1 & 0x8001L) != 0L)
-            return 37;
-         if ((active0 & 0x140000000000L) != 0L)
+         if ((active0 & 0xa00000000000L) != 0L)
          {
             if (jjmatchedPos < 4)
             {
-               jjmatchedKind = 97;
+               jjmatchedKind = 100;
                jjmatchedPos = 4;
             }
             return -1;
          }
+         if ((active0 & 0x2100000000000000L) != 0L || (active1 & 0x4000cL) != 0L)
+            return 38;
+         if ((active0 & 0x4000000000000000L) != 0L)
+         {
+            jjmatchedKind = 100;
+            jjmatchedPos = 7;
+            return 38;
+         }
          return -1;
       case 8:
-         if ((active0 & 0x800000000000000L) != 0L)
+         if ((active0 & 0x4000000000000000L) != 0L)
          {
-            jjmatchedKind = 97;
+            jjmatchedKind = 100;
             jjmatchedPos = 8;
-            return 37;
+            return 38;
          }
          return -1;
       default :
@@ -342,9 +342,11 @@
    switch(curChar)
    {
       case 34:
+         return jjStopAtPos(0, 97);
+      case 38:
+         return jjStopAtPos(0, 12);
+      case 39:
          return jjStopAtPos(0, 94);
-      case 39:
-         return jjStopAtPos(0, 91);
       case 40:
          return jjStopAtPos(0, 2);
       case 41:
@@ -358,80 +360,83 @@
       case 45:
          return jjStartNfaWithStates_0(0, 9, 19);
       case 46:
-         return jjStartNfaWithStates_0(0, 4, 38);
+         return jjStartNfaWithStates_0(0, 4, 37);
       case 47:
          return jjStopAtPos(0, 11);
       case 59:
          return jjStopAtPos(0, 6);
       case 60:
-         jjmatchedKind = 14;
-         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
+         jjmatchedKind = 17;
+         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
       case 61:
-         return jjStopAtPos(0, 12);
+         return jjStopAtPos(0, 15);
       case 62:
-         jjmatchedKind = 16;
-         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
+         jjmatchedKind = 19;
+         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
+      case 94:
+         return jjStopAtPos(0, 14);
       case 65:
       case 97:
-         return jjMoveStringLiteralDfa1_0(0x1000a00200400000L, 0xf0002L);
+         return jjMoveStringLiteralDfa1_0(0x8005001002000000L, 0x780010L);
       case 66:
       case 98:
-         return jjMoveStringLiteralDfa1_0(0x10004000000000L, 0x0L);
+         return jjMoveStringLiteralDfa1_0(0x80020000000000L, 0x0L);
       case 67:
       case 99:
-         return jjMoveStringLiteralDfa1_0(0xe468000000000000L, 0x300004L);
+         return jjMoveStringLiteralDfa1_0(0x2340000000000000L, 0x1800027L);
       case 68:
       case 100:
-         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x9L);
+         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x48L);
       case 69:
       case 101:
-         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x10L);
+         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x80L);
       case 70:
       case 102:
-         return jjMoveStringLiteralDfa1_0(0x10200000L, 0x20L);
+         return jjMoveStringLiteralDfa1_0(0x81000000L, 0x100L);
       case 71:
       case 103:
-         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
+         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
       case 72:
       case 104:
-         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
+         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
       case 73:
       case 105:
-         return jjMoveStringLiteralDfa1_0(0x800011001000000L, 0x0L);
+         return jjMoveStringLiteralDfa1_0(0x4000088008000000L, 0x0L);
       case 74:
       case 106:
-         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
+         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
       case 76:
       case 108:
-         return jjMoveStringLiteralDfa1_0(0x8008000000L, 0xc0L);
+         return jjMoveStringLiteralDfa1_0(0x40040000000L, 0x600L);
       case 77:
       case 109:
-         return jjMoveStringLiteralDfa1_0(0x3000000000000L, 0x100L);
+         return jjMoveStringLiteralDfa1_0(0x18000000000000L, 0x800L);
       case 78:
       case 110:
-         return jjMoveStringLiteralDfa1_0(0x2800800000L, 0x0L);
+         return jjMoveStringLiteralDfa1_0(0x14004000000L, 0x0L);
       case 79:
       case 111:
-         return jjMoveStringLiteralDfa1_0(0x100442000000L, 0x0L);
+         return jjMoveStringLiteralDfa1_0(0x802210000000L, 0x0L);
       case 80:
       case 112:
-         return jjMoveStringLiteralDfa1_0(0x180000000000000L, 0x600L);
+         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x3000L);
       case 82:
       case 114:
-         return jjMoveStringLiteralDfa1_0(0x200000004000000L, 0x3800L);
+         return jjMoveStringLiteralDfa1_0(0x1000000020000000L, 0x1c000L);
       case 83:
       case 115:
-         return jjMoveStringLiteralDfa1_0(0x4000000040000L, 0x404000L);
+         return jjMoveStringLiteralDfa1_0(0x20000000200000L, 0x2020000L);
       case 84:
       case 116:
-         return jjMoveStringLiteralDfa1_0(0x100000L, 0x808000L);
+         return jjMoveStringLiteralDfa1_0(0x800000L, 0x4040000L);
       case 85:
       case 117:
-         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
+         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
       case 87:
       case 119:
-         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
+         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
       case 124:
+         jjmatchedKind = 13;
          return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
       default :
          return jjMoveNfa_0(0, 0);
@@ -447,80 +452,80 @@
    switch(curChar)
    {
       case 61:
-         if ((active0 & 0x8000L) != 0L)
-            return jjStopAtPos(1, 15);
-         else if ((active0 & 0x20000L) != 0L)
-            return jjStopAtPos(1, 17);
+         if ((active0 & 0x40000L) != 0L)
+            return jjStopAtPos(1, 18);
+         else if ((active0 & 0x100000L) != 0L)
+            return jjStopAtPos(1, 20);
          break;
       case 65:
       case 97:
-         return jjMoveStringLiteralDfa2_0(active0, 0x1080000800000L, active1, 0x801800L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x8400004000000L, active1, 0x400c000L);
       case 66:
       case 98:
-         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
+         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
       case 67:
       case 99:
-         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
+         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
       case 69:
       case 101:
-         return jjMoveStringLiteralDfa2_0(active0, 0x220404008040000L, active1, 0xcL);
+         return jjMoveStringLiteralDfa2_0(active0, 0x1102020040200000L, active1, 0x60L);
       case 72:
       case 104:
-         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
       case 73:
       case 105:
-         if ((active1 & 0x200L) != 0L)
-            return jjStartNfaWithStates_0(1, 73, 37);
-         return jjMoveStringLiteralDfa2_0(active0, 0x42008004000000L, active1, 0x400001L);
+         if ((active1 & 0x1000L) != 0L)
+            return jjStartNfaWithStates_0(1, 76, 38);
+         return jjMoveStringLiteralDfa2_0(active0, 0x210040020000000L, active1, 0x2000008L);
       case 76:
       case 108:
-         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
+         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
       case 78:
       case 110:
-         if ((active0 & 0x40000000L) != 0L)
-            return jjStartNfaWithStates_0(1, 30, 37);
-         else if ((active0 & 0x10000000000L) != 0L)
+         if ((active0 & 0x200000000L) != 0L)
+            return jjStartNfaWithStates_0(1, 33, 38);
+         else if ((active0 & 0x80000000000L) != 0L)
          {
-            jjmatchedKind = 40;
+            jjmatchedKind = 43;
             jjmatchedPos = 1;
          }
-         return jjMoveStringLiteralDfa2_0(active0, 0x800000201000000L, active1, 0L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x4000001008000000L, active1, 0L);
       case 79:
       case 111:
-         return jjMoveStringLiteralDfa2_0(active0, 0xe598000820100000L, active1, 0x3025c0L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x2cc0004100800000L, active1, 0x1812e07L);
       case 81:
       case 113:
-         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
+         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
       case 82:
       case 114:
-         if ((active0 & 0x400000000L) != 0L)
+         if ((active0 & 0x2000000000L) != 0L)
          {
-            jjmatchedKind = 34;
+            jjmatchedKind = 37;
             jjmatchedPos = 1;
          }
-         return jjMoveStringLiteralDfa2_0(active0, 0x1000140000200000L, active1, 0x8000L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x8000a00001000000L, active1, 0x40000L);
       case 83:
       case 115:
-         if ((active0 & 0x400000L) != 0L)
+         if ((active0 & 0x2000000L) != 0L)
          {
-            jjmatchedKind = 22;
+            jjmatchedKind = 25;
             jjmatchedPos = 1;
          }
-         else if ((active0 & 0x1000000000L) != 0L)
-            return jjStartNfaWithStates_0(1, 36, 37);
-         return jjMoveStringLiteralDfa2_0(active0, 0x200080000000L, active1, 0x20000L);
+         else if ((active0 & 0x8000000000L) != 0L)
+            return jjStartNfaWithStates_0(1, 39, 38);
+         return jjMoveStringLiteralDfa2_0(active0, 0x1000400000000L, active1, 0x100000L);
       case 84:
       case 116:
-         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0000L);
+         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x600000L);
       case 85:
       case 117:
-         return jjMoveStringLiteralDfa2_0(active0, 0x4002012000000L, active1, 0L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x20010090000000L, active1, 0L);
       case 86:
       case 118:
-         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
       case 88:
       case 120:
-         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x10L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x80L);
       case 124:
          if ((active0 & 0x80L) != 0L)
             return jjStopAtPos(1, 7);
@@ -543,100 +548,100 @@
    {
       case 65:
       case 97:
-         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc0000L);
+         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x600000L);
       case 67:
       case 99:
-         if ((active0 & 0x200000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 45, 37);
+         if ((active0 & 0x1000000000000L) != 0L)
+            return jjStartNfaWithStates_0(2, 48, 38);
          break;
       case 68:
       case 100:
-         if ((active0 & 0x200000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 33, 37);
-         else if ((active1 & 0x100L) != 0L)
-            return jjStartNfaWithStates_0(2, 72, 37);
-         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x800L);
+         if ((active0 & 0x1000000000L) != 0L)
+            return jjStartNfaWithStates_0(2, 36, 38);
+         else if ((active1 & 0x800L) != 0L)
+            return jjStartNfaWithStates_0(2, 75, 38);
+         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x4000L);
       case 69:
       case 101:
-         return jjMoveStringLiteralDfa3_0(active0, 0x1000000100000000L, active1, 0L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x8000000800000000L, active1, 0L);
       case 70:
       case 102:
-         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
       case 71:
       case 103:
-         if ((active0 & 0x800000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 47, 37);
-         else if ((active1 & 0x40L) != 0L)
+         if ((active0 & 0x4000000000000L) != 0L)
+            return jjStartNfaWithStates_0(2, 50, 38);
+         else if ((active1 & 0x200L) != 0L)
          {
-            jjmatchedKind = 70;
+            jjmatchedKind = 73;
             jjmatchedPos = 2;
          }
-         return jjMoveStringLiteralDfa3_0(active0, 0x200000004000000L, active1, 0x88L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x1000000020000000L, active1, 0x440L);
       case 73:
       case 105:
-         return jjMoveStringLiteralDfa3_0(active0, 0x800200a0000000L, active1, 0x20004L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x400100500000000L, active1, 0x100020L);
       case 75:
       case 107:
-         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
       case 76:
       case 108:
-         return jjMoveStringLiteralDfa3_0(active0, 0x100002010040000L, active1, 0L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x800010080200000L, active1, 0L);
       case 77:
       case 109:
-         if ((active0 & 0x4000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 50, 37);
+         if ((active0 & 0x20000000000000L) != 0L)
+            return jjStartNfaWithStates_0(2, 53, 38);
          break;
       case 78:
       case 110:
-         if ((active0 & 0x2000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 49, 37);
-         else if ((active1 & 0x400000L) != 0L)
-            return jjStartNfaWithStates_0(2, 86, 37);
-         else if ((active1 & 0x800000L) != 0L)
-            return jjStartNfaWithStates_0(2, 87, 37);
-         return jjMoveStringLiteralDfa3_0(active0, 0x420000001000000L, active1, 0x1000L);
+         if ((active0 & 0x10000000000000L) != 0L)
+            return jjStartNfaWithStates_0(2, 52, 38);
+         else if ((active1 & 0x2000000L) != 0L)
+            return jjStartNfaWithStates_0(2, 89, 38);
+         else if ((active1 & 0x4000000L) != 0L)
+            return jjStartNfaWithStates_0(2, 90, 38);
+         return jjMoveStringLiteralDfa3_0(active0, 0x2100000008000000L, active1, 0x8000L);
       case 79:
       case 111:
-         return jjMoveStringLiteralDfa3_0(active0, 0xe000040000200000L, active1, 0x10020L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x200001000000L, active1, 0x80107L);
       case 80:
       case 112:
-         if ((active0 & 0x100000L) != 0L)
-            return jjStartNfaWithStates_0(2, 20, 37);
-         else if ((active1 & 0x10L) != 0L)
-            return jjStartNfaWithStates_0(2, 68, 37);
+         if ((active0 & 0x800000L) != 0L)
+            return jjStartNfaWithStates_0(2, 23, 38);
+         else if ((active1 & 0x80L) != 0L)
+            return jjStartNfaWithStates_0(2, 71, 38);
          break;
       case 82:
       case 114:
-         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x4000L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x20000L);
       case 83:
       case 115:
-         if ((active1 & 0x2L) != 0L)
-            return jjStartNfaWithStates_0(2, 65, 37);
-         else if ((active1 & 0x100000L) != 0L)
-            return jjStartNfaWithStates_0(2, 84, 37);
-         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x1L);
+         if ((active1 & 0x10L) != 0L)
+            return jjStartNfaWithStates_0(2, 68, 38);
+         else if ((active1 & 0x800000L) != 0L)
+            return jjStartNfaWithStates_0(2, 87, 38);
+         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x8L);
       case 84:
       case 116:
-         if ((active0 & 0x800000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 35, 37);
-         else if ((active1 & 0x200000L) != 0L)
-            return jjStartNfaWithStates_0(2, 85, 37);
-         return jjMoveStringLiteralDfa3_0(active0, 0x800004002800000L, active1, 0L);
+         if ((active0 & 0x4000000000L) != 0L)
+            return jjStartNfaWithStates_0(2, 38, 38);
+         else if ((active1 & 0x1000000L) != 0L)
+            return jjStartNfaWithStates_0(2, 88, 38);
+         return jjMoveStringLiteralDfa3_0(active0, 0x4000020014000000L, active1, 0L);
       case 85:
       case 117:
-         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0xa000L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x50000L);
       case 86:
       case 118:
-         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
       case 87:
       case 119:
-         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
+         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
       case 88:
       case 120:
-         if ((active0 & 0x1000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 48, 37);
-         else if ((active0 & 0x10000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 52, 37);
+         if ((active0 & 0x8000000000000L) != 0L)
+            return jjStartNfaWithStates_0(2, 51, 38);
+         else if ((active0 & 0x80000000000000L) != 0L)
+            return jjStartNfaWithStates_0(2, 55, 38);
          break;
       default :
          break;
@@ -655,84 +660,84 @@
    switch(curChar)
    {
       case 49:
-         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
+         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
       case 65:
       case 97:
-         if ((active0 & 0x1000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 60, 37);
+         if ((active0 & 0x8000000000000000L) != 0L)
+            return jjStartNfaWithStates_0(3, 63, 38);
          break;
       case 67:
       case 99:
-         if ((active0 & 0x400000000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 46, 37);
-         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L);
+         if ((active0 & 0x2000000000000L) != 0L)
+            return jjStartNfaWithStates_0(3, 49, 38);
+         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
       case 68:
       case 100:
-         if ((active1 & 0x1000L) != 0L)
-            return jjStartNfaWithStates_0(3, 76, 37);
+         if ((active1 & 0x8000L) != 0L)
+            return jjStartNfaWithStates_0(3, 79, 38);
          break;
       case 69:
       case 101:
-         if ((active0 & 0x8000000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 39, 37);
-         return jjMoveStringLiteralDfa4_0(active0, 0x800100003040000L, active1, 0x400L);
+         if ((active0 & 0x40000000000L) != 0L)
+            return jjStartNfaWithStates_0(3, 42, 38);
+         return jjMoveStringLiteralDfa4_0(active0, 0x4000800018200000L, active1, 0x2000L);
       case 72:
       case 104:
-         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
       case 73:
       case 105:
-         return jjMoveStringLiteralDfa4_0(active0, 0x200080000000000L, active1, 0x800L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x1000400000000000L, active1, 0x4000L);
       case 76:
       case 108:
-         if ((active0 & 0x10000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 28, 37);
-         else if ((active0 & 0x2000000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 37, 37);
-         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
+         if ((active0 & 0x80000000L) != 0L)
+            return jjStartNfaWithStates_0(3, 31, 38);
+         else if ((active0 & 0x10000000000L) != 0L)
+            return jjStartNfaWithStates_0(3, 40, 38);
+         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
       case 77:
       case 109:
-         if ((active0 & 0x200000L) != 0L)
-            return jjStartNfaWithStates_0(3, 21, 37);
+         if ((active0 & 0x1000000L) != 0L)
+            return jjStartNfaWithStates_0(3, 24, 38);
          break;
       case 78:
       case 110:
-         if ((active0 & 0x20000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 29, 37);
-         else if ((active1 & 0x20000L) != 0L)
-            return jjStartNfaWithStates_0(3, 81, 37);
-         else if ((active1 & 0x40000L) != 0L)
+         if ((active0 & 0x100000000L) != 0L)
+            return jjStartNfaWithStates_0(3, 32, 38);
+         else if ((active1 & 0x100000L) != 0L)
+            return jjStartNfaWithStates_0(3, 84, 38);
+         else if ((active1 & 0x200000L) != 0L)
          {
-            jjmatchedKind = 82;
+            jjmatchedKind = 85;
             jjmatchedPos = 3;
          }
-         return jjMoveStringLiteralDfa4_0(active0, 0x88000080000000L, active1, 0x8a000L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x440000400000000L, active1, 0x450000L);
       case 79:
       case 111:
-         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
+         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
       case 82:
       case 114:
-         return jjMoveStringLiteralDfa4_0(active0, 0xe000000100000000L, active1, 0x8L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x47L);
       case 83:
       case 115:
-         if ((active1 & 0x10000L) != 0L)
-            return jjStartNfaWithStates_0(3, 80, 37);
-         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
+         if ((active1 & 0x80000L) != 0L)
+            return jjStartNfaWithStates_0(3, 83, 38);
+         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
       case 84:
       case 116:
-         if ((active0 & 0x8000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 27, 37);
-         else if ((active1 & 0x4000L) != 0L)
-            return jjStartNfaWithStates_0(3, 78, 37);
-         return jjMoveStringLiteralDfa4_0(active0, 0x420000000000000L, active1, 0x1L);
+         if ((active0 & 0x40000000L) != 0L)
+            return jjStartNfaWithStates_0(3, 30, 38);
+         else if ((active1 & 0x20000L) != 0L)
+            return jjStartNfaWithStates_0(3, 81, 38);
+         return jjMoveStringLiteralDfa4_0(active0, 0x2100000000000000L, active1, 0x8L);
       case 85:
       case 117:
-         return jjMoveStringLiteralDfa4_0(active0, 0x40000800000L, active1, 0L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x200004000000L, active1, 0L);
       case 87:
       case 119:
-         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
       case 89:
       case 121:
-         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
       default :
          break;
    }
@@ -750,69 +755,69 @@
    switch(curChar)
    {
       case 48:
-         if ((active1 & 0x80L) != 0L)
-            return jjStartNfaWithStates_0(4, 71, 21);
+         if ((active1 & 0x400L) != 0L)
+            return jjStartNfaWithStates_0(4, 74, 21);
          break;
       case 50:
-         if ((active1 & 0x80000L) != 0L)
-            return jjStartNfaWithStates_0(4, 83, 21);
+         if ((active1 & 0x400000L) != 0L)
+            return jjStartNfaWithStates_0(4, 86, 21);
          break;
       case 65:
       case 97:
-         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0x801L);
+         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x4008L);
       case 67:
       case 99:
-         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0x8000L);
+         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0x40000L);
       case 68:
       case 100:
-         if ((active1 & 0x2000L) != 0L)
-            return jjStartNfaWithStates_0(4, 77, 37);
-         return jjMoveStringLiteralDfa5_0(active0, 0xe000000000000000L, active1, 0L);
+         if ((active1 & 0x10000L) != 0L)
+            return jjStartNfaWithStates_0(4, 80, 38);
+         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x7L);
       case 69:
       case 101:
-         if ((active0 & 0x100000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 32, 37);
-         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x8L);
+         if ((active0 & 0x800000000L) != 0L)
+            return jjStartNfaWithStates_0(4, 35, 38);
+         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x40L);
       case 71:
       case 103:
-         if ((active0 & 0x80000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 31, 37);
-         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
+         if ((active0 & 0x400000000L) != 0L)
+            return jjStartNfaWithStates_0(4, 34, 38);
+         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
       case 73:
       case 105:
-         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
+         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L);
       case 76:
       case 108:
-         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
       case 78:
       case 110:
-         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
       case 79:
       case 111:
-         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
       case 80:
       case 112:
-         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
       case 82:
       case 114:
-         if ((active0 & 0x1000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 24, 37);
-         else if ((active0 & 0x2000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 25, 37);
-         else if ((active1 & 0x20L) != 0L)
-            return jjStartNfaWithStates_0(4, 69, 37);
-         else if ((active1 & 0x400L) != 0L)
-            return jjStartNfaWithStates_0(4, 74, 37);
-         return jjMoveStringLiteralDfa5_0(active0, 0x820100000800000L, active1, 0L);
+         if ((active0 & 0x8000000L) != 0L)
+            return jjStartNfaWithStates_0(4, 27, 38);
+         else if ((active0 & 0x10000000L) != 0L)
+            return jjStartNfaWithStates_0(4, 28, 38);
+         else if ((active1 & 0x100L) != 0L)
+            return jjStartNfaWithStates_0(4, 72, 38);
+         else if ((active1 & 0x2000L) != 0L)
+            return jjStartNfaWithStates_0(4, 77, 38);
+         return jjMoveStringLiteralDfa5_0(active0, 0x4100800004000000L, active1, 0L);
       case 84:
       case 116:
-         if ((active0 & 0x4000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 26, 37);
-         else if ((active0 & 0x8000000000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 51, 37);
-         else if ((active0 & 0x80000000000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 55, 37);
-         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L);
+         if ((active0 & 0x20000000L) != 0L)
+            return jjStartNfaWithStates_0(4, 29, 38);
+         else if ((active0 & 0x40000000000000L) != 0L)
+            return jjStartNfaWithStates_0(4, 54, 38);
+         else if ((active0 & 0x400000000000000L) != 0L)
+            return jjStartNfaWithStates_0(4, 58, 38);
+         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
       default :
          break;
    }
@@ -830,48 +835,48 @@
    switch(curChar)
    {
       case 32:
-         return jjMoveStringLiteralDfa6_0(active0, 0x140000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa6_0(active0, 0xa00000000000L, active1, 0L);
       case 49:
-         if ((active0 & 0x2000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 61, 21);
+         if ((active1 & 0x1L) != 0L)
+            return jjStartNfaWithStates_0(5, 64, 21);
          break;
       case 50:
-         if ((active0 & 0x4000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 62, 21);
+         if ((active1 & 0x2L) != 0L)
+            return jjStartNfaWithStates_0(5, 65, 21);
          break;
       case 65:
       case 97:
-         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0x8000L);
+         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x40000L);
       case 69:
       case 101:
-         if ((active0 & 0x40000000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 54, 37);
-         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x8L);
+         if ((active0 & 0x200000000000000L) != 0L)
+            return jjStartNfaWithStates_0(5, 57, 38);
+         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0x40L);
       case 71:
       case 103:
-         if ((active0 & 0x80000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 43, 37);
+         if ((active0 & 0x400000000000L) != 0L)
+            return jjStartNfaWithStates_0(5, 46, 38);
          break;
       case 73:
       case 105:
-         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
       case 78:
       case 110:
-         if ((active0 & 0x200000000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 57, 37);
-         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x805L);
+         if ((active0 & 0x1000000000000000L) != 0L)
+            return jjStartNfaWithStates_0(5, 60, 38);
+         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4028L);
       case 79:
       case 111:
-         return jjMoveStringLiteralDfa6_0(active0, 0x120000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa6_0(active0, 0x900000000000000L, active1, 0L);
       case 83:
       case 115:
-         if ((active0 & 0x20000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 41, 37);
-         return jjMoveStringLiteralDfa6_0(active0, 0x8800000000000000L, active1, 0L);
+         if ((active0 & 0x100000000000L) != 0L)
+            return jjStartNfaWithStates_0(5, 44, 38);
+         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x4L);
       case 84:
       case 116:
-         if ((active0 & 0x40000L) != 0L)
-            return jjStartNfaWithStates_0(5, 18, 37);
+         if ((active0 & 0x200000L) != 0L)
+            return jjStartNfaWithStates_0(5, 21, 38);
          break;
       default :
          break;
@@ -891,46 +896,46 @@
    {
       case 66:
       case 98:
-         return jjMoveStringLiteralDfa7_0(active0, 0x140000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa7_0(active0, 0xa00000000000L, active1, 0L);
       case 67:
       case 99:
-         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
+         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
       case 69:
       case 101:
-         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
       case 71:
       case 103:
-         if ((active1 & 0x4L) != 0L)
-            return jjStartNfaWithStates_0(6, 66, 37);
+         if ((active1 & 0x20L) != 0L)
+            return jjStartNfaWithStates_0(6, 69, 38);
          break;
       case 73:
       case 105:
-         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L);
       case 76:
       case 108:
-         if ((active0 & 0x800000L) != 0L)
-            return jjStartNfaWithStates_0(6, 23, 37);
+         if ((active0 & 0x4000000L) != 0L)
+            return jjStartNfaWithStates_0(6, 26, 38);
          break;
       case 78:
       case 110:
-         if ((active0 & 0x4000000000L) != 0L)
-            return jjStartNfaWithStates_0(6, 38, 37);
-         else if ((active0 & 0x100000000000000L) != 0L)
-            return jjStartNfaWithStates_0(6, 56, 37);
-         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L);
+         if ((active0 & 0x20000000000L) != 0L)
+            return jjStartNfaWithStates_0(6, 41, 38);
+         else if ((active0 & 0x800000000000000L) != 0L)
+            return jjStartNfaWithStates_0(6, 59, 38);
+         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
       case 83:
       case 115:
-         if ((active1 & 0x8L) != 0L)
-            return jjStartNfaWithStates_0(6, 67, 37);
-         else if ((active1 & 0x800L) != 0L)
-            return jjStartNfaWithStates_0(6, 75, 37);
+         if ((active1 & 0x40L) != 0L)
+            return jjStartNfaWithStates_0(6, 70, 38);
+         else if ((active1 & 0x4000L) != 0L)
+            return jjStartNfaWithStates_0(6, 78, 38);
          break;
       case 84:
       case 116:
-         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L);
+         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
       case 89:
       case 121:
-         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
       default :
          break;
    }
@@ -949,32 +954,32 @@
    {
       case 67:
       case 99:
-         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
       case 68:
       case 100:
-         if ((active0 & 0x20000000000000L) != 0L)
-            return jjStartNfaWithStates_0(7, 53, 37);
+         if ((active0 & 0x100000000000000L) != 0L)
+            return jjStartNfaWithStates_0(7, 56, 38);
          break;
       case 69:
       case 101:
-         if ((active1 & 0x1L) != 0L)
-            return jjStartNfaWithStates_0(7, 64, 37);
-         else if ((active1 & 0x8000L) != 0L)
-            return jjStartNfaWithStates_0(7, 79, 37);
+         if ((active1 & 0x8L) != 0L)
+            return jjStartNfaWithStates_0(7, 67, 38);
+         else if ((active1 & 0x40000L) != 0L)
+            return jjStartNfaWithStates_0(7, 82, 38);
          break;
       case 83:
       case 115:
-         if ((active0 & 0x400000000000000L) != 0L)
-            return jjStartNfaWithStates_0(7, 58, 37);
-         else if ((active0 & 0x8000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(7, 63, 37);
+         if ((active0 & 0x2000000000000000L) != 0L)
+            return jjStartNfaWithStates_0(7, 61, 38);
+         else if ((active1 & 0x4L) != 0L)
+            return jjStartNfaWithStates_0(7, 66, 38);
          break;
       case 89:
       case 121:
-         if ((active0 & 0x40000000000L) != 0L)
-            return jjStopAtPos(7, 42);
-         else if ((active0 & 0x100000000000L) != 0L)
-            return jjStopAtPos(7, 44);
+         if ((active0 & 0x200000000000L) != 0L)
+            return jjStopAtPos(7, 45);
+         else if ((active0 & 0x800000000000L) != 0L)
+            return jjStopAtPos(7, 47);
          break;
       default :
          break;
@@ -994,7 +999,7 @@
    {
       case 84:
       case 116:
-         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L);
+         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L);
       default :
          break;
    }
@@ -1013,8 +1018,8 @@
    {
       case 83:
       case 115:
-         if ((active0 & 0x800000000000000L) != 0L)
-            return jjStartNfaWithStates_0(9, 59, 37);
+         if ((active0 & 0x4000000000000000L) != 0L)
+            return jjStartNfaWithStates_0(9, 62, 38);
          break;
       default :
          break;
@@ -1051,32 +1056,32 @@
                case 21:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 97)
-                     kind = 97;
+                  if (kind > 100)
+                     kind = 100;
                   jjCheckNAdd(21);
                   break;
                case 38:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 100)
+                     kind = 100;
+                  jjCheckNAdd(21);
+                  break;
+               case 37:
                   if ((0x3ff000000000000L & l) != 0L)
                   {
-                     if (kind > 100)
-                        kind = 100;
+                     if (kind > 103)
+                        kind = 103;
                      jjCheckNAdd(27);
                   }
                   if ((0x3ff000000000000L & l) != 0L)
                      jjCheckNAddTwoStates(23, 24);
                   break;
-               case 37:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 97)
-                     kind = 97;
-                  jjCheckNAdd(21);
-                  break;
                case 0:
                   if ((0x3ff000000000000L & l) != 0L)
                   {
-                     if (kind > 101)
-                        kind = 101;
+                     if (kind > 104)
+                        kind = 104;
                      jjCheckNAddStates(0, 6);
                   }
                   else if ((0x100002600L & l) != 0L)
@@ -1098,29 +1103,29 @@
                case 11:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 97)
-                     kind = 97;
+                  if (kind > 100)
+                     kind = 100;
                   jjCheckNAdd(21);
                   break;
                case 16:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 97)
-                     kind = 97;
+                  if (kind > 100)
+                     kind = 100;
                   jjCheckNAdd(21);
                   break;
                case 13:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 97)
-                     kind = 97;
+                  if (kind > 100)
+                     kind = 100;
                   jjCheckNAdd(21);
                   break;
                case 10:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 97)
-                     kind = 97;
+                  if (kind > 100)
+                     kind = 100;
                   jjCheckNAdd(21);
                   break;
                case 1:
@@ -1133,7 +1138,7 @@
                   break;
                case 3:
                   if (curChar == 62)
-                     kind = 13;
+                     kind = 16;
                   break;
                case 4:
                   if (curChar == 60)
@@ -1141,7 +1146,7 @@
                   break;
                case 5:
                   if (curChar == 61)
-                     kind = 13;
+                     kind = 16;
                   break;
                case 6:
                   if (curChar == 33)
@@ -1154,8 +1159,8 @@
                case 19:
                   if (curChar != 45)
                      break;
-                  if (kind > 88)
-                     kind = 88;
+                  if (kind > 91)
+                     kind = 91;
                   jjCheckNAdd(19);
                   break;
                case 22:
@@ -1173,22 +1178,22 @@
                case 26:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 99)
-                     kind = 99;
+                  if (kind > 102)
+                     kind = 102;
                   jjCheckNAdd(26);
                   break;
                case 27:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 100)
-                     kind = 100;
+                  if (kind > 103)
+                     kind = 103;
                   jjCheckNAdd(27);
                   break;
                case 28:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 101)
-                     kind = 101;
+                  if (kind > 104)
+                     kind = 104;
                   jjCheckNAddStates(0, 6);
                   break;
                case 29:
@@ -1214,22 +1219,22 @@
                case 34:
                   if (curChar != 46)
                      break;
-                  if (kind > 100)
-                     kind = 100;
+                  if (kind > 103)
+                     kind = 103;
                   jjCheckNAdd(35);
                   break;
                case 35:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 100)
-                     kind = 100;
+                  if (kind > 103)
+                     kind = 103;
                   jjCheckNAdd(35);
                   break;
                case 36:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
-                  if (kind > 101)
-                     kind = 101;
+                  if (kind > 104)
+                     kind = 104;
                   jjCheckNAdd(36);
                   break;
                default : break;
@@ -1246,38 +1251,38 @@
                case 12:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAdd(21);
                   }
                   if ((0x7fffffe07fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAddTwoStates(20, 21);
                   }
                   if ((0x8000000080000L & l) != 0L)
                      jjstateSet[jjnewStateCnt++] = 11;
                   break;
-               case 37:
+               case 38:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAdd(21);
                   }
                   if ((0x7fffffe07fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAddTwoStates(20, 21);
                   }
                   break;
                case 0:
                   if ((0x7fffffe07fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAddTwoStates(20, 21);
                   }
                   if ((0x200000002L & l) != 0L)
@@ -1288,14 +1293,14 @@
                case 11:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAdd(21);
                   }
                   if ((0x7fffffe07fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAddTwoStates(20, 21);
                   }
                   if ((0x10000000100000L & l) != 0L)
@@ -1304,14 +1309,14 @@
                case 16:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAdd(21);
                   }
                   if ((0x7fffffe07fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAddTwoStates(20, 21);
                   }
                   if ((0x100000001000L & l) != 0L)
@@ -1320,14 +1325,14 @@
                case 13:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAdd(21);
                   }
                   if ((0x7fffffe07fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAddTwoStates(20, 21);
                   }
                   if ((0x20000000200L & l) != 0L)
@@ -1336,22 +1341,22 @@
                case 10:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAdd(21);
                   }
                   if ((0x7fffffe07fffffeL & l) != 0L)
                   {
-                     if (kind > 97)
-                        kind = 97;
+                     if (kind > 100)
+                        kind = 100;
                      jjCheckNAddTwoStates(20, 21);
                   }
                   if ((0x20000000200L & l) != 0L)
                      jjstateSet[jjnewStateCnt++] = 9;
                   break;
                case 7:
-                  if ((0x10000000100000L & l) != 0L && kind > 19)
-                     kind = 19;
+                  if ((0x10000000100000L & l) != 0L && kind > 22)
+                     kind = 22;
                   break;
                case 8:
                   if ((0x800000008L & l) != 0L)
@@ -1366,8 +1371,8 @@
                      jjstateSet[jjnewStateCnt++] = 13;
                   break;
                case 15:
-                  if ((0x100000001000L & l) != 0L && kind > 19)
-                     kind = 19;
+                  if ((0x100000001000L & l) != 0L && kind > 22)
+                     kind = 22;
                   break;
                case 17:
                   if ((0x200000002L & l) != 0L)
@@ -1376,15 +1381,15 @@
                case 20:
                   if ((0x7fffffe07fffffeL & l) == 0L)
                      break;
-                  if (kind > 97)
-                     kind = 97;
+                  if (kind > 100)
+                     kind = 100;
                   jjCheckNAddTwoStates(20, 21);
                   break;
                case 21:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 97)
-                     kind = 97;
+                  if (kind > 100)
+                     kind = 100;
                   jjCheckNAdd(21);
                   break;
                case 24:
@@ -1437,7 +1442,7 @@
    switch(curChar)
    {
       case 39:
-         return jjStartNfaWithStates_2(0, 93, 1);
+         return jjStartNfaWithStates_2(0, 96, 1);
       default :
          return jjMoveNfa_2(0, 0);
    }
@@ -1471,15 +1476,15 @@
                case 0:
                   if ((0xffffff7fffffffffL & l) != 0L)
                   {
-                     if (kind > 92)
-                        kind = 92;
+                     if (kind > 95)
+                        kind = 95;
                   }
                   else if (curChar == 39)
                      jjstateSet[jjnewStateCnt++] = 1;
                   break;
                case 1:
-                  if (curChar == 39 && kind > 92)
-                     kind = 92;
+                  if (curChar == 39 && kind > 95)
+                     kind = 95;
                   break;
                case 2:
                   if (curChar == 39)
@@ -1497,7 +1502,7 @@
             switch(jjstateSet[--i])
             {
                case 0:
-                  kind = 92;
+                  kind = 95;
                   break;
                default : break;
             }
@@ -1512,8 +1517,8 @@
             switch(jjstateSet[--i])
             {
                case 0:
-                  if ((jjbitVec0[i2] & l2) != 0L && kind > 92)
-                     kind = 92;
+                  if ((jjbitVec0[i2] & l2) != 0L && kind > 95)
+                     kind = 95;
                   break;
                default : break;
             }
@@ -1557,15 +1562,15 @@
                case 0:
                   if ((0x2400L & l) != 0L)
                   {
-                     if (kind > 89)
-                        kind = 89;
+                     if (kind > 92)
+                        kind = 92;
                   }
                   if (curChar == 13)
                      jjstateSet[jjnewStateCnt++] = 1;
                   break;
                case 1:
-                  if (curChar == 10 && kind > 89)
-                     kind = 89;
+                  if (curChar == 10 && kind > 92)
+                     kind = 92;
                   break;
                case 2:
                   if (curChar == 13)
@@ -1618,13 +1623,13 @@
 /** Token literal values. */
 public static final String[] jjstrLiteralImages = {
 "", null, "\50", "\51", "\56", "\54", "\73", "\174\174", "\53", "\55", "\52", 
-"\57", "\75", null, "\74", "\74\75", "\76", "\76\75", null, null, null, null, null, 
+"\57", "\46", "\174", "\136", "\75", null, "\74", "\74\75", "\76", "\76\75", null, 
 null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
 null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
 null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
 null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
 null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
-null, null, null, null, null, null, null, null, null, null, };
+null, null, null, null, null, null, null, null, null, null, null, null, null, null, };
 
 /** Lexer state names. */
 public static final String[] lexStateNames = {
@@ -1639,17 +1644,17 @@
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, -1, 0, 3, -1, 0, -1, -1, -1, 
-   -1, -1, -1, 
+   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, -1, 0, 3, -1, 0, 
+   -1, -1, -1, -1, -1, -1, 
 };
 static final long[] jjtoToken = {
-   0xfffffffffffffffdL, 0x3b20ffffffL, 
+   0xfffffffffffffffdL, 0x1d907ffffffL, 
 };
 static final long[] jjtoSkip = {
-   0x2L, 0x2000000L, 
+   0x2L, 0x10000000L, 
 };
 static final long[] jjtoMore = {
-   0x0L, 0xdd000000L, 
+   0x0L, 0x6e8000000L, 
 };
 protected SimpleCharStream input_stream;
 private final int[] jjrounds = new int[37];
@@ -1764,9 +1769,9 @@
          jjmatchedKind = 0x7fffffff;
          jjmatchedPos = 0;
          curPos = jjMoveStringLiteralDfa0_1();
-         if (jjmatchedPos == 0 && jjmatchedKind > 90)
+         if (jjmatchedPos == 0 && jjmatchedKind > 93)
          {
-            jjmatchedKind = 90;
+            jjmatchedKind = 93;
          }
          break;
        case 2:
diff -r 6600260db934 -r 7acedfd37cb5 firethorn-cds/adql/src/main/java/adql/parser/adqlGrammar.jj
--- a/firethorn-cds/adql/src/main/java/adql/parser/adqlGrammar.jj	Wed Dec 03 18:48:24 2014 +0200
+++ b/firethorn-cds/adql/src/main/java/adql/parser/adqlGrammar.jj	Wed Dec 03 20:51:36 2014 +0200
@@ -509,6 +509,16 @@
 }
 
 /* ******************** */
+/* Binary operators     */
+/* ******************** */
+TOKEN : {
+	< BIT_AND: "&" >
+|	< BIT_OR:  "|" >
+|	< BIT_XOR: "^" >
+}
+
+
+/* ******************** */
 /* Comparison operators */
 /* ******************** */
 TOKEN : {
