# HG changeset patch
# User Stelios Voutsinas <stv@roe.ac.uk>
# Date 1417650035 -7200
#      Thu Dec 04 01:40:35 2014 +0200
# Branch 1.11.28-stv-cds-adql-2
# Node ID fd800478ee494bbcd6228feb07676538c61ee4d9
# Parent  c9d8a7239b53a5dbc73ac61dbf5e1c1103a39842
HEX Support [CDS-Patch]

diff -r c9d8a7239b53 -r fd800478ee49 adql/parser/ADQLParser.java
--- a/adql/parser/ADQLParser.java	Thu Dec 04 01:20:29 2014 +0200
+++ b/adql/parser/ADQLParser.java	Thu Dec 04 01:40:35 2014 +0200
@@ -668,6 +668,7 @@
         case SCIENTIFIC_NUMBER:
         case UNSIGNED_FLOAT:
         case UNSIGNED_INTEGER:
+        case HEX_INTEGER:
           op = ValueExpression();
           switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
           case AS:
@@ -1244,6 +1245,9 @@
     case UNSIGNED_INTEGER:
       t = jj_consume_token(UNSIGNED_INTEGER);
       break;
+    case HEX_INTEGER:
+      t = jj_consume_token(HEX_INTEGER);
+      break;
     default:
       jj_la1[42] = jj_gen;
       jj_consume_token(-1);
@@ -1308,6 +1312,7 @@
       case SCIENTIFIC_NUMBER:
       case UNSIGNED_FLOAT:
       case UNSIGNED_INTEGER:
+      case HEX_INTEGER:
         // unsigned_value_specification
                           expr = UnsignedNumeric();
                                           {if (true) return queryFactory.createNumericConstant(expr);}
@@ -1449,6 +1454,7 @@
             case SCIENTIFIC_NUMBER:
             case UNSIGNED_FLOAT:
             case UNSIGNED_INTEGER:
+            case HEX_INTEGER:
               valueExpr = Factor();
               break;
             default:
@@ -1576,6 +1582,7 @@
       case SCIENTIFIC_NUMBER:
       case UNSIGNED_FLOAT:
       case UNSIGNED_INTEGER:
+      case HEX_INTEGER:
         op = NumericValueExpressionPrimary();
         break;
       default:
@@ -1870,6 +1877,7 @@
           case SCIENTIFIC_NUMBER:
           case UNSIGNED_FLOAT:
           case UNSIGNED_INTEGER:
+          case HEX_INTEGER:
             op = ValueExpression();
             switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
             case EQUAL:
@@ -2100,6 +2108,7 @@
         case SCIENTIFIC_NUMBER:
         case UNSIGNED_FLOAT:
         case UNSIGNED_INTEGER:
+        case HEX_INTEGER:
           op = ValueExpression();
           break;
         default:
@@ -2615,6 +2624,7 @@
         case SCIENTIFIC_NUMBER:
         case UNSIGNED_FLOAT:
         case UNSIGNED_INTEGER:
+        case HEX_INTEGER:
           param1 = NumericExpression();
           break;
         default:
@@ -2802,6 +2812,7 @@
     case SCIENTIFIC_NUMBER:
     case UNSIGNED_FLOAT:
     case UNSIGNED_INTEGER:
+    case HEX_INTEGER:
       op = ValueExpression();
                                                                    params.add(op);
       label_13:
@@ -2956,44 +2967,6 @@
     finally { jj_save(15, xla); }
   }
 
-  private boolean jj_3R_150() {
-    if (jj_scan_token(TOP)) return true;
-    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_149() {
-    if (jj_scan_token(QUANTIFIER)) return true;
-    return false;
-  }
-
-  private boolean jj_3R_48() {
-    if (jj_scan_token(SELECT)) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_149()) jj_scanpos = xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_150()) jj_scanpos = xsp;
-    if (jj_3R_151()) return true;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_152()) { jj_scanpos = xsp; break; }
-    }
-    return false;
-  }
-
-  private boolean jj_3R_146() {
-    if (jj_3R_21()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_16() {
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_31()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
   private boolean jj_3R_53() {
     if (jj_3R_74()) return true;
     return false;
@@ -3009,6 +2982,13 @@
     return false;
   }
 
+  private boolean jj_3R_16() {
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_31()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
   private boolean jj_3R_55() {
     if (jj_3R_76()) return true;
     return false;
@@ -3042,11 +3022,6 @@
     return false;
   }
 
-  private boolean jj_3R_134() {
-    if (jj_3R_156()) return true;
-    return false;
-  }
-
   private boolean jj_3R_125() {
     if (jj_3R_46()) return true;
     Token xsp;
@@ -3057,6 +3032,11 @@
     return false;
   }
 
+  private boolean jj_3R_134() {
+    if (jj_3R_156()) return true;
+    return false;
+  }
+
   private boolean jj_3R_133() {
     if (jj_3R_155()) return true;
     return false;
@@ -3085,6 +3065,21 @@
     return false;
   }
 
+  private boolean jj_3R_27() {
+    if (jj_3R_35()) return true;
+    Token xsp;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_47()) { jj_scanpos = xsp; break; }
+    }
+    return false;
+  }
+
+  private boolean jj_3R_73() {
+    if (jj_scan_token(MINUS)) return true;
+    return false;
+  }
+
   private boolean jj_3R_31() {
     if (jj_3R_48()) return true;
     if (jj_3R_131()) return true;
@@ -3100,21 +3095,6 @@
     return false;
   }
 
-  private boolean jj_3R_27() {
-    if (jj_3R_35()) return true;
-    Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_47()) { jj_scanpos = xsp; break; }
-    }
-    return false;
-  }
-
-  private boolean jj_3R_73() {
-    if (jj_scan_token(MINUS)) return true;
-    return false;
-  }
-
   private boolean jj_3_10() {
     if (jj_3R_23()) return true;
     return false;
@@ -3267,11 +3247,6 @@
     return false;
   }
 
-  private boolean jj_3R_117() {
-    if (jj_scan_token(FULL)) return true;
-    return false;
-  }
-
   private boolean jj_3R_97() {
     if (jj_scan_token(ATAN)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3286,6 +3261,11 @@
     return false;
   }
 
+  private boolean jj_3R_117() {
+    if (jj_scan_token(FULL)) return true;
+    return false;
+  }
+
   private boolean jj_3R_96() {
     if (jj_scan_token(ASIN)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3496,11 +3476,6 @@
     return false;
   }
 
-  private boolean jj_3R_113() {
-    if (jj_scan_token(RIGHT)) return true;
-    return false;
-  }
-
   private boolean jj_3R_85() {
     if (jj_scan_token(MOD)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3511,6 +3486,11 @@
     return false;
   }
 
+  private boolean jj_3R_113() {
+    if (jj_scan_token(RIGHT)) return true;
+    return false;
+  }
+
   private boolean jj_3R_84() {
     if (jj_scan_token(LOG10)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3702,21 +3682,21 @@
     return false;
   }
 
+  private boolean jj_3R_121() {
+    if (jj_3R_21()) return true;
+    return false;
+  }
+
+  private boolean jj_3R_39() {
+    if (jj_3R_58()) return true;
+    return false;
+  }
+
   private boolean jj_3R_116() {
     if (jj_scan_token(RIGHT)) return true;
     return false;
   }
 
-  private boolean jj_3R_121() {
-    if (jj_3R_21()) return true;
-    return false;
-  }
-
-  private boolean jj_3R_39() {
-    if (jj_3R_58()) return true;
-    return false;
-  }
-
   private boolean jj_3R_120() {
     if (jj_3R_144()) return true;
     return false;
@@ -3862,7 +3842,10 @@
     jj_scanpos = xsp;
     if (jj_scan_token(106)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(107)) return true;
+    if (jj_scan_token(107)) {
+    jj_scanpos = xsp;
+    if (jj_scan_token(110)) return true;
+    }
     }
     }
     return false;
@@ -3881,11 +3864,6 @@
     return false;
   }
 
-  private boolean jj_3R_115() {
-    if (jj_scan_token(LEFT)) return true;
-    return false;
-  }
-
   private boolean jj_3R_142() {
     if (jj_scan_token(POLYGON)) return true;
     if (jj_scan_token(LEFT_PAR)) return true;
@@ -3905,6 +3883,11 @@
     return false;
   }
 
+  private boolean jj_3R_115() {
+    if (jj_scan_token(LEFT)) return true;
+    return false;
+  }
+
   private boolean jj_3R_71() {
     Token xsp;
     xsp = jj_scanpos;
@@ -3968,6 +3951,14 @@
     return false;
   }
 
+  private boolean jj_3R_139() {
+    if (jj_scan_token(CENTROID)) return true;
+    if (jj_scan_token(LEFT_PAR)) return true;
+    if (jj_3R_124()) return true;
+    if (jj_scan_token(RIGHT_PAR)) return true;
+    return false;
+  }
+
   private boolean jj_3R_33() {
     Token xsp;
     xsp = jj_scanpos;
@@ -3982,14 +3973,6 @@
     return false;
   }
 
-  private boolean jj_3R_139() {
-    if (jj_scan_token(CENTROID)) return true;
-    if (jj_scan_token(LEFT_PAR)) return true;
-    if (jj_3R_124()) return true;
-    if (jj_scan_token(RIGHT_PAR)) return true;
-    return false;
-  }
-
   private boolean jj_3R_32() {
     if (jj_scan_token(NATURAL)) return true;
     Token xsp;
@@ -4014,6 +3997,11 @@
     return false;
   }
 
+  private boolean jj_3R_184() {
+    if (jj_3R_21()) return true;
+    return false;
+  }
+
   private boolean jj_3R_194() {
     Token xsp;
     xsp = jj_scanpos;
@@ -4022,8 +4010,8 @@
     return false;
   }
 
-  private boolean jj_3R_184() {
-    if (jj_3R_21()) return true;
+  private boolean jj_3R_185() {
+    if (jj_3R_46()) return true;
     return false;
   }
 
@@ -4037,11 +4025,6 @@
     return false;
   }
 
-  private boolean jj_3R_185() {
-    if (jj_3R_46()) return true;
-    return false;
-  }
-
   private boolean jj_3R_182() {
     if (jj_3R_21()) return true;
     return false;
@@ -4212,19 +4195,6 @@
     return false;
   }
 
-  private boolean jj_3R_72() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_118()) {
-    jj_scanpos = xsp;
-    if (jj_3_2()) {
-    jj_scanpos = xsp;
-    if (jj_3R_119()) return true;
-    }
-    }
-    return false;
-  }
-
   private boolean jj_3R_103() {
     Token xsp;
     xsp = jj_scanpos;
@@ -4240,6 +4210,19 @@
     return false;
   }
 
+  private boolean jj_3R_72() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_118()) {
+    jj_scanpos = xsp;
+    if (jj_3_2()) {
+    jj_scanpos = xsp;
+    if (jj_3R_119()) return true;
+    }
+    }
+    return false;
+  }
+
   private boolean jj_3R_159() {
     if (jj_scan_token(COMMA)) return true;
     if (jj_3R_46()) return true;
@@ -4447,6 +4430,11 @@
     return false;
   }
 
+  private boolean jj_3_13() {
+    if (jj_3R_26()) return true;
+    return false;
+  }
+
   private boolean jj_3R_14() {
     Token xsp;
     xsp = jj_scanpos;
@@ -4457,11 +4445,6 @@
     return false;
   }
 
-  private boolean jj_3_13() {
-    if (jj_3R_26()) return true;
-    return false;
-  }
-
   private boolean jj_3_15() {
     if (jj_3R_27()) return true;
     Token xsp;
@@ -4476,18 +4459,18 @@
     return false;
   }
 
+  private boolean jj_3_14() {
+    if (jj_3R_21()) return true;
+    if (jj_scan_token(IS)) return true;
+    return false;
+  }
+
   private boolean jj_3R_169() {
     if (jj_scan_token(COMMA)) return true;
     if (jj_3R_168()) return true;
     return false;
   }
 
-  private boolean jj_3_14() {
-    if (jj_3R_21()) return true;
-    if (jj_scan_token(IS)) return true;
-    return false;
-  }
-
   private boolean jj_3R_108() {
     Token xsp;
     xsp = jj_scanpos;
@@ -4522,12 +4505,6 @@
     return false;
   }
 
-  private boolean jj_3R_156() {
-    if (jj_scan_token(HAVING)) return true;
-    if (jj_3R_165()) return true;
-    return false;
-  }
-
   private boolean jj_3R_45() {
     if (jj_3R_46()) return true;
     Token xsp;
@@ -4542,6 +4519,12 @@
     return false;
   }
 
+  private boolean jj_3R_156() {
+    if (jj_scan_token(HAVING)) return true;
+    if (jj_3R_165()) return true;
+    return false;
+  }
+
   private boolean jj_3R_44() {
     if (jj_3R_27()) return true;
     Token xsp;
@@ -4603,12 +4586,6 @@
     return false;
   }
 
-  private boolean jj_3R_30() {
-    if (jj_3R_14()) return true;
-    if (jj_scan_token(DOT)) return true;
-    return false;
-  }
-
   private boolean jj_3R_25() {
     Token xsp;
     xsp = jj_scanpos;
@@ -4625,6 +4602,12 @@
     return false;
   }
 
+  private boolean jj_3R_30() {
+    if (jj_3R_14()) return true;
+    if (jj_scan_token(DOT)) return true;
+    return false;
+  }
+
   private boolean jj_3R_131() {
     if (jj_scan_token(FROM)) return true;
     if (jj_3R_51()) return true;
@@ -4709,6 +4692,11 @@
     return false;
   }
 
+  private boolean jj_3R_187() {
+    if (jj_scan_token(NOT)) return true;
+    return false;
+  }
+
   private boolean jj_3_1() {
     if (jj_3R_14()) return true;
     if (jj_scan_token(DOT)) return true;
@@ -4719,11 +4707,6 @@
     return false;
   }
 
-  private boolean jj_3R_187() {
-    if (jj_scan_token(NOT)) return true;
-    return false;
-  }
-
   private boolean jj_3R_151() {
     Token xsp;
     xsp = jj_scanpos;
@@ -4760,6 +4743,37 @@
     return false;
   }
 
+  private boolean jj_3R_150() {
+    if (jj_scan_token(TOP)) return true;
+    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_149() {
+    if (jj_scan_token(QUANTIFIER)) return true;
+    return false;
+  }
+
+  private boolean jj_3R_48() {
+    if (jj_scan_token(SELECT)) return true;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_149()) jj_scanpos = xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_150()) jj_scanpos = xsp;
+    if (jj_3R_151()) return true;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_152()) { jj_scanpos = xsp; break; }
+    }
+    return false;
+  }
+
+  private boolean jj_3R_146() {
+    if (jj_3R_21()) return true;
+    return false;
+  }
+
   /** Generated Token Manager. */
   public ADQLParserTokenManager token_source;
   SimpleCharStream jj_input_stream;
@@ -4792,7 +4806,7 @@
       jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x3fffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17,0x0,0x0,0x3ffffff7,0x3ffffff7,0x0,0x0,0x3fffe0,0x3fc00000,0x0,0x3fffffff,};
    }
    private static void jj_la1_init_3() {
-      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0xec8,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x8c0,0x8c0,0x0,0x0,0x0,0xc0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0xe00,0xc00,0x0,0x0,0xec0,0xc8,0x0,0xec0,0x0,0x0,0x0,0x0,0x0,0x0,0xec0,0x0,0x0,0xc8,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xec8,0x0,0x0,0x0,0x0,0x0,0x0,0xec8,0x0,0x0,0x0,0x0,0xc0,0xc0,0xc0,0xc0,0x0,0x0,0x0,0x80,0xec0,0x0,0x0,0x0,0x0,0x0,0xec8,};
+      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x4ec8,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x8c0,0x8c0,0x0,0x0,0x0,0xc0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4e00,0xc00,0x0,0x0,0x4ec0,0xc8,0x0,0x4ec0,0x0,0x0,0x0,0x0,0x0,0x0,0x4ec0,0x0,0x0,0xc8,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4ec8,0x0,0x0,0x0,0x0,0x0,0x0,0x4ec8,0x0,0x0,0x0,0x0,0xc0,0xc0,0xc0,0xc0,0x0,0x0,0x0,0x80,0x4ec0,0x0,0x0,0x0,0x0,0x0,0x4ec8,};
    }
   final private JJCalls[] jj_2_rtns = new JJCalls[16];
   private boolean jj_rescan = false;
@@ -4800,7 +4814,7 @@
 
   /** Constructor with InputStream. */
   public ADQLParser(java.io.InputStream stream) {
-     this(stream, (String) null);
+     this(stream, null);
   }
   /** Constructor with InputStream and supplied encoding */
   public ADQLParser(java.io.InputStream stream, String encoding) {
@@ -4981,7 +4995,7 @@
   /** Generate ParseException. */
   public ParseException generateParseException() {
     jj_expentries.clear();
-    boolean[] la1tokens = new boolean[109];
+    boolean[] la1tokens = new boolean[112];
     if (jj_kind >= 0) {
       la1tokens[jj_kind] = true;
       jj_kind = -1;
@@ -5004,7 +5018,7 @@
         }
       }
     }
-    for (int i = 0; i < 109; i++) {
+    for (int i = 0; i < 112; i++) {
       if (la1tokens[i]) {
         jj_expentry = new int[1];
         jj_expentry[0] = i;
diff -r c9d8a7239b53 -r fd800478ee49 adql/parser/ADQLParserConstants.java
--- a/adql/parser/ADQLParserConstants.java	Thu Dec 04 01:20:29 2014 +0200
+++ b/adql/parser/ADQLParserConstants.java	Thu Dec 04 01:40:35 2014 +0200
@@ -210,6 +210,12 @@
   int UNSIGNED_INTEGER = 107;
   /** RegularExpression Id. */
   int DIGIT = 108;
+  /** RegularExpression Id. */
+  int HEX_PREFIX = 109;
+  /** RegularExpression Id. */
+  int HEX_INTEGER = 110;
+  /** RegularExpression Id. */
+  int HEX_DIGIT = 111;
 
   /** Lexical state. */
   int DEFAULT = 0;
@@ -331,6 +337,9 @@
     "<UNSIGNED_FLOAT>",
     "<UNSIGNED_INTEGER>",
     "<DIGIT>",
+    "\"0x\"",
+    "<HEX_INTEGER>",
+    "<HEX_DIGIT>",
   };
 
 }
diff -r c9d8a7239b53 -r fd800478ee49 adql/parser/ADQLParserTokenManager.java
--- a/adql/parser/ADQLParserTokenManager.java	Thu Dec 04 01:20:29 2014 +0200
+++ b/adql/parser/ADQLParserTokenManager.java	Thu Dec 04 01:40:35 2014 +0200
@@ -156,7 +156,7 @@
          if ((active0 & 0xfff1ffdffb400000L) != 0L || (active1 & 0x3c3fff4eL) != 0L)
          {
             jjmatchedKind = 103;
-            return 37;
+            return 40;
          }
          if ((active0 & 0xa002004000000L) != 0L || (active1 & 0x3c00021L) != 0L)
          {
@@ -164,7 +164,7 @@
             return 16;
          }
          if ((active0 & 0x10L) != 0L)
-            return 38;
+            return 41;
          if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x90L) != 0L)
          {
             jjmatchedKind = 103;
@@ -172,12 +172,19 @@
          }
          if ((active0 & 0xc0000L) != 0L)
             return 3;
+         if ((active1 & 0x200000000000L) != 0L)
+         {
+            jjmatchedKind = 107;
+            return 22;
+         }
          if ((active0 & 0x200L) != 0L)
             return 19;
          return -1;
       case 1:
          if ((active0 & 0x8003114414000000L) != 0L || (active1 & 0x802000L) != 0L)
-            return 37;
+            return 40;
+         if ((active1 & 0x200000000000L) != 0L)
+            return 23;
          if ((active1 & 0x10L) != 0L)
          {
             if (jjmatchedPos != 1)
@@ -194,7 +201,7 @@
                jjmatchedKind = 103;
                jjmatchedPos = 1;
             }
-            return 37;
+            return 40;
          }
          return -1;
       case 2:
@@ -208,7 +215,7 @@
             return 11;
          }
          if ((active0 & 0x17a00a001000000L) != 0L || (active1 & 0x3c001d20L) != 0L)
-            return 37;
+            return 40;
          if ((active0 & 0xfe85ee1bfa400000L) != 0L || (active1 & 0x3ffc2cfL) != 0L)
          {
             if (jjmatchedPos != 2)
@@ -216,7 +223,7 @@
                jjmatchedKind = 103;
                jjmatchedPos = 2;
             }
-            return 37;
+            return 40;
          }
          return -1;
       case 3:
@@ -236,10 +243,10 @@
                jjmatchedKind = 103;
                jjmatchedPos = 3;
             }
-            return 37;
+            return 40;
          }
          if ((active0 & 0x40a0382000000L) != 0L || (active1 & 0x3d50001L) != 0L)
-            return 37;
+            return 40;
          if ((active1 & 0x10L) != 0L)
          {
             if (jjmatchedPos != 3)
@@ -252,14 +259,14 @@
          return -1;
       case 4:
          if ((active0 & 0x880001870000000L) != 0L || (active1 & 0x84200L) != 0L)
-            return 37;
+            return 40;
          if ((active1 & 0x2000800L) != 0L)
             return 21;
          if ((active0 & 0xf601e40008400000L) != 0L || (active1 & 0x2280deL) != 0L)
          {
             jjmatchedKind = 103;
             jjmatchedPos = 4;
-            return 37;
+            return 40;
          }
          return -1;
       case 5:
@@ -273,14 +280,14 @@
             return -1;
          }
          if ((active0 & 0x2400a00000400000L) != 0L || (active1 & 0x8000L) != 0L)
-            return 37;
+            return 40;
          if ((active1 & 0x6L) != 0L)
             return 21;
          if ((active0 & 0xd200040008000000L) != 0L || (active1 & 0x2200d8L) != 0L)
          {
             jjmatchedKind = 103;
             jjmatchedPos = 5;
-            return 37;
+            return 40;
          }
          return -1;
       case 6:
@@ -288,7 +295,7 @@
          {
             jjmatchedKind = 103;
             jjmatchedPos = 6;
-            return 37;
+            return 40;
          }
          if ((active0 & 0x1400000000000L) != 0L)
          {
@@ -300,7 +307,7 @@
             return -1;
          }
          if ((active0 & 0x1000040008000000L) != 0L || (active1 & 0x200c0L) != 0L)
-            return 37;
+            return 40;
          return -1;
       case 7:
          if ((active0 & 0x1400000000000L) != 0L)
@@ -313,12 +320,12 @@
             return -1;
          }
          if ((active0 & 0x4200000000000000L) != 0L || (active1 & 0x200018L) != 0L)
-            return 37;
+            return 40;
          if ((active0 & 0x8000000000000000L) != 0L)
          {
             jjmatchedKind = 103;
             jjmatchedPos = 7;
-            return 37;
+            return 40;
          }
          return -1;
       case 8:
@@ -326,7 +333,7 @@
          {
             jjmatchedKind = 103;
             jjmatchedPos = 8;
-            return 37;
+            return 40;
          }
          return -1;
       default :
@@ -362,9 +369,11 @@
       case 45:
          return jjStartNfaWithStates_0(0, 9, 19);
       case 46:
-         return jjStartNfaWithStates_0(0, 4, 38);
+         return jjStartNfaWithStates_0(0, 4, 41);
       case 47:
          return jjStopAtPos(0, 11);
+      case 48:
+         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
       case 59:
          return jjStopAtPos(0, 6);
       case 60:
@@ -477,7 +486,7 @@
       case 73:
       case 105:
          if ((active1 & 0x2000L) != 0L)
-            return jjStartNfaWithStates_0(1, 77, 37);
+            return jjStartNfaWithStates_0(1, 77, 40);
          return jjMoveStringLiteralDfa2_0(active0, 0x420080040000000L, active1, 0x10010010L);
       case 76:
       case 108:
@@ -485,7 +494,7 @@
       case 78:
       case 110:
          if ((active0 & 0x400000000L) != 0L)
-            return jjStartNfaWithStates_0(1, 34, 37);
+            return jjStartNfaWithStates_0(1, 34, 40);
          else if ((active0 & 0x100000000000L) != 0L)
          {
             jjmatchedKind = 44;
@@ -514,7 +523,7 @@
             jjmatchedPos = 1;
          }
          else if ((active0 & 0x10000000000L) != 0L)
-            return jjStartNfaWithStates_0(1, 40, 37);
+            return jjStartNfaWithStates_0(1, 40, 40);
          return jjMoveStringLiteralDfa2_0(active0, 0x2000800000000L, active1, 0x800000L);
       case 84:
       case 116:
@@ -527,6 +536,8 @@
          return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
       case 88:
       case 120:
+         if ((active1 & 0x200000000000L) != 0L)
+            return jjStartNfaWithStates_0(1, 109, 23);
          return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x100L);
       case 124:
          if ((active0 & 0x80L) != 0L)
@@ -554,14 +565,14 @@
       case 67:
       case 99:
          if ((active0 & 0x2000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 49, 37);
+            return jjStartNfaWithStates_0(2, 49, 40);
          break;
       case 68:
       case 100:
          if ((active0 & 0x2000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 37, 37);
+            return jjStartNfaWithStates_0(2, 37, 40);
          else if ((active1 & 0x1000L) != 0L)
-            return jjStartNfaWithStates_0(2, 76, 37);
+            return jjStartNfaWithStates_0(2, 76, 40);
          return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x20000L);
       case 69:
       case 101:
@@ -572,7 +583,7 @@
       case 71:
       case 103:
          if ((active0 & 0x8000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 51, 37);
+            return jjStartNfaWithStates_0(2, 51, 40);
          else if ((active1 & 0x400L) != 0L)
          {
             jjmatchedKind = 74;
@@ -591,16 +602,16 @@
       case 77:
       case 109:
          if ((active0 & 0x40000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 54, 37);
+            return jjStartNfaWithStates_0(2, 54, 40);
          break;
       case 78:
       case 110:
          if ((active0 & 0x20000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 53, 37);
+            return jjStartNfaWithStates_0(2, 53, 40);
          else if ((active1 & 0x10000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 92, 37);
+            return jjStartNfaWithStates_0(2, 92, 40);
          else if ((active1 & 0x20000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 93, 37);
+            return jjStartNfaWithStates_0(2, 93, 40);
          return jjMoveStringLiteralDfa3_0(active0, 0x4200000010000000L, active1, 0x40000L);
       case 79:
       case 111:
@@ -608,9 +619,9 @@
       case 80:
       case 112:
          if ((active0 & 0x1000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 24, 37);
+            return jjStartNfaWithStates_0(2, 24, 40);
          else if ((active1 & 0x100L) != 0L)
-            return jjStartNfaWithStates_0(2, 72, 37);
+            return jjStartNfaWithStates_0(2, 72, 40);
          break;
       case 82:
       case 114:
@@ -618,16 +629,16 @@
       case 83:
       case 115:
          if ((active1 & 0x20L) != 0L)
-            return jjStartNfaWithStates_0(2, 69, 37);
+            return jjStartNfaWithStates_0(2, 69, 40);
          else if ((active1 & 0x4000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 90, 37);
+            return jjStartNfaWithStates_0(2, 90, 40);
          return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x10L);
       case 84:
       case 116:
          if ((active0 & 0x8000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 39, 37);
+            return jjStartNfaWithStates_0(2, 39, 40);
          else if ((active1 & 0x8000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 91, 37);
+            return jjStartNfaWithStates_0(2, 91, 40);
          return jjMoveStringLiteralDfa3_0(active0, 0x8000040028000000L, active1, 0L);
       case 85:
       case 117:
@@ -641,9 +652,9 @@
       case 88:
       case 120:
          if ((active0 & 0x10000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 52, 37);
+            return jjStartNfaWithStates_0(2, 52, 40);
          else if ((active0 & 0x100000000000000L) != 0L)
-            return jjStartNfaWithStates_0(2, 56, 37);
+            return jjStartNfaWithStates_0(2, 56, 40);
          break;
       default :
          break;
@@ -666,22 +677,22 @@
       case 65:
       case 97:
          if ((active1 & 0x1L) != 0L)
-            return jjStartNfaWithStates_0(3, 64, 37);
+            return jjStartNfaWithStates_0(3, 64, 40);
          return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L);
       case 67:
       case 99:
          if ((active0 & 0x4000000000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 50, 37);
+            return jjStartNfaWithStates_0(3, 50, 40);
          return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
       case 68:
       case 100:
          if ((active1 & 0x40000L) != 0L)
-            return jjStartNfaWithStates_0(3, 82, 37);
+            return jjStartNfaWithStates_0(3, 82, 40);
          break;
       case 69:
       case 101:
          if ((active0 & 0x80000000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 43, 37);
+            return jjStartNfaWithStates_0(3, 43, 40);
          return jjMoveStringLiteralDfa4_0(active0, 0x8001000030400000L, active1, 0x4000L);
       case 72:
       case 104:
@@ -692,23 +703,23 @@
       case 76:
       case 108:
          if ((active0 & 0x100000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 32, 37);
+            return jjStartNfaWithStates_0(3, 32, 40);
          else if ((active0 & 0x20000000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 41, 37);
+            return jjStartNfaWithStates_0(3, 41, 40);
          return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
       case 77:
       case 109:
          if ((active0 & 0x2000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 25, 37);
+            return jjStartNfaWithStates_0(3, 25, 40);
          break;
       case 78:
       case 110:
          if ((active0 & 0x200000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 33, 37);
+            return jjStartNfaWithStates_0(3, 33, 40);
          else if ((active1 & 0x10000L) != 0L)
-            return jjStartNfaWithStates_0(3, 80, 37);
+            return jjStartNfaWithStates_0(3, 80, 40);
          else if ((active1 & 0x800000L) != 0L)
-            return jjStartNfaWithStates_0(3, 87, 37);
+            return jjStartNfaWithStates_0(3, 87, 40);
          else if ((active1 & 0x1000000L) != 0L)
          {
             jjmatchedKind = 88;
@@ -724,14 +735,14 @@
       case 83:
       case 115:
          if ((active1 & 0x400000L) != 0L)
-            return jjStartNfaWithStates_0(3, 86, 37);
+            return jjStartNfaWithStates_0(3, 86, 40);
          return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
       case 84:
       case 116:
          if ((active0 & 0x80000000L) != 0L)
-            return jjStartNfaWithStates_0(3, 31, 37);
+            return jjStartNfaWithStates_0(3, 31, 40);
          else if ((active1 & 0x100000L) != 0L)
-            return jjStartNfaWithStates_0(3, 84, 37);
+            return jjStartNfaWithStates_0(3, 84, 40);
          return jjMoveStringLiteralDfa4_0(active0, 0x4200000000000000L, active1, 0x10L);
       case 85:
       case 117:
@@ -775,17 +786,17 @@
       case 68:
       case 100:
          if ((active1 & 0x80000L) != 0L)
-            return jjStartNfaWithStates_0(4, 83, 37);
+            return jjStartNfaWithStates_0(4, 83, 40);
          return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xeL);
       case 69:
       case 101:
          if ((active0 & 0x1000000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 36, 37);
+            return jjStartNfaWithStates_0(4, 36, 40);
          return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0x80L);
       case 71:
       case 103:
          if ((active0 & 0x800000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 35, 37);
+            return jjStartNfaWithStates_0(4, 35, 40);
          return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
       case 73:
       case 105:
@@ -805,22 +816,22 @@
       case 82:
       case 114:
          if ((active0 & 0x10000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 28, 37);
+            return jjStartNfaWithStates_0(4, 28, 40);
          else if ((active0 & 0x20000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 29, 37);
+            return jjStartNfaWithStates_0(4, 29, 40);
          else if ((active1 & 0x200L) != 0L)
-            return jjStartNfaWithStates_0(4, 73, 37);
+            return jjStartNfaWithStates_0(4, 73, 40);
          else if ((active1 & 0x4000L) != 0L)
-            return jjStartNfaWithStates_0(4, 78, 37);
+            return jjStartNfaWithStates_0(4, 78, 40);
          return jjMoveStringLiteralDfa5_0(active0, 0x8201000008000000L, active1, 0x8000L);
       case 84:
       case 116:
          if ((active0 & 0x40000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 30, 37);
+            return jjStartNfaWithStates_0(4, 30, 40);
          else if ((active0 & 0x80000000000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 55, 37);
+            return jjStartNfaWithStates_0(4, 55, 40);
          else if ((active0 & 0x800000000000000L) != 0L)
-            return jjStartNfaWithStates_0(4, 59, 37);
+            return jjStartNfaWithStates_0(4, 59, 40);
          return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
       default :
          break;
@@ -854,14 +865,14 @@
       case 69:
       case 101:
          if ((active0 & 0x400000000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 58, 37);
+            return jjStartNfaWithStates_0(5, 58, 40);
          else if ((active1 & 0x8000L) != 0L)
-            return jjStartNfaWithStates_0(5, 79, 37);
+            return jjStartNfaWithStates_0(5, 79, 40);
          return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x80L);
       case 71:
       case 103:
          if ((active0 & 0x800000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 47, 37);
+            return jjStartNfaWithStates_0(5, 47, 40);
          break;
       case 73:
       case 105:
@@ -869,7 +880,7 @@
       case 78:
       case 110:
          if ((active0 & 0x2000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 61, 37);
+            return jjStartNfaWithStates_0(5, 61, 40);
          return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20050L);
       case 79:
       case 111:
@@ -877,12 +888,12 @@
       case 83:
       case 115:
          if ((active0 & 0x200000000000L) != 0L)
-            return jjStartNfaWithStates_0(5, 45, 37);
+            return jjStartNfaWithStates_0(5, 45, 40);
          return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x8L);
       case 84:
       case 116:
          if ((active0 & 0x400000L) != 0L)
-            return jjStartNfaWithStates_0(5, 22, 37);
+            return jjStartNfaWithStates_0(5, 22, 40);
          break;
       default :
          break;
@@ -912,7 +923,7 @@
       case 71:
       case 103:
          if ((active1 & 0x40L) != 0L)
-            return jjStartNfaWithStates_0(6, 70, 37);
+            return jjStartNfaWithStates_0(6, 70, 40);
          break;
       case 73:
       case 105:
@@ -920,21 +931,21 @@
       case 76:
       case 108:
          if ((active0 & 0x8000000L) != 0L)
-            return jjStartNfaWithStates_0(6, 27, 37);
+            return jjStartNfaWithStates_0(6, 27, 40);
          break;
       case 78:
       case 110:
          if ((active0 & 0x40000000000L) != 0L)
-            return jjStartNfaWithStates_0(6, 42, 37);
+            return jjStartNfaWithStates_0(6, 42, 40);
          else if ((active0 & 0x1000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(6, 60, 37);
+            return jjStartNfaWithStates_0(6, 60, 40);
          return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
       case 83:
       case 115:
          if ((active1 & 0x80L) != 0L)
-            return jjStartNfaWithStates_0(6, 71, 37);
+            return jjStartNfaWithStates_0(6, 71, 40);
          else if ((active1 & 0x20000L) != 0L)
-            return jjStartNfaWithStates_0(6, 81, 37);
+            return jjStartNfaWithStates_0(6, 81, 40);
          break;
       case 84:
       case 116:
@@ -964,21 +975,21 @@
       case 68:
       case 100:
          if ((active0 & 0x200000000000000L) != 0L)
-            return jjStartNfaWithStates_0(7, 57, 37);
+            return jjStartNfaWithStates_0(7, 57, 40);
          break;
       case 69:
       case 101:
          if ((active1 & 0x10L) != 0L)
-            return jjStartNfaWithStates_0(7, 68, 37);
+            return jjStartNfaWithStates_0(7, 68, 40);
          else if ((active1 & 0x200000L) != 0L)
-            return jjStartNfaWithStates_0(7, 85, 37);
+            return jjStartNfaWithStates_0(7, 85, 40);
          break;
       case 83:
       case 115:
          if ((active0 & 0x4000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(7, 62, 37);
+            return jjStartNfaWithStates_0(7, 62, 40);
          else if ((active1 & 0x8L) != 0L)
-            return jjStartNfaWithStates_0(7, 67, 37);
+            return jjStartNfaWithStates_0(7, 67, 40);
          break;
       case 89:
       case 121:
@@ -1025,7 +1036,7 @@
       case 83:
       case 115:
          if ((active0 & 0x8000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(9, 63, 37);
+            return jjStartNfaWithStates_0(9, 63, 40);
          break;
       default :
          break;
@@ -1043,7 +1054,7 @@
 private int jjMoveNfa_0(int startState, int curPos)
 {
    int startsAt = 0;
-   jjnewStateCnt = 37;
+   jjnewStateCnt = 40;
    int i = 1;
    jjstateSet[0] = startState;
    int kind = 0x7fffffff;
@@ -1058,31 +1069,6 @@
          {
             switch(jjstateSet[--i])
             {
-               case 12:
-               case 21:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 103)
-                     kind = 103;
-                  jjCheckNAdd(21);
-                  break;
-               case 38:
-                  if ((0x3ff000000000000L & l) != 0L)
-                  {
-                     if (kind > 106)
-                        kind = 106;
-                     jjCheckNAdd(27);
-                  }
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(23, 24);
-                  break;
-               case 37:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 103)
-                     kind = 103;
-                  jjCheckNAdd(21);
-                  break;
                case 0:
                   if ((0x3ff000000000000L & l) != 0L)
                   {
@@ -1096,24 +1082,27 @@
                         kind = 1;
                   }
                   else if (curChar == 46)
-                     jjCheckNAddTwoStates(23, 27);
+                     jjCheckNAddTwoStates(26, 30);
                   else if (curChar == 45)
                      jjCheckNAdd(19);
                   else if (curChar == 33)
                      jjstateSet[jjnewStateCnt++] = 5;
                   else if (curChar == 60)
                      jjstateSet[jjnewStateCnt++] = 3;
-                  if (curChar == 13)
+                  if (curChar == 48)
+                     jjstateSet[jjnewStateCnt++] = 22;
+                  else if (curChar == 13)
                      jjstateSet[jjnewStateCnt++] = 1;
                   break;
-               case 11:
+               case 12:
+               case 21:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
                   if (kind > 103)
                      kind = 103;
                   jjCheckNAdd(21);
                   break;
-               case 16:
+               case 10:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
                   if (kind > 103)
@@ -1127,13 +1116,59 @@
                      kind = 103;
                   jjCheckNAdd(21);
                   break;
-               case 10:
+               case 11:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
                   if (kind > 103)
                      kind = 103;
                   jjCheckNAdd(21);
                   break;
+               case 22:
+                  if ((0x3ff000000000000L & l) != 0L)
+                  {
+                     if (kind > 107)
+                        kind = 107;
+                     jjCheckNAdd(39);
+                  }
+                  else if (curChar == 46)
+                  {
+                     if (kind > 106)
+                        kind = 106;
+                     jjCheckNAdd(38);
+                  }
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(36, 37);
+                  else if (curChar == 46)
+                     jjCheckNAddTwoStates(35, 27);
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(33, 34);
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(32, 27);
+                  break;
+               case 16:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 103)
+                     kind = 103;
+                  jjCheckNAdd(21);
+                  break;
+               case 40:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 103)
+                     kind = 103;
+                  jjCheckNAdd(21);
+                  break;
+               case 41:
+                  if ((0x3ff000000000000L & l) != 0L)
+                  {
+                     if (kind > 106)
+                        kind = 106;
+                     jjCheckNAdd(30);
+                  }
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(26, 27);
+                  break;
                case 1:
                   if (curChar == 10 && kind > 1)
                      kind = 1;
@@ -1169,79 +1204,90 @@
                      kind = 94;
                   jjCheckNAdd(19);
                   break;
-               case 22:
-                  if (curChar == 46)
-                     jjCheckNAddTwoStates(23, 27);
+               case 23:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 110)
+                     kind = 110;
+                  jjstateSet[jjnewStateCnt++] = 23;
                   break;
-               case 23:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(23, 24);
+               case 24:
+                  if (curChar == 48)
+                     jjstateSet[jjnewStateCnt++] = 22;
                   break;
                case 25:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(26);
+                  if (curChar == 46)
+                     jjCheckNAddTwoStates(26, 30);
                   break;
                case 26:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(26, 27);
+                  break;
+               case 28:
+                  if ((0x280000000000L & l) != 0L)
+                     jjCheckNAdd(29);
+                  break;
+               case 29:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
                   if (kind > 105)
                      kind = 105;
-                  jjCheckNAdd(26);
+                  jjCheckNAdd(29);
                   break;
-               case 27:
+               case 30:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
                   if (kind > 106)
                      kind = 106;
-                  jjCheckNAdd(27);
+                  jjCheckNAdd(30);
                   break;
-               case 28:
+               case 31:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
                   if (kind > 107)
                      kind = 107;
                   jjCheckNAddStates(0, 6);
                   break;
-               case 29:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(29, 24);
-                  break;
-               case 30:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(30, 31);
-                  break;
-               case 31:
-                  if (curChar == 46)
-                     jjCheckNAddTwoStates(32, 24);
-                  break;
                case 32:
                   if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(32, 24);
+                     jjCheckNAddTwoStates(32, 27);
                   break;
                case 33:
                   if ((0x3ff000000000000L & l) != 0L)
                      jjCheckNAddTwoStates(33, 34);
                   break;
                case 34:
+                  if (curChar == 46)
+                     jjCheckNAddTwoStates(35, 27);
+                  break;
+               case 35:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(35, 27);
+                  break;
+               case 36:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(36, 37);
+                  break;
+               case 37:
                   if (curChar != 46)
                      break;
                   if (kind > 106)
                      kind = 106;
-                  jjCheckNAdd(35);
+                  jjCheckNAdd(38);
                   break;
-               case 35:
+               case 38:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
                   if (kind > 106)
                      kind = 106;
-                  jjCheckNAdd(35);
+                  jjCheckNAdd(38);
                   break;
-               case 36:
+               case 39:
                   if ((0x3ff000000000000L & l) == 0L)
                      break;
                   if (kind > 107)
                      kind = 107;
-                  jjCheckNAdd(36);
+                  jjCheckNAdd(39);
                   break;
                default : break;
             }
@@ -1254,6 +1300,18 @@
          {
             switch(jjstateSet[--i])
             {
+               case 0:
+                  if ((0x7fffffe07fffffeL & l) != 0L)
+                  {
+                     if (kind > 103)
+                        kind = 103;
+                     jjCheckNAddTwoStates(20, 21);
+                  }
+                  if ((0x200000002L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 16;
+                  else if ((0x1000000010L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 13;
+                  break;
                case 12:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
@@ -1270,7 +1328,7 @@
                   if ((0x8000000080000L & l) != 0L)
                      jjstateSet[jjnewStateCnt++] = 11;
                   break;
-               case 37:
+               case 10:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
                      if (kind > 103)
@@ -1283,18 +1341,24 @@
                         kind = 103;
                      jjCheckNAddTwoStates(20, 21);
                   }
+                  if ((0x20000000200L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 9;
                   break;
-               case 0:
+               case 13:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 103)
+                        kind = 103;
+                     jjCheckNAdd(21);
+                  }
                   if ((0x7fffffe07fffffeL & l) != 0L)
                   {
                      if (kind > 103)
                         kind = 103;
                      jjCheckNAddTwoStates(20, 21);
                   }
-                  if ((0x200000002L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 16;
-                  else if ((0x1000000010L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 13;
+                  if ((0x20000000200L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 12;
                   break;
                case 11:
                   if ((0x7fffffe87fffffeL & l) != 0L)
@@ -1312,6 +1376,12 @@
                   if ((0x10000000100000L & l) != 0L)
                      jjstateSet[jjnewStateCnt++] = 10;
                   break;
+               case 22:
+                  if ((0x100000001000000L & l) != 0L)
+                     jjCheckNAdd(23);
+                  else if ((0x2000000020L & l) != 0L)
+                     jjAddStates(7, 8);
+                  break;
                case 16:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
@@ -1328,7 +1398,7 @@
                   if ((0x100000001000L & l) != 0L)
                      jjstateSet[jjnewStateCnt++] = 15;
                   break;
-               case 13:
+               case 40:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
                      if (kind > 103)
@@ -1341,24 +1411,6 @@
                         kind = 103;
                      jjCheckNAddTwoStates(20, 21);
                   }
-                  if ((0x20000000200L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 12;
-                  break;
-               case 10:
-                  if ((0x7fffffe87fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAdd(21);
-                  }
-                  if ((0x7fffffe07fffffeL & l) != 0L)
-                  {
-                     if (kind > 103)
-                        kind = 103;
-                     jjCheckNAddTwoStates(20, 21);
-                  }
-                  if ((0x20000000200L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 9;
                   break;
                case 7:
                   if ((0x10000000100000L & l) != 0L && kind > 23)
@@ -1398,7 +1450,14 @@
                      kind = 103;
                   jjCheckNAdd(21);
                   break;
-               case 24:
+               case 23:
+                  if ((0x7e0000007eL & l) == 0L)
+                     break;
+                  if (kind > 110)
+                     kind = 110;
+                  jjCheckNAdd(23);
+                  break;
+               case 27:
                   if ((0x2000000020L & l) != 0L)
                      jjAddStates(7, 8);
                   break;
@@ -1425,7 +1484,7 @@
          kind = 0x7fffffff;
       }
       ++curPos;
-      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
+      if ((i = jjnewStateCnt) == (startsAt = 40 - (jjnewStateCnt = startsAt)))
          return curPos;
       try { curChar = input_stream.readChar(); }
       catch(java.io.IOException e) { return curPos; }
@@ -1623,7 +1682,7 @@
    }
 }
 static final int[] jjnextStates = {
-   29, 30, 31, 24, 33, 34, 36, 25, 26, 
+   32, 33, 34, 27, 36, 37, 39, 28, 29, 
 };
 
 /** Token literal values. */
@@ -1636,7 +1695,7 @@
 null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
 null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
 null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
-null, null, null, };
+null, null, null, null, null, null, };
 
 /** Lexer state names. */
 public static final String[] lexStateNames = {
@@ -1652,10 +1711,10 @@
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, -1, 0, 
-   3, -1, 0, -1, -1, -1, -1, -1, -1, 
+   3, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
 };
 static final long[] jjtoToken = {
-   0xfffffffffffffffdL, 0xec83fffffffL, 
+   0xfffffffffffffffdL, 0x6ec83fffffffL, 
 };
 static final long[] jjtoSkip = {
    0x2L, 0x80000000L, 
@@ -1664,8 +1723,8 @@
    0x0L, 0x3740000000L, 
 };
 protected SimpleCharStream input_stream;
-private final int[] jjrounds = new int[37];
-private final int[] jjstateSet = new int[74];
+private final int[] jjrounds = new int[40];
+private final int[] jjstateSet = new int[80];
 protected char curChar;
 /** Constructor. */
 public ADQLParserTokenManager(SimpleCharStream stream){
@@ -1692,7 +1751,7 @@
 {
    int i;
    jjround = 0x80000001;
-   for (i = 37; i-- > 0;)
+   for (i = 40; i-- > 0;)
       jjrounds[i] = 0x80000000;
 }
 
diff -r c9d8a7239b53 -r fd800478ee49 adql/parser/adqlGrammar.jj
--- a/adql/parser/adqlGrammar.jj	Thu Dec 04 01:20:29 2014 +0200
+++ b/adql/parser/adqlGrammar.jj	Thu Dec 04 01:40:35 2014 +0200
@@ -688,6 +688,16 @@
 |	< #DIGIT: ["0"-"9"] >
 }
 
+/* *************** */
+/* Hexadecimal numbers */
+/* *************** */
+TOKEN : {
+	< HEX_PREFIX: "0x" >
+|	< HEX_INTEGER: (<HEX_PREFIX>(<HEX_DIGIT>)+) >
+|	< #HEX_DIGIT: ["0"-"9","a"-"f","A"-"F"] >
+}
+
+
 							/* ########## */
 							/* # SYNTAX # */
 							/* ########## */
@@ -985,7 +995,8 @@
 String UnsignedNumeric(): {Token t;} {
 	(t=<SCIENTIFIC_NUMBER>
 	| t=<UNSIGNED_FLOAT>
-	| t=<UNSIGNED_INTEGER>)
+	| t=<UNSIGNED_INTEGER>
+	| t=<HEX_INTEGER>)
 	{return t.image;}
 }
 
