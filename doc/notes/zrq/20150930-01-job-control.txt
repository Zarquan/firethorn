#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Set branch and version.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        branch=$(hg branch)

        source "bin/util.sh"
        version=$(getversion)

    popd

# -----------------------------------------------------
# Stop existing containers.
#[user@desktop]

    docker rm -vf $(docker ps -aq)

# -----------------------------------------------------
# Build our toolkit containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        docker build \
            --tag firethorn/fedora:21.1 \
            docker/fedora/21

        docker build \
            --tag firethorn/java:8.1 \
            docker/java/8

        docker build \
            --tag firethorn/tomcat:8.1 \
            docker/tomcat/8

        docker build \
            --tag firethorn/postgres:9.1 \
            docker/postgres/9

        docker build \
            --tag firethorn/builder:1.1 \
            docker/builder

        docker build \
            --tag firethorn/docker-proxy:1.1 \
            docker/docker-proxy

        docker build \
            --tag firethorn/sql-proxy:1.1 \
            docker/sql-proxy

        docker build \
            --tag firethorn/sql-tunnel:1.1 \
            docker/sql-tunnel

        docker build \
            --tag firethorn/ssh-client:1.1 \
            docker/ssh-client

    popd

# -----------------------------------------------------
# Start our docker-proxy container.
#[user@desktop]

    docker run \
        --detach \
        --name "docker-proxy" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/docker-proxy:1.1

    sleep 1
    dockerip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' docker-proxy)

    echo "${dockerip:?}"
    curl "http://${dockerip:?}:2375/version"

# -----------------------------------------------------
# Run our build container.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"

    docker run \
        -it --rm \
        --name builder \
        --env "branch=${branch:?}" \
        --link docker-proxy:docker-proxy \
        --volume /var/local/logs:/var/local/logs \
        --volume /var/local/cache:/var/local/cache \
        --volume /etc/localtime:/etc/localtime:ro \
        --volume ${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock \
        --volume ${FIRETHORN_CODE:?}:/var/local/projects/firethorn \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/builder:1.1 \
        bash

#
# TODO builder should start with notroot
# TODO builder should add notroot as a sudoer
# TODO builder should get branch and version from the code
# TODO builder needs openssh-clients

#
# TODO create space for the log files
# TODO create space for the config files
#

# -----------------------------------------------------
# Install SSH client
# ** this should be in the container **
#[root@builder]

    yum install -y openssh-clients
    
# -----------------------------------------------------
# Set the SSH authentication socket
# ** this should be in the container **
#[root@builder]

    export SSH_AUTH_SOCK=/tmp/ssh_auth_sock

# -----------------------------------------------------
# Update our bash environment.
# ** this should be in the container **
#[root@builder]

    source /etc/bashrc

# -----------------------------------------------------
# Set our project path.
# ** this should be in the container **
#[root@builder]

    if [ ! -e "${HOME:?}/firethorn.settings" ]
    then
        cat > "${HOME:?}/firethorn.settings" << EOF
FIRETHORN_CODE=/var/local/projects/firethorn
EOF
    fi

# -----------------------------------------------------
# Clone our source code.
#[root@builder]

    source "${HOME:?}/firethorn.settings"

    if [ ! -e "${FIRETHORN_CODE:?}" ]
    then
        path=$(dirname ${FIRETHORN_CODE:?})
        name=$(basename ${FIRETHORN_CODE:?})
        pushd "${path:?}"
            hg clone 'http://wfau.metagrid.co.uk/code/firethorn' "${base:?}"
        popd
    else
        pushd "${FIRETHORN_CODE:?}"
            hg pull
        popd
    fi

    pushd "${FIRETHORN_CODE:?}"
        hg update "${branch:?}"
    popd

# -----------------------------------------------------
# Build our source code.
#[root@builder]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our webapp containers.
#[root@builder]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd firethorn-ogsadai/webapp
            mvn -D "docker.host=http://docker-proxy:2375" docker:package
        popd
        
        pushd firethorn-webapp
            mvn -D "docker.host=http://docker-proxy:2375" docker:package
        popd

    popd

# -----------------------------------------------------
# Build our tester container.
#[root@builder]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source "bin/util.sh"

        docker build \
            --tag firethorn/tester:$(getversion) \
            integration/tester

    popd

# -----------------------------------------------------
# Create our secret function.
#[root@builder]

    secrethost='dave@shepseskaf.roe.ac.uk'
    secretfile='${HOME:?}/secret.store'

    secret()
        {
        local key=${1:?}
        ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/^[:space:]*${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
        }

    secret 'ping'

# -----------------------------------------------------
# Configure our docker chain.
#[user@desktop]

    cat > "chain.properties" << EOF

    version=${branch:?}

    metaname=bethany
    username=patricia
    dataname=elayne
    ogsaname=jarmila
    firename=gillian

    metalink=albert
    userlink=edward
    datalink=sebastien
    ogsalink=timothy
    firelink=peter

    metatype=pgsql
    metadata=postgres
    metauser=$(pwgen 20 1)
    metapass=$(pwgen 20 1)
    metadriver=org.postgresql.Driver

    usertype=mssql
    userhost=$(secret 'firethorn.user.host')
    userdata=$(secret 'firethorn.user.data')
    useruser=$(secret 'firethorn.user.user')
    userpass=$(secret 'firethorn.user.pass')
    userdriver=net.sourceforge.jtds.jdbc.Driver

    datatype=mssql
    datahost=$(secret 'firethorn.data.host')
    datadata=$(secret 'firethorn.data.data')
    datauser=$(secret 'firethorn.data.user')
    datapass=$(secret 'firethorn.data.pass')
    datadriver=net.sourceforge.jtds.jdbc.Driver

    tunneluser=$(secret 'ssh.tunnel.user')
    tunnelhost=$(secret 'ssh.tunnel.host')

EOF


#
# Too complicated for now ..
# conflicts with root user
# need to configure temp space for logs and config
# ....
 


