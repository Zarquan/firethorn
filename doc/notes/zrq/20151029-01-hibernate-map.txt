#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2014, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


# -----------------------------------------------------
# Testing the Hibernate map of strings implementation.
#

    @ElementCollection(
        fetch = FetchType.EAGER
        )
    @MapKeyColumn(
        name="name"
        )
    @Column(
        name="value"
        )
    @CollectionTable(
        name=DB_TABLE_PREFIX + "BlueTaskParam",
        joinColumns= @JoinColumn(name="task")
        )
    private Map<String, String> params = new HashMap<String, String>();

# -----------------------------------------------------


log.debug("-- params --");
Map<String, String[]> params = request.getParameterMap();
for (Map.Entry<String, String[]> entry : params.entrySet())
    {
    log.debug("[{}][{}]", entry.getKey(), entry.getValue()[0]);
    }
log.debug("-- params --");
        

# -----------------------------------------------------
# Create a new branch.
#

    devname=zrq-hibernate-map

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        gedit "doc/notes/zrq/20141130-01-hg-branch.txt"

    popd

# -------------------------------------------------------------------------------------------
# Edit code in Eclipse ....
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn -P all clean install eclipse:eclipse

        ....

    popd

# -------------------------------------------------------------------------------------------
# Commit and push to Mercurial
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        hg commit -m "...."
        hg push

    popd



# -----------------------------------------------------
# Get our branch and version number.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        branch=$(hg branch)

        source "bin/util.sh"
        version=$(getversion)

    popd

# -----------------------------------------
# Create a new VM
#[user@desktop]

    ssh shep

        createvm

            INFO : Node name [amarna]
            INFO : Base name [fedora-21-16G-20150407.qcow]
            INFO : Base path [/home/dave/projects/libvirt/base/fedora-21-16G-20150407.qcow]
            INFO : Disc name [amarna.qcow]
            INFO : Disc size [16GiB]

    exit

# -----------------------------------------
# Configure our test VM
#[user@desktop]

    vmname=amarna
    vmname=tau
    
    ssh "${vmname:?}" "cat > \"\${HOME:?}/test.properties\" << EOF
branch=${branch:?}
version=${version:?}
EOF
"

# -----------------------------------------
# Login to the VM.
#[user@desktop]

    ssh "${vmname:?}"

# -----------------------------------------------------
# Create our secret function.
#[root@virtual]

    secrethost='dave@shepseskaf.roe.ac.uk'
    secretfile='${HOME:?}/secret.store'

    secret()
        {
        local key=${1:?}
        ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/^[:space:]*${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
        }

    secret 'ping'

# -----------------------------------------
# Create system config script.
#[root@virtual]

    vi "${HOME}/system-config.sh"

        # -----------------------------------------
        # Install admin tools.
        #[root@virtual]

            yum -y install htop
            yum -y install pwgen
            
        # -----------------------------------------------------
        # Install and start the HAVEGE entropy generator.
        # http://redmine.roe.ac.uk/issues/828
        # http://blog-ftweedal.rhcloud.com/2014/05/more-entropy-with-haveged/
        # http://stackoverflow.com/questions/26021181/not-enough-entropy-to-support-dev-random-in-docker-containers-running-in-boot2d/
        #[root@virtual]

            yum install -y haveged
            systemctl start haveged.service

        # -----------------------------------------------------
        # Install and start Docker.
        #[root@virtual]

            yum install -y https://kojipkgs.fedoraproject.org//packages/docker-io/1.6.2/3.gitc3ca5bb.fc21/x86_64/docker-io-1.6.2-3.gitc3ca5bb.fc21.x86_64.rpm

            systemctl enable docker.service
            systemctl start  docker.service
            systemctl status docker.service

        # -----------------------------------------------------
        # Create our projects directory.
        #[root@virtual]

            if [ ! -e /var/local/projects ]
            then
                mkdir -p /var/local/projects
                chgrp -R users /var/local/projects
                chmod -R g+rwx /var/local/projects
            fi

        # -----------------------------------------------------
        # Create our cache directory.
        #[root@virtual]

            if [ ! -e /var/local/cache ]
            then
                mkdir -p /var/local/cache
                chgrp -R users /var/local/cache
                chmod -R g+rwx /var/local/cache
            fi

        # -----------------------------------------------------
        # Allow access to Docker containers.
        #[root@virtual]

            chcon -t svirt_sandbox_file_t "/var/local/projects" 
            chcon -t svirt_sandbox_file_t "/var/local/cache" 

        # -----------------------------------------------------
        # Install the selinux-dockersock SELinux policy.
        # https://github.com/dpw/selinux-dockersock
        #[root@virtual]

            # Test if present
            # semodule -l | grep dockersock

            yum install -y git
            yum install -y make
            yum install -y checkpolicy
            yum install -y policycoreutils policycoreutils-python
            
            pushd /var/local/projects

                git clone https://github.com/dpw/selinux-dockersock

                pushd selinux-dockersock

                    make dockersock.pp

                    semodule -i dockersock.pp

                popd
            popd

# -----------------------------------------
# Create firethorn build script.
#[root@virtual]

    vi "${HOME}/docker-build.sh"

        # -----------------------------------------------------
        # Update our path.
        #[root@builder]

            # ** this should be in the container **
            source /etc/bashrc

        # -----------------------------------------------------
        # Checkout a copy of our source code.
        #[root@builder]

            #
            # Set the project path.
            if [ ! -e "${HOME:?}/firethorn.settings" ]
            then
                cat > "${HOME:?}/firethorn.settings" << EOF
        FIRETHORN_CODE=/projects/firethorn
        EOF
            fi

            #
            # Clone our repository.
            source "${HOME:?}/firethorn.settings"
            if [ ! -e "${FIRETHORN_CODE:?}" ]
            then
                pushd "$(dirname ${FIRETHORN_CODE:?})"

                    hg clone 'http://wfau.metagrid.co.uk/code/firethorn'

                popd
            fi

            #
            # Pull and update from branch.
            source "${HOME:?}/firethorn.settings"
            pushd "${FIRETHORN_CODE:?}"

                hg pull
                hg update "${branch:?}"
                hg branch
            
            popd

        # -----------------------------------------------------
        # Build our toolkit containers.
        #[root@builder]

            source "${HOME:?}/firethorn.settings"
            pushd "${FIRETHORN_CODE:?}"

                if [ $(docker images | grep -c '^firethorn/fedora') -eq 0 ]
                then
                    echo "# ------"
                    echo "# Building Fedora image"
                    docker build \
                        --tag firethorn/fedora:21.1 \
                        docker/fedora/21
                fi

                if [ $(docker images | grep -c '^firethorn/java') -eq 0 ]
                then
                    echo "# ------"
                    echo "# Building Java image"
                    docker build \
                        --tag firethorn/java:8.1 \
                        docker/java/8
                fi

                if [ $(docker images | grep -c '^firethorn/tomcat') -eq 0 ]
                then
                    echo "# ------"
                    echo "# Building Tomcat image"
                    docker build \
                        --tag firethorn/tomcat:8.1 \
                        docker/tomcat/8
                fi

                if [ $(docker images | grep -c '^firethorn/postgres') -eq 0 ]
                then
                    echo "# ------"
                    echo "# Building Postgres image"
                    docker build \
                        --tag firethorn/postgres:9 \
                        docker/postgres/9
                fi

                if [ $(docker images | grep -c '^firethorn/builder') -eq 0 ]
                then
                    echo "# ------"
                    echo "# Building Builder image"
                    docker build \
                        --tag firethorn/builder:1.1 \
                        docker/builder
                fi

                if [ $(docker images | grep -c '^firethorn/docker-proxy') -eq 0 ]
                then
                    echo "# ------"
                    echo "# Building docker-proxy image"
                    docker build \
                        --tag firethorn/docker-proxy:1.1 \
                        docker/docker-proxy
                fi

                if [ $(docker images | grep -c '^firethorn/sql-proxy') -eq 0 ]
                then
                    echo "# ------"
                    echo "# Building sql-proxy image"
                    docker build \
                        --tag firethorn/sql-proxy:1.1 \
                        docker/sql-proxy
                fi

                if [ $(docker images | grep -c '^firethorn/sql-tunnel') -eq 0 ]
                then
                    echo "# ------"
                    echo "# Building sql-tunnel image"
                    docker build \
                        --tag firethorn/sql-tunnel:1.1 \
                        docker/sql-tunnel
                fi

                if [ $(docker images | grep -c '^firethorn/ssh-client') -eq 0 ]
                then
                    echo "# ------"
                    echo "# Building ssh-client image"
                    docker build \
                        --tag firethorn/ssh-client:1.1 \
                        docker/ssh-client
                fi

            popd

        # -----------------------------------------------------
        # Start our docker-proxy container.
        #[root@builder]

            docker run \
                --detach \
                --name "docker-proxy" \
                --volume /var/run/docker.sock:/var/run/docker.sock \
                firethorn/docker-proxy:1.1

            dockerip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' docker-proxy)
            echo "docker-proxy [${dockerip:?}]"

            sleep 1
            curl "http://${dockerip:?}:2375/version"

        # -----------------------------------------------------
        # Build our webapp services.
        #[root@builder]

            #
            # Build our webapp services.
            source "${HOME:?}/firethorn.settings"
            pushd "${FIRETHORN_CODE:?}"

                mvn clean install

            popd

        # -----------------------------------------------------
        # Build our webapp containers.
        #[root@builder]

            source "${HOME:?}/firethorn.settings"
            pushd "${FIRETHORN_CODE:?}"

                pushd firethorn-ogsadai/webapp
                    mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
                popd
                
                pushd firethorn-webapp
                    mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
                popd

            popd

        # -----------------------------------------------------
        # Build our tester container.
        #[root@builder]

            source "${HOME:?}/firethorn.settings"
            pushd "${FIRETHORN_CODE:?}"

                source "bin/util.sh"

                if [ $(docker images | grep -c '^firethorn/tester') -eq 0 ]
                then
                    echo "# ------"
                    echo "# Building tester image"
                    docker build \
                       --tag firethorn/tester:$(getversion) \
                       integration/tester
                fi
            popd

        # -----------------------------------------------------
        # Build our pyrothorn container.
        #[root@builder]

            source "${HOME:?}/firethorn.settings"
            pushd "${FIRETHORN_CODE:?}"

                if [ $(docker images | grep -c '^firethorn/pyrothorn') -eq 0 ]
                then
                    echo "# ------"
                    echo "# Building pyrothorn image"
                    docker build \
                        --tag firethorn/pyrothorn:$(getversion) \
                        integration/005/testing/pyrothorn

                fi
            popd

        # -----------------------------------------------------
        # Exit our builder.
        #[root@builder]

            exit


# -----------------------------------------
# Run our system config script.
#[root@virtual]

    chmod a+x "${HOME}/system-config.sh"
    "${HOME}/system-config.sh"

# -----------------------------------------------------
# Run our build container.
#

    source "${HOME:?}/test.properties"

    chmod a+x "${HOME}/docker-build.sh"
    chcon -t svirt_sandbox_file_t "${HOME}/docker-build.sh"

    docker run \
        -it \
        --rm \
        --env "branch=${branch:?}" \
        --env "version=${version:?}" \
        --volume /var/local/cache:/cache \
        --volume /var/local/projects:/projects \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        --volume ${HOME:?}/docker-build.sh:/docker-build.sh \
        firethorn/builder:1 \
        bash /docker-build.sh

