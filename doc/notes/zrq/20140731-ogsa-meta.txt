#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2014, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------------------------------------------
# New interfaces
#

    interface OgsaService
        {
        interface Factory
            {
            Iterable<OgsaService> select();
            OgsaService create(String endpoint);
            }

        public String endpoint();
        public String ogsaid();
        public Status poke();

        public enum Status {}

        
        interface Resources
            {
            Iterable<OgsaResource> select();

            OgsaJdbcResource create(JdbcResource source);
            OgsaIvoaResource create(IvoaResource source);

            Iterable<OgsaJdbcResource> select(JdbcResource source);
            Iterable<OgsaIvoaResource> select(IvoaResource source);
            }
        public Resources resources();


        }

    interface OgsaResource
        {

        interface Factory
            {
            Iterable<OgsaResource> select();

            OgsaJdbcResource create(OgsaService service, JdbcResource source);
            OgsaIvoaResource create(OgsaService service, IvoaResource source);

            Iterable<OgsaResource> select(OgsaService service);

            Iterable<OgsaJdbcResource> select(JdbcResource source);
            Iterable<OgsaIvoaResource> select(IvoaResource source);
            }

        public OgsaService  service();
        public BaseResource source();

        public String ogsaid();
        public Status poke();

        }

    interface OgsaJdbcResource
    extends OgsaResource
        {
        public JdbcResource source();
        }

    interface OgsaIvoaResource
    extends OgsaResource
        {
        public IvoaResource source();
        }

    interface JdbcResource
        {

        JdbcConnection connection()

        interface Resources
            {
            Iterable<OgsaJdbcResource> select();
            Iterable<OgsaJdbcResource> select(OgsaService service);

            OgsaJdbcResource create(OgsaService service);

            }
        }

# -----------------------------------------------------
# Create a new development branch.
#[user@desktop]

    devbranch=1.11.8-zrq-ogsa-meta

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        #
        # Create the new branch.
        hg update 'default'
        hg branch "${devbranch:?}"

        #
        # Set the project version.
        source 'bin/util.sh'
        setversion "${devbranch:?}"

        #
        # Commit and push the new branch.
        hg commit -m "Creating [branch-${devbranch:?}]"
        hg push --new-branch

        #
        # Re-build everything.
        mvn -P all clean install
        mvn -P all eclipse:eclipse

    popd

# -----------------------------------------------------
# Update dependencies.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        #
        # Check for dependency Updates
        mvn versions:display-dependency-updates

        #
        # Check for plugin Updates
        mvn versions:display-plugin-updates

        #
        # Re-build everything.
        mvn -P all clean install

        #
        # Commit the changes
        hg commit -m "Updated dependencies"

    popd

# -----------------------------------------------------
# Merge the changes into main.
#[user@desktop]

    devbranch=$(getversion)
    newversion=1.11.9

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        #
        # Close the dev branch.
        hg update "${devbranch:?}"
        hg commit --close-branch -m "Closing [branch-${devbranch:?}]"
        hg push

        #
        # Merge the dev branch.
        hg update 'default'
        hg merge "${devbranch:?}"

        #
        # Commit the merge.
        hg commit -m "Merging [branch-${devbranch:?}] into [default]"
        hg push

        #
        # Update the project version.
        setversion "${newversion}"
        hg commit -m "Snapshot [version-$(getversion)]"
        hg tag    -f "version-$(getversion)"
        hg push

        #
        # Re-build everything.
        mvn -P all clean install

        #
        # Push to our public repositiry.
        ./bin/rsync-repo.sh
        
    popd

# -----------------------------------------------------
# Create a new development branch.
#[user@desktop]

    devbranch=1.11.9-zrq-ogsa-meta

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        #
        # Create the new branch.
        hg update 'default'
        hg branch "${devbranch:?}"

        #
        # Set the project version.
        source 'bin/util.sh'
        setversion "${devbranch:?}"

        #
        # Commit and push the new branch.
        hg commit -m "Creating [branch-${devbranch:?}]"
        hg push --new-branch

        #
        # Re-build everything.
        mvn -P all clean install
        mvn -P all eclipse:eclipse

    popd

# -----------------------------------------------------
# Do stuff .....
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"


    popd

# -------------------------------------------------------------------------------------------
# Create new metadata and userdata database(s).
#[user@desktop]

    deploytype=test
    deploylist="${HOME:?}/firethorn/${deploytype:?}.machines"
    deployprop="${HOME:?}/firethorn/${deploytype:?}.properties"

    source "${deploylist:?}"
    ssh "${sqluser:?}@${sqlhost:?}"

        #
        # Set the new database name.
        dbversion=ZRQ011109DEV
        metadataname="FirethornMetadata${dbversion:?}"
        userdataname="FirethornUserdata${dbversion:?}"

        #
        # Load the SQLServer properties
        sqshtype=test
        source "${HOME:?}/sqsh${sqshtype:?}.properties"

        #
        # Function to fill in the template values.
        sqlsed()
            {
            sed '
                s|{databasename}|'"${databasename}"'|g
                s|{databasepath}|'"${databasepath}"'|g
                s|{databaseuser}|'"${databaseuser}"'|g
                s|{databasepass}|'"${databasepass}"'|g
                s|{databaselogin}|'"${databaselogin}"'|g
                ' "${1:?}"
            }

        source "${HOME:?}/firethorn.settings"
        pushd "${FIRETHORN_CODE:?}"    

            hg pull
            hg update default
            
            pushd 'firethorn-sqlserver/src/sql'

                #
                # Set the template values
                databasehost="${sqshhost:?}"
                databaseport="1433"
                databasename="${metadataname:?}"
                databasepath="${sqshpath:?}"
                databaseuser="${databasename:?}User"
                databaselogin="${databasename:?}Login"
                databasepass="${databasename:?}$(pwgen -s 8 1)"

                databasefile="${HOME:?}/firethorn-$(date +%Y%m%d%H%M%S).properties"
                cat >> "${databasefile:?}" << EOF
#
# Metadata database
firethorn.meta.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.meta.user=${databaselogin:?}
firethorn.meta.pass=${databasepass:?}
EOF

                #
                # Delete our old metadata database.
                sqlsed 'delete-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Create our new metadata database.
                sqlsed 'create-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Set the template values
                databasehost="${sqshhost:?}"
                databaseport="1433"
                databasename="${userdataname:?}"
                databasepath="${sqshpath:?}"
                databaseuser="${databasename:?}User"
                databaselogin="${databasename:?}Login"
                databasepass="${databasename:?}$(pwgen -s 8 1)"

                cat >> "${databasefile:?}" << EOF
#
# Userdata database
firethorn.user.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.user.user=${databaselogin:?}
firethorn.user.pass=${databasepass:?}
EOF

                #
                # Delete our old userdata database.
                sqlsed 'delete-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Create our new userdata database (including empty table).
                sqlsed 'create-database.sql'   | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-login.sql'      | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-user.sql'       | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-emptytable.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

echo "Config [${databasefile:?}]"
cat  "${databasefile:?}"

            popd
        popd
    exit

# -----------------------------------------------------
# Update local config
#[user@desktop]

    gedit "${HOME:?}/firethorn.properties" &
    
# -----------------------------------------------------
# Run the ogsa-dai service  ....
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source 'bin/util.sh'

        pushd 'firethorn-ogsadai/webapp'

            mvn clean compile war:war

            source src/test/bin/jdbc-functions.sh

            pushd "target/firethorn-ogsadai-webapp-$(getversion)/WEB-INF/etc/dai"

                jdbcconfig atlas-id  firethorn.atlas
                jdbcconfig userd-id  firethorn.user

            popd
            
            export MAVEN_OPTS=-Xmx128m
            mvn tomcat7:run | tee /tmp/ogsadai-tomcat.log


