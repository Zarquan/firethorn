#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Stop and remove our webapp containers.
#[user@desktop]

    source "${HOME:?}/chain.properties"

    docker stop "${firename:?}"
    docker rm   "${firename:?}"

    docker stop "${ogsaname:?}"
    docker rm   "${ogsaname:?}"

# -----------------------------------------------------
# Build our source code.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our webapp containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd firethorn-ogsadai/webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd
        
        pushd firethorn-webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd

    popd

# -----------------------------------------------------
# Start our OGSA-DAI container.
#[root@virtual]

    source "${HOME:?}/chain.properties"

    docker run \
        --detach \
        --publish 8081:8080 \
        --name "${ogsaname:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume /etc/localtime:/etc/localtime:ro \
        "firethorn/ogsadai:${version:?}"

# -----------------------------------------------------
# Start our FireThorn container.
#[user@desktop]

    source "${HOME:?}/chain.properties"

    properties=${HOME:?}/firethorn.properties

    docker run \
        --detach \
        --publish 8080:8080 \
        --name "${firename:?}" \
        --link "${ogsaname:?}:${ogsalink:?}" \
        --link "${metaname:?}:${metalink:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume "${properties:?}:/etc/firethorn.properties" \
        --volume /etc/localtime:/etc/localtime:ro \
        "firethorn/firethorn:${version:?}"

# -----------------------------------------------------
# Start our test container.
#[user@desktop]

    source "${HOME:?}/chain.properties"
    docker run \
        --rm \
        --tty \
        --interactive \
        --env "datadata=${datadata:?}" \
        --env "datalink=${datalink:?}" \
        --env "datauser=${datauser:?}" \
        --env "datapass=${datapass:?}" \
        --env "datadriver=${datadriver:?}" \
        --env "endpointurl=http://${firelink:?}:8080/firethorn" \
        --link "${firename:?}:${firelink:?}" \
        --volume /etc/localtime:/etc/localtime:ro \
        "firethorn/tester:1.1" \
        bash

# -----------------------------------------------------
# Configure our identity.
#[root@tester]

        identity=${identity:-$(date '+%H:%M:%S')}
        community=${community:-$(date '+%A %-d %B %Y')}

        source "bin/01-01-init-rest.sh"

# -----------------------------------------------------
# Check the system info.
#[root@tester]

        curl \
            --header "firethorn.auth.identity:${identity:?}" \
            --header "firethorn.auth.community:${community:?}" \
            "${endpointurl:?}/system/info" \
            | bin/pp | tee system-info.json

# -----------------------------------------------------
# Load the ATLASDR1 resource.
#[root@tester]

        database=ATLASDR1
        
        source "bin/02-02-create-jdbc-space.sh" \
            'Atlas JDBC conection' \
            "jdbc:jtds:sqlserver://${datalink:?}/${database:?}" \
            "${datauser:?}" \
            "${datapass:?}" \
            "${datadriver:?}" \
            '*'
        atlasjdbc=${jdbcspace:?}

        source "bin/03-01-create-adql-space.sh" 'Atlas ADQL workspace'
        atlasadql=${adqlspace:?}

        source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'ATLASDR1' 'dbo' "meta/ATLASDR1_AtlasSource.xml"

# -----------------------------------------------------
# Create our workspace
#[root@tester]

        source "bin/04-01-create-query-space.sh" 'Test workspace'
        source "bin/04-03-import-query-schema.sh" "${atlasadql:?}" 'ATLASDR1' 'atlas'

# -----------------------------------------------------
# Run a BlueQuery
#[root@tester]

        #
        # Create BlueQuery with a valid input and wait (60s) for completion.
        curl \
            --header "firethorn.auth.identity:${identity:?}" \
            --header "firethorn.auth.community:${community:?}" \
            --data "blue.query.input=SELECT TOP 500 ra, dec FROM atlas.atlasSource" \
            --data "blue.query.next.status=COMPLETED" \
            --data "blue.query.wait=60000" \
            "${endpointurl:?}/${queryspace:?}/blue/create" \
            | bin/pp | tee blue-query.json

# -----------------------------------------------------
# Run a BlueQuery with limits
#[root@tester]

        #
        # Create BlueQuery with a valid input and wait (60s) for completion.
        curl \
            --header "firethorn.auth.identity:${identity:?}" \
            --header "firethorn.auth.community:${community:?}" \
            --data "blue.query.input=SELECT TOP 500 ra, dec FROM atlas.atlasSource" \
            --data "blue.query.next.status=COMPLETED" \
            --data "blue.query.limit.rows=100" \
            --data "blue.query.wait=60000" \
            "${endpointurl:?}/${queryspace:?}/blue/create" \
            | bin/pp | tee blue-query.json

