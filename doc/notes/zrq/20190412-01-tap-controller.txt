#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2019, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


# -----------------------------------------------------
# Create a new development branch.
#[user@desktop]

    devname=zrq-tap-controller

    source "${HOME:?}/firethorn.settings"
    gedit  "${FIRETHORN_CODE:?}/doc/notes/zrq/20180302-02-hg-branch.txt"

    # Not a direct copy/paste.
    # Skipped the update to default, so this branch is a child of the previous branch.
    # Simplified the branch name to remove the double name.

# -----------------------------------------------------
# Print the branch name.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source 'bin/util.sh'
        getversion

--START
2.1.28-zrq-tap-controller
--END

    popd

# -----------------------------------------------------

    #
    # Test plan ..

    Deploy chain in a VM
    Use Python client to deploy ATLAS metadata.
    Use curl to test the TAP endpoint
    Reproduce the race condition.
        Add a ChaosMonkey trigger to return no rows immediately.

    Use curl to run the same test on the BlueQuery endpoint.
    If the bug does occur, then debug and fix the BlueQueryController
    If the bug doen't occur, then replace TAPController with one based on the BlueQueryController.


# -----------------------------------------------------
# List the active virtual machines on trop01.
#[user@trop01]

    source "${HOME}/libvirt.settings"

    virsh \
        --connect ${connection:?} \
        list \
            --all

--START--
 Id    Name                           State
----------------------------------------------------
 2     Cadelicia                      running
 3     Gworewia                       running
 4     Abecien                        running
 5     Froeseth                       running
 -     Astoalith                      shut off
--END--

# -----------------------------------------------------
# Figure out who is doing what ?
#[user@trop01]


    for vmname in $(
        virsh \
            --connect ${connection:?} \
            --quiet \
            list \
        | awk '
            {print $2}
            '
        )
    do
        echo ""
        echo "---- VM [${vmname}]"
        ssh ${vmname} '
            hostname
            date
            docker ps
            '
    done


--START--
---- VM [Cadelicia]
Cadelicia
Fri 12 Apr 14:07:07 BST 2019
CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS                 PORTS                    NAMES
742ffef40418        firethorn/firethorn-py:2.1.28   "python3"                3 months ago        Up 3 weeks                                      stevedore_firethorn-py_run_3
22a4adf64bd9        firethorn/firethorn:2.1.28      "/bin/sh -c '/var/lo…"   3 months ago        Up 3 weeks (healthy)   0.0.0.0:8080->8080/tcp   stevedore_gillian_1
b0539f583ffd        firethorn/postgres:2.1.28       "docker-entrypoint.s…"   3 months ago        Up 8 weeks             5432/tcp                 stevedore_carolina_1
5e7bb6d35b74        firethorn/postgres:2.1.28       "docker-entrypoint.s…"   3 months ago        Up 8 weeks             5432/tcp                 stevedore_bethany_1
98436a3d8bdf        firethorn/ogsadai:2.1.28        "/bin/sh -c '/var/lo…"   3 months ago        Up 3 weeks (healthy)   8080/tcp                 stevedore_jarmila_1

---- VM [Gworewia]
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).

---- VM [Abecien]
Abecien
Fri 12 Apr 14:07:07 BST 2019
CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS                   PORTS                    NAMES
2e578e4c70b0        firethorn/firethorn-py:2.1.28   "python3"                4 weeks ago         Up 4 weeks                                        stevedore_firethorn-py_run_2
5d6d6888d9f2        firethorn/firethorn:2.1.28      "/bin/sh -c '/var/lo…"   4 weeks ago         Up 4 weeks (unhealthy)   0.0.0.0:8080->8080/tcp   stevedore_gillian_1
370d8c48b8d9        firethorn/postgres:2.1.28       "docker-entrypoint.s…"   4 weeks ago         Up 4 weeks               5432/tcp                 stevedore_bethany_1
19f62fd9097e        firethorn/postgres:2.1.28       "docker-entrypoint.s…"   4 weeks ago         Up 4 weeks               5432/tcp                 stevedore_carolina_1
2b990b474bf2        firethorn/ogsadai:2.1.28        "/bin/sh -c '/var/lo…"   4 weeks ago         Up 4 weeks (healthy)     8080/tcp                 stevedore_jarmila_1

---- VM [Froeseth]
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
--END--


# -----------------------------------------------------
# Slack chat to check which machines are in use.
#[user@trop01]

--START--
Dave Morris [1:53 PM]
@stv Hiya
I'm looking at replicating the TAP issues and need to use the VMs on trop01.
trop01 VMs

 Id  Name              State
----------------------------------------------------
 2   Cadelicia           running
 3   Gworewia            running
 4   Abecien            running
Do we need to keep any of these ?

Stelios Voutsinas [2:05 PM]
hiya
I'd say if you can just leave Gworewia
the rest can be deleted
I'll probably start some testing again today, so I'll recreate a VM
--END--

# -----------------------------------------------------
# List of available machine names.
#[user@trop01]

--START--
[1] Delild
[2] Abecien
[3] Saewan
[4] Cadelicia
[5] Froeseth
[6] Astoalith
[7] Erennon
[8] Gworewia
--END--

# -----------------------------------------------------
# Start with Cadelicia.
#[user@trop01]

    createvm

--START--
INFO : Node name [Cadelicia]
INFO : Base name [fedora-28-16G-docker-base-20181016.qcow]
INFO : Base path [/var/lib/libvirt/images/base/fedora-28-16G-docker-base-20181016.qcow]
INFO : Disc name [Cadelicia.qcow]
INFO : Disc size [16GiB]
--END--

# -----------------------------------------------------
# Remove the old SSH keys.
# TODO Add this to the create script.
#[user@trop01]

    ssh-keygen \
        -f "${HOME}/.ssh/known_hosts" \
        -R cadelicia

    ssh-keygen \
        -f "${HOME}/.ssh/known_hosts" \
        -R $(
            grep 'Cadelicia' /etc/hosts | awk '{print $1}'
            )

# -----------------------------------------------------
# Login to the new VM
#[user@trop01]

    ssh Cadelicia

# -----------------------------------------------------
# Add our secret function.
#[user@virtual]

    mkdir "${HOME:?}/bin"
    cat > "${HOME:?}/bin/secret" << 'EOF'
service='dave@shepseskaf.roe.ac.uk'
if [ -n "${1}" ]
then
    ssh -q "${service:?}" "bin/secret \"${1}\""
fi
EOF
    chmod u+x "${HOME:?}/bin/secret"

    secret 'frog'

# -----------------------------------------------------
# Add our administrator SSH keys.
#[user@virtual]

    secret 'firethorn.ssh.keys' | tee --append "${HOME}/.ssh/authorized_keys"

--START--
ssh-rsa ....
ssh-rsa ....
ssh-rsa ....
--END--


# -----------------------------------------------------
# Fetch our builder YML file.
#[user@virtual]

    wget 'http://wfau.metagrid.co.uk/code/firethorn/raw-file/tip/docker/compose/builder.yml'

# -----------------------------------------------------
# Run the builder container.
#[user@virtual]

    export branch=2.1.28-zrq-tap-controller

    docker-compose \
        --file "builder.yml" \
        run \
            builder

# -----------------------------------------------------
# Run the builder build script.
#[user@builder]

    /builder/bin/00.00-build.sh

# -----------------------------------------------------
# Checkout the Python client code.
# TODO Add this to the build script ?
#[user@builder]

    : ${FIRETHORN_HOME:=/etc/firethorn}
    : ${FIRETHORN_CODE:=/var/local/build/firethorn}

    : ${PYTHON_BASE:=/var/local/build/python}

    if [ ! -e "${PYTHON_BASE:?}" ]
    then
        mkdir -p "${PYTHON_BASE:?}"
    fi

    : ${PYCLIENT_REPO:=https://github.com/stvoutsin/firethorn.py}
    : ${PYCLIENT_CODE:=${PYTHON_BASE:?}/pyclient}

    if [ -e "${PYCLIENT_CODE:?}" ]
    then
        pushd "${PYCLIENT_CODE:?}"

            echo "Updating Python client source code"
            git pull

        popd
    else
        pushd "$(dirname ${PYCLIENT_CODE:?})"

            echo "Cloning Python client source code from [${PYCLIENT_REPO:?}]"
            git clone "${PYCLIENT_REPO:?}" "$(basename ${PYCLIENT_CODE:?})"

        popd
    fi

    : ${PYUTILS_REPO:=https://github.com/stvoutsin/firethorn-utils}
    : ${PYUTILS_CODE:=${PYTHON_BASE:?}/pyutils}

    if [ -e "${PYUTILS_CODE:?}" ]
    then
        pushd "${PYUTILS_CODE:?}"

            echo "Updating Python utils source code"
            git pull

        popd
    else
        pushd "$(dirname ${PYUTILS_CODE:?})"

            echo "Cloning Python utils source code from [${PYUTILS_REPO:?}]"
            git clone "${PYUTILS_REPO:?}" "$(basename ${PYUTILS_CODE:?})"

        popd
    fi

# -----------------------------------------------------
# Build the Python client images.
# TODO Add these to the firethorn source code ..
#[user@builder]

    buildtag=${branch:?}

    pushd "${PYTHON_BASE:?}"

        docker build \
            --tag  firethorn/pyclient-base:${buildtag:?} \
            --file "${FIRETHORN_CODE}/docker/client/base/Dockerfile" \
            .

        docker build \
            --tag firethorn/pyclient-client:${buildtag:?} \
            --file "${FIRETHORN_CODE}/docker/client/client/Dockerfile" \
            .

        docker build \
            --tag firethorn/pyclient-utils:${buildtag:?} \
            --file "${FIRETHORN_CODE}/docker/client/utils/Dockerfile" \
            .

    popd

# -----------------------------------------------------
# Exit back to the VM.
#[user@builder]

    exit

# -----------------------------------------------------
# Check our docker images.
#[user@virtual]

    docker images

--START--
REPOSITORY                  TAG                         IMAGE ID            CREATED             SIZE
firethorn/pyclient-utils    2.1.28-zrq-tap-controller   bf1d767ee8c6        12 seconds ago      791MB
firethorn/pyclient-client   2.1.28-zrq-tap-controller   a2f17953c58f        2 minutes ago       790MB
firethorn/pyclient-base     2.1.28-zrq-tap-controller   370f15dab0a2        2 minutes ago       760MB
firethorn/firethorn         2.1.28-zrq-tap-controller   d1c23acecb25        4 minutes ago       1.05GB
firethorn/ogsadai           2.1.28-zrq-tap-controller   8c8e14d2afad        4 minutes ago       1.05GB
firethorn/builder           2.1.28-zrq-tap-controller   00237ff7a685        7 minutes ago       1.69GB
firethorn/tester            2.1.28-zrq-tap-controller   db13e52ee1a3        12 minutes ago      620MB
firethorn/postgres          2.1.28-zrq-tap-controller   9adae9703a5d        13 minutes ago      230MB
firethorn/sql-proxy         2.1.28-zrq-tap-controller   3666f3a4aa2f        13 minutes ago      675MB
firethorn/apache            2.1.28-zrq-tap-controller   13c03989798f        14 minutes ago      603MB
firethorn/tomcat            2.1.28-zrq-tap-controller   386e834b07d9        14 minutes ago      1GB
firethorn/java              2.1.28-zrq-tap-controller   32b410cffcf9        16 minutes ago      935MB
firethorn/fedora            2.1.28-zrq-tap-controller   16afe8f89d16        17 minutes ago      575MB
postgres                    10                          200d7af0a4e1        2 weeks ago         230MB
firethorn/builder           latest                      ba037636b622        4 months ago        1.69GB
fedora                      <none>                      cc510acfcd70        11 months ago       253MB
--END--

# -----------------------------------------------------
# Create our chain properties.
#[user@virtual]

    cat > "${HOME:?}/chain.properties" << EOF

        buildtag=${branch:?}

        metadata=data_$(pwgen 10 1)
        metauser=user_$(pwgen 10 1)
        metapass=pass_$(pwgen 10 1)

        usertype=$(secret 'firethorn.user.type')
        userhost=$(secret 'firethorn.user.host')
        userdata=$(secret 'firethorn.user.data')
        useruser=$(secret 'firethorn.user.user')
        userpass=$(secret 'firethorn.user.pass')

        datauser=$(secret 'firethorn.data.user')
        datapass=$(secret 'firethorn.data.pass')

        admingroup=group_$(pwgen 10 1)
        adminuser=user_$(pwgen 10 1)
        adminpass=pass_$(pwgen 20 1)

        guestgroup=group_$(pwgen 10 1)
        guestuser=user_$(pwgen 10 1)
        guestpass=pass_$(pwgen 10 1)

        #tapschemadata=data_$(pwgen 10 1)
        tapschemadata=postgres
        tapschemauser=user_$(pwgen 10 1)
        tapschemapass=pass_$(pwgen 10 1)
        tapschemajdbc=jdbc_$(pwgen 10 1)

        adql_query_delay_first=10

        firethorn_limits_rows_absolute=10000000
        firethorn_limits_rows_default=100000

EOF

# -----------------------------------------------------
# Link our compose config ** DON'T SKIP THIS **
#[user@virtual]

    ln -sf "${HOME:?}/chain.properties" "${HOME:?}/.env"


# -----------------------------------------------------
# Download the latest version of our compose file.
#[user@virtual]

    wget 'http://wfau.metagrid.co.uk/code/firethorn/raw-file/tip/docker/compose/deploy/tap-deployer.yml'


# -----------------------------------------------------
# Start our containers ...
#[user@virtual]

    docker-compose \
        --file "tap-deployer.yml" \
        run \
            firethorn-py


--START--
Creating network "stevedore_miriam" with the default driver
Creating network "stevedore_rosana" with the default driver
Creating stevedore_jarmila_1  ... done
Creating stevedore_bethany_1  ... done
Creating stevedore_carolina_1 ... done
Creating stevedore_gillian_1  ... done

Python 3.6.5 (default, Mar 29 2018, 18:20:46)
[GCC 8.0.1 20180317 (Red Hat 8.0.1-0.19)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>>
--END--

# -----------------------------------------------------
# Run our Python installer.
#[python]

import os
import uuid
import time
import firethorn as ftpy
import firethorn_utils.configurator as configur

#
# Create our Firethorn client.
firethorn = ftpy.Firethorn(
    endpoint = os.environ.get(
        'endpoint'
        )
    )

#
# Login as the admin account.
firethorn.login(
    os.environ.get('adminuser'),
    os.environ.get('adminpass'),
    os.environ.get('admingroup')
    )

#
# Create our Configurator.
configurator = configur.Configurator(
    firethorn
    )

#
# Load the OSA configutarion.
configurator.load_resources(
    "https://raw.githubusercontent.com/wfau/metadata/master/firethorn/config/osa-tap.json"
    )

---START---
Importing JDBC Schema: ATLASDR1
Importing JDBC Schema: ATLASDR2
Importing JDBC Schema: ATLASDR3
Importing JDBC Schema: 2MASS
Importing JDBC Schema: 2XMM
Importing JDBC Schema: WISE
Importing JDBC Schema: VIKINGDR3
Importing JDBC Schema: VHSDR1
Importing JDBC Schema: MGC
Importing JDBC Schema: GLIMPSE
Importing JDBC Schema: FIRST
Importing JDBC Schema: DENIS
Importing JDBC Schema: VPHASDR3
Importing JDBC Schema: VVVDR4

ERROR:root:HTTP Error 404:
Traceback (most recent call last):
  File "/home/python/pyclient/firethorn/models/base/base_object.py", line 90, in get_json
    with urllib.request.urlopen( req, data) as response:
  File "/usr/lib64/python3.6/urllib/request.py", line 223, in urlopen
    return opener.open(url, data, timeout)
  File "/usr/lib64/python3.6/urllib/request.py", line 532, in open
    response = meth(req, response)
  File "/usr/lib64/python3.6/urllib/request.py", line 642, in http_response
    'http', request, response, code, msg, hdrs)
  File "/usr/lib64/python3.6/urllib/request.py", line 570, in error
    return self._call_chain(*args)
  File "/usr/lib64/python3.6/urllib/request.py", line 504, in _call_chain
    result = func(*args)
  File "/usr/lib64/python3.6/urllib/request.py", line 650, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 404:
ERROR:root:Expecting value: line 1 column 1 (char 0)
Traceback (most recent call last):
  File "/home/python/pyclient/firethorn/models/adql/adql_resource.py", line 112, in import_jdbc_schema
    response_json_list = json.loads(response.text)
  File "/usr/lib64/python3.6/json/__init__.py", line 354, in loads
    return _default_decoder.decode(s)
  File "/usr/lib64/python3.6/json/decoder.py", line 339, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib64/python3.6/json/decoder.py", line 357, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

Importing JDBC Schema: SDSSDR7
Importing JDBC Schema: SDSSDR9
TAP Service available at: http://gillian:8080/firethorn/tap/54/
---END---


# TODO
# Need to add timestamps to the steps in order to track progress..


#
# Login using a guest account.
firethorn.login(
    str(uuid.uuid4()),
    str(uuid.uuid4()),
    None
    )

#
# Get the Atlas AdqlResource.
atlasadql = firethorn.firethorn_engine.select_adql_resources()[0]

#
# Create and run a query on the resource.
query_str = "SELECT TOP 1000 ra, dec FROM ATLASDR1.atlasSource"
query_obj = atlasadql.create_query(
    query_str,
    "COMPLETED",
    None,
    3000000
    )
print(
    query_obj
    )
print(
    query_obj.table()
    )
print(
    query_obj.table().count()
    )

#
# Iterate the metadata tree
for schema in atlasadql.select_schemas():
    for table in schema.select_tables():
        print(
            "table  [{}][{}][{}]".format(
                schema.name(),
                table.name(),
                table.count(),
                )
            )
        query_str = "SELECT TOP 10 * FROM {}.{}".format(
            schema.name(),
            table.name()
            )
        query_obj = atlasadql.create_query(
            query_str,
            "COMPLETED",
            None,
            3000000
            )
        print(
            query_obj.table().count()
            )



        #
        # ValueError: invalid literal for int() with base 10: '0000000a' (in row 9, col 'column.213133')
        # py_table = query_obj.table().as_astropy()
        # py_table.pprint()


# -----------------------------------------------------
# Watching the logs ...
#[user@virtual]

    Large pauses in processing ..
    Pauses appear to be SQLserver executing the query.
    Appear to get better each time we run the test.

    All four cpu cores @ ~50%-60%
    Mem 1,6G of 3.8G
    Disc 8.0G of 15G = 61%

    free -h

--START--
              total        used        free      shared  buff/cache   available
Mem:           3.9G        1.5G        121M         94M        2.2G        2.0G
Swap:          1.0G         21M        1.0G
--END--

    df -h

--START--
Filesystem      Size  Used Avail Use% Mounted on
devtmpfs        2.0G     0  2.0G   0% /dev
tmpfs           2.0G     0  2.0G   0% /dev/shm
tmpfs           2.0G  864K  2.0G   1% /run
tmpfs           2.0G     0  2.0G   0% /sys/fs/cgroup
/dev/vda3        15G  8.1G  5.2G  61% /
tmpfs           2.0G   25M  2.0G   2% /tmp
/dev/vda1       240M   89M  135M  40% /boot
tmpfs           395M     0  395M   0% /run/user/1001
--END--

# -----------------------------------------------------
# Thinking about the next version ...

    While I'm watching the logs ....
    RabbitMQ vs Kafka
    https://stackoverflow.com/questions/42151544/is-there-any-reason-to-use-rabbitmq-over-kafka

    RabbitMQ vs Kafka
    https://www.cloudkarafka.com/blog/2016-12-05-apachekafka-vs-rabbitmq.html


    Use a message broker to handle the updates between micro services.

    Split Firethorn into several parts.

    Simple REST service for users and groups.
    Simple REST service for authentication.

    Simple REST/CRUD service for ADQL/JDBC metadata.
        - import operations handles as tasks
        - execute is asynchronous, no wait

    Simple REST/CRUD service for BlueQuery.
        - query execution handles as tasks
        - execute is asynchronous, no wait

    Simple REST/CRUD service for data access.
        - import operations handles as tasks
        - export operations handles as tasks
        - execute is asynchronous, no wait

    MemCached in front of the metadata  database.
    MemCached in front of the BlueQuery database.

    RabbitMQ service for BlueQuery updates

    REST service for BlueQuery, including long wait.
    TAP  service for BlueQuery, including long wait.

    VOSpace service for data access.
    HTTP service for data import.
    HTTP service for data export.


