#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


# -----------------------------------------------------
# Get our build version.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source bin/util.sh
        export buildtag=$(getversion)

    popd

# -----------------------------------------------------
# Build our Docker images.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        docker-compose \
            --file docker/compose/images.yml \
            build

    popd

# -----------------------------------------------------
# Build our Python container.
#[user@desktop]

if [ ! -f "${HOME:?}/ftpy.settings" ]
then
echo "Creating [${HOME:?}/ftpy.settings]"
cat > "${HOME:?}/ftpy.settings" << 'EOF'
source "${HOME}/projects.settings" 
FTPY_CODE=${EDINBURGH_PROJECTS}/ftpy/github.zrq
FTPY_REPO=git@github.com:Zarquan/firethorn.py.git
EOF
fi

    source "${HOME:?}/ftpy.settings"
    pushd "${FTPY_CODE:?}"

        docker build \
            --tag firethorn/firethorn-py:${buildtag:?} \
            --file Fedorafile \
            .

    popd

# -----------------------------------------------------
# Create our chain properties.
#[user@laptop]

    cat > "${HOME:?}/chain.properties" << EOF

        buildtag=${buildtag:-latest}

        metauser=$(pwgen 20 1)
        metapass=$(pwgen 20 1)

        usertype=mssql
        userhost=$(secret 'firethorn.user.host')
        userdata=$(secret 'firethorn.user.data')
        useruser=$(secret 'firethorn.user.user')
        userpass=$(secret 'firethorn.user.pass')

        datatype=mssql
        datahost=$(secret 'firethorn.data.host')
        datadata=$(secret 'firethorn.data.data')
        datauser=$(secret 'firethorn.data.user')
        datapass=$(secret 'firethorn.data.pass')

        tunneluser=$(secret 'ssh.tunnel.user')
        tunnelhost=$(secret 'ssh.tunnel.host')

        admingroup=Hyaenidae
        adminuser=Aardwolf
        adminpass=$(pwgen 20 1)

        guestgroup=Afrotheria
        guestuser=Hyrax
        guestpass=$(pwgen 20 1)

EOF

# -----------------------------------------------------
# Link our compose config.
#[user@virtual]

    ln -sf "${HOME:?}/chain.properties" "${HOME:?}/.env"

#---------------------------------------------------------------------
# Compile our Java code.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our Java containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd firethorn-ogsadai/webapp
            mvn docker:package
        popd

        pushd firethorn-webapp
            mvn docker:package
        popd

    popd

# -----------------------------------------------------
# Run our compose set.
#[user@virtual]

    source "${HOME:?}/firethorn.settings"

    docker-compose \
        --file "${FIRETHORN_CODE:?}/docker/compose/tests/burellus/burellus-remote.yml" \
        run \
            angela


# -----------------------------------------------------
# Test login modes ...

import os
import time
import firethorn as ftpy

#
# Create our firethorn client (unnamed param).
# FAIL This makes three login calls to the server, creates two temp accounts on the server, creates two Accounts in the client, one of which has the endpoint as the username.
firethorn = ftpy.Firethorn(
    os.environ.get(
        'endpoint'
        )
    )

#
# Login as the admin account.
# FAIL - This appears to work, but for the wrong reason.
# It ignores the admin name, pass amd communiyt and makes an anon request, creating a new anon guest account on the server.
# It catches to 200 response, but ignores the returnes values, and sets logged_in to True, on the local Account.
firethorn.login(
    os.environ.get('adminuser'),
    os.environ.get('adminpass'),
    os.environ.get('admingroup')
    )

#
# Login as the admin account (bad password).
# FAIL - this should not work.
# This seems to work, because it sends an anon login, gets a 200 response but doesn't check the response values.
firethorn.login(
    os.environ.get('adminuser'),
    'bogus',
    os.environ.get('admingroup')
    )

# -----------------------------------------------------
# Test login modes ...
#[user@pyclient]

import os
import time
import firethorn as ftpy

#
# Create our firethorn client (using named param).
# FAIL This makes three login calls to the server, creates two temp accounts on the server and creates two Accounts in the client.
firethorn = ftpy.Firethorn(
    endpoint = os.environ.get(
        'endpoint'
        )
    )

#
# Login as the admin account.
# FAIL - This appears to work, but for the wrong reason.
# It ignores the admin name, pass amd communiyt and makes an anon request, creating a new anon guest account on the server.
# It catches to 200 response, but ignores the returnes values, and sets logged_in to True, on the local Account.
firethorn.login(
    os.environ.get('adminuser'),
    os.environ.get('adminpass'),
    os.environ.get('admingroup')
    )

#
# Login as the admin account (bad password).
# FAIL - this should not work.
# This seems to work, because it sends an anon login, gets a 200 response but doesn't check the response values.
firethorn.login(
    os.environ.get('adminuser'),
    'bogus',
    os.environ.get('admingroup')
    )

#
# This works, but for the wrong reasons.
# This seems to work, because it sends an anon login, gets a 200 response but doesn't check the response values.
# It never sends the 'frog' username to the server.
firethorn.login(
    'frog',
    '1234'
    )

#
# FAIL - this should not work because 'frog' has already been created with a password.
# This seems to work, because it sends an anon login, gets a 200 response but doesn't check the response values.
# It never sends the username to the server.
firethorn.login(
    'frog'
    )

#
# This works, but for the wrong reasons.
# This seems to work, because it sends an anon login, gets a 200 response but doesn't check the response values.
# It never sends the 'toad' username to the server.
firethorn.login(
    'toad'
    )

#
# FAIL - this should not work because 'toad' has already been created with no password.
# This seems to work, because it sends an anon login, gets a 200 response but doesn't check the response values.
# It never sends the username to the server.
firethorn.login(
    'toad',
    'abcd'
    )


