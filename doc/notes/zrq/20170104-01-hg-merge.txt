#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    #
    # Merge a development branch and test the resulting containers.
    #

    echo "newversion [${newversion:?}]"

# -----------------------------------------------------
# Merge the changes into main.
# TODO Move this into the build container.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    source "${FIRETHORN_CODE:?}/bin/util.sh"

    pushd "${FIRETHORN_CODE:?}"

        #
        # Get the current version
        devbranch=$(getversion)
        echo "devbranch [${devbranch:?}]"

        #
        # Check for changes
        hg status

        #
        # Commit local changes
        # Push/pull the latest changes

        #
        # Swap to the main branch and get the version.
        hg update 'default'
        oldversion=$(getversion)

        echo "devbranch [${devbranch:?}]"
        echo "oldversion [${oldversion:?}]"
        echo "newversion [${newversion:?}]"

        #
        # Merge the dev branch.
        hg merge "${devbranch:?}"

        #
        # Update the main version.
        setversion "${newversion:?}"

    popd

# -----------------------------------------------------
# Remove existing containers.
#[user@desktop]

    docker rm -vf $(docker ps -aq)

# -----------------------------------------------------
# Remove existing images.
#[user@desktop]

    docker rmi -f $(docker images -q)

# -----------------------------------------------------
# Update the Dockerfile versions.
#[user@desktop] 

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source 'bin/util.sh'
        dockversions "$(getversion)"

    popd

# -----------------------------------------------------
# Build our container images.
#[user@desktop] 

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source 'bin/util.sh'
        export version=$(getversion)

        docker-compose \
            --file docker/docker-build.yml \
            build

    popd

# -----------------------------------------------------
# Display our container images.
#[user@desktop] 

    alias dockviz="docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock nate/dockviz"

    dockviz images --tree

# -------------------------------------------------------------------------------------------
# Create a new set of databases
#[root@tester]

    source "${HOME:?}/firethorn.settings"
    gedit "${FIRETHORN_CODE:?}/doc/notes/zrq/20160906-02-mssql-create.txt" &

# -------------------------------------------------------------------------------------------
# Run our tests ....
#[root@tester]

    source "${HOME:?}/firethorn.settings"
    gedit "${FIRETHORN_CODE:?}/doc/notes/zrq/20170109-01-query-testing.txt" &
    
# -------------------------------------------------------------------------------------------
# Commit our changes into the main branch.
#[user@desktop]

    #
    # ONLY DO THIS IF THE TESTS PASS
    #

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        echo "devbranch [${devbranch:?}]"

        #
        # Commit the merge.
        hg commit -m "Merging [branch-${devbranch:?}] into [default]"

        #
        # Close the dev branch.
        hg update "${devbranch:?}"
        hg commit --close-branch -m "Closing [branch-${devbranch:?}]"

        #
        # Update the main tag.
        hg update 'default'
        hg tag -f "version-$(getversion)"

    popd

# -------------------------------------------------------------------------------------------
# Tag our images as latest.
#[user@desktop]

    #
    # ONLY DO THIS IF THE TESTS PASS
    #

    docker tag "firethorn/firethorn:${version}" "firethorn/firethorn:latest"
    docker tag "firethorn/ogsadai:${version}"   "firethorn/ogsadai:latest"
    docker tag "firethorn/tester:${version}"    "firethorn/tester:latest"

# -------------------------------------------------------------------------------------------
# Push our containers to our Docker repo.
#[user@desktop]

    #
    # ONLY DO THIS IF THE TESTS PASS
    #

    docker login

        Username: xxxx
        Password: yyyy
        Email:    zzzz
        Login Succeeded

    docker push "firethorn/fedora:${version:?}"
    docker push "firethorn/java:${version:?}"
    docker push "firethorn/tomcat:${version:?}"
    docker push "firethorn/firethorn:${version:?}"
    docker push "firethorn/ogsadai:${version:?}"

    docker push "firethorn/builder:${version:?}"
    docker push "firethorn/tester:${version:?}"
    docker push "firethorn/postgres:${version:?}"
    docker push "firethorn/sql-tunnel:${version:?}"
    docker push "firethorn/sql-proxy:${version:?}"

# -------------------------------------------------------------------------------------------
# Tag our images as latest.
#[user@desktop]

    #
    # ONLY DO THIS IF THE TESTS PASS
    #

    docker tag "firethorn/fedora:${version:?}"     "firethorn/fedora:latest"
    docker tag "firethorn/java:${version:?}"       "firethorn/java:latest"
    docker tag "firethorn/tomcat:${version:?}"     "firethorn/tomcat:latest"
    docker tag "firethorn/firethorn:${version:?}"  "firethorn/firethorn:latest"
    docker tag "firethorn/ogsadai:${version:?}"    "firethorn/ogsadai:latest"

    docker tag "firethorn/builder:${version:?}"    "firethorn/builder:latest"
    docker tag "firethorn/tester:${version:?}"     "firethorn/tester:latest"
    docker tag "firethorn/postgres:${version:?}"   "firethorn/postgres:latest"
    docker tag "firethorn/sql-tunnel:${version:?}" "firethorn/sql-tunnel:latest"
    docker tag "firethorn/sql-proxy:${version:?}"  "firethorn/sql-proxy:latest"

    docker push "firethorn/fedora:latest"
    docker push "firethorn/java:latest"
    docker push "firethorn/tomcat:latest"
    docker push "firethorn/firethorn:latest"
    docker push "firethorn/ogsadai:latest"

    docker push "firethorn/builder:latest"
    docker push "firethorn/tester:latest"
    docker push "firethorn/postgres:latest"
    docker push "firethorn/sql-tunnel:latest"
    docker push "firethorn/sql-proxy:latest"


# -------------------------------------------------------------------------------------------
# Push our artifacts to our Maven repo.
#[user@desktop]

    #
    # ONLY DO THIS IF THE TESTS PASS
    #

    #
    # ** needs SSH access to our Maven repo **
    #

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        ./bin/rsync-repo.sh

    popd

# -------------------------------------------------------------------------------------------
# Push our changes to our Mercurial repo.
#[user@desktop]

    #
    # ONLY DO THIS IF THE TESTS PASS
    #

    #
    # ** needs SSH access to our Hg repo **
    # Use SSH to clone the Hg repo in VM, before we run the build container.
    # SSH access means we can push changes back later
    #

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        hg push

    popd


