#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    #
    # This relies on mounting local files .. which doesn't work from inside builder.
    #

# -----------------------------------------------------
# Load our secret function.
#[user@desktop]
#[user@virtual]

    vi "${HOME:?}/secret.sh"

        ....

    source "${HOME:?}/secret.sh"
    secret 'ping'

# -----------------------------------------------------
# Locate our compose file.
#[user@desktop]
#[user@virtual]

    if [ -e "${HOME:?}/firethorn.settings" ]
    then

        source "${HOME:?}/firethorn.settings"
        composit="${FIRETHORN_CODE:?}/docker/compose"

    else

        composit="${HOME:?}/compose"
        mkdir -p "${composit:?}"

        wget -O "${composit:?}/sqlclient.yml" \
            'http://wfau.metagrid.co.uk/code/firethorn/raw-file/tip/docker/compose/sqlclient.yml'

    fi

# -----------------------------------------------------
# Create our sqsh config.
#[user@desktop]
#[user@virtual]

    cat > "${HOME:?}/sqsh.properties" << EOF

    sqlhost=$(secret 'sqlserver.admin.host')
    sqlpath=$(secret 'sqlserver.admin.path')

    sqldata=$(secret 'sqlserver.admin.data')
    sqluser=$(secret 'sqlserver.admin.user')
    sqlpass=$(secret 'sqlserver.admin.pass')

    basename=ZRQ$(date '+%Y%m%d%H%M%S')DEV
    metaname="FirethornMetadata\${basename:?}"
    username="FirethornUserdata\${basename:?}"

    tunneluser=$(secret 'ssh.tunnel.user')
    tunnelhost=$(secret 'ssh.tunnel.host')

EOF

# -----------------------------------------------------
# Create our output file.
#[user@desktop]
#[user@virtual]

    touch  "${HOME:?}/data.properties"
    chmod a+rw \
        "${HOME:?}/data.properties" 
    chcon -t svirt_sandbox_file_t \
        "${HOME:?}/data.properties" 

# -----------------------------------------------------
# Set the target branch
#[user@desktop]
#[user@virtual]

    # buildtag=2.1.9-zrq-bug-fixes
    buildtag=2.1.10

# -----------------------------------------------------
# Run our SQL client.
#[user@desktop]
#[user@virtual]

    source "${HOME:?}/sqsh.properties"

    export targethost=${sqlhost}
    export tunnelhost
    export tunneluser

    export buildtag
    docker-compose \
        --file "${composit:?}/sqlclient.yml" \
        run sqlclient 

        #
        # Load the SQLServer properties
        source "/sqsh.properties"

        #
        # Test connection to SQLServer
        sqsh \
            -S 'sqlproxy' \
            -U "${sqluser:?}" \
            -P "${sqlpass:?}" \
            -C "SELECT name FROM master..sysdatabases WHERE name LIKE 'Firethorn%'"
        
        #
        # Function to fill in the template values.
        sqlsed()
            {
            sed '
                s|{databasename}|'"${databasename}"'|g
                s|{databasepath}|'"${databasepath}"'|g
                s|{databaseuser}|'"${databaseuser}"'|g
                s|{databasepass}|'"${databasepass}"'|g
                s|{databaselogin}|'"${databaselogin}"'|g
                ' "${1:?}"
            }

        #
        # Set the template values
        databasehost="${sqlhost:?}"
        databaseport="1433"
        databasename="${metaname:?}"
        databasepath="${sqlpath:?}"
        databaseuser="${databasename:?}User"
        databaselogin="${databasename:?}Login"
        databasepass="${databasename:?}$(pwgen -s 8 1)"

        cat > "/data.properties" << EOF
#
# Metadata database
firethorn.meta.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.meta.host=${databasehost:?}
firethorn.meta.data=${databasename:?}
firethorn.meta.path=${databasepath:?}
firethorn.meta.user=${databaselogin:?}
firethorn.meta.pass=${databasepass:?}
EOF

        #
        # Delete our old metadata database.
        # sqlsed 'delete-user.sql'     | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        # sqlsed 'delete-login.sql'    | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        # sqlsed 'delete-database.sql' | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        #
        # Create our new metadata database.
        sqlsed 'create-database.sql' | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-login.sql'    | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-user.sql'     | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        #
        # Set the template values
        databasehost="${sqlhost:?}"
        databaseport="1433"
        databasename="${username:?}"
        databasepath="${sqlpath:?}"
        databaseuser="${databasename:?}User"
        databaselogin="${databasename:?}Login"
        databasepass="${databasename:?}$(pwgen -s 8 1)"

        cat >> "/data.properties" << EOF
#
# Userdata database
firethorn.user.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.user.host=${databasehost:?}
firethorn.user.data=${databasename:?}
firethorn.user.path=${databasepath:?}
firethorn.user.user=${databaselogin:?}
firethorn.user.pass=${databasepass:?}
EOF

        #
        # Delete our old userdata database.
        # sqlsed 'delete-user.sql'     | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        # sqlsed 'delete-login.sql'    | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        # sqlsed 'delete-database.sql' | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        #
        # Create our new userdata database (including empty table).
        sqlsed 'create-database.sql'   | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-login.sql'      | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-user.sql'       | sqsh -S 'sqlproxy' -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        #
        # List the created databases
        sqsh \
            -S 'sqlproxy' \
            -U "${sqluser:?}" \
            -P "${sqlpass:?}" \
            -C "SELECT name FROM master..sysdatabases WHERE name LIKE 'Firethorn%${basename:?}'"

    exit

# -----------------------------------------------------
# Update our secret store.
#[user@desktop]
#[user@virtual]

    cat "${HOME:?}/data.properties"

    ....


