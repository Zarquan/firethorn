#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    Development containers

        Mercurial
        Docker

        Mercurial
        Java
        Maven
        Docker

        Mercurial
        Java
        Eclipse

# -----------------------------------------------------
# Start a clean VM.
#[root@server]

    ischnura-createvm

        INFO : Node name [tau]
        INFO : Base name [fedora-21-base-20150317.qcow]
        INFO : Disc name [tau.qcow]
        INFO : Disc size [8G]

# -----------------------------------------------------
# Create our developer account.
#[root@virtual]

    useradd --create-home developer

    mkdir -p /var/local/projects
    chown -R developer /var/local/projects

# -----------------------------------------------------
# Allow access to Docker containers.
#[root@virtual]

    chcon -t svirt_sandbox_file_t "/var/local/projects" 

# -----------------------------------------------------
# Install and start the Docker daemon.
#[root@virtual]

    yum install -y docker-io
    systemctl enable docker.service
    systemctl start  docker.service

# -----------------------------------------------------
# Install the selinux-dockersock SELinux policy.
# https://github.com/dpw/selinux-dockersock
#[root@virtual]

    yum install -y git
    yum install -y make
    yum install -y checkpolicy
    yum install -y policycoreutils policycoreutils-python
    
    pushd /var/local/projects

        git clone https://github.com/dpw/selinux-dockersock

        pushd selinux-dockersock

            make dockersock.pp

            semodule -i dockersock.pp

        popd
    popd

# -----------------------------------------------------
# Run a base container.
#[root@virtual]

##
    docker run \
        -it --rm \
        --env uid=$(id -u developer) \
        --env "useruid=$(id -u developer)" \
        --env "username=developer" \
        --volume /var/local/projects:/projects \
        metagrid/notroot-fedora:21
##

#
# Get the host IP address (external)
dockerip=$(ifconfig docker0 | sed -n 's/\s*inet \(\S*\)\s*.*/\1/p')

    docker run \
        -it --rm \
        --add-host "docker:${dockerip:?}" \
        --volume /var/local/projects:/projects \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        fedora:21 \
        bash

    #
    # Install Docker client.
    yum install -y docker-io

    #
    # Install Mercurial
    yum -y install mercurial

    #
    # Install Java
    yum -y install java-1.8.0-openjdk-devel
    yum -y install java-1.8.0-openjdk-headless

    #
    # Install Maven
    mkdir /toolkits
    pushd /toolkits

        mkdir maven
        pushd maven

            current=apache-maven-3.3.1
            tarfile=${current:?}-bin.tar.gz
            
            yum -y install wget
            wget "http://apache.mirrors.tds.net/maven/maven-3/3.3.1/binaries/${tarfile:?}"

            yum -y install tar
            tar -xvzf "${tarfile:?}"
            ln -s "${current:?}" current

            mkdir repository
            chgrp users repository
            chmod g+rws repository

            #
            # Set the repository path.
            sed -n '
                s|<localRepository>.*</localRepository>|<localRepository>'$(pwd)'/repository<\/localRepository>| p
                ' current/conf/settings.xml

            #
            # Update the executable path.
cat > /etc/bashrc << EOF
#
# Apache Maven.
# http://maven.apache.org/
export M2_HOME=$(pwd)/current
export PATH=\${M2_HOME}/bin:\${PATH} 
EOF

            source /etc/bashrc

        popd
    popd

    #
    # Set the project path.
    cat > "${HOME:?}/firethorn.settings" << EOF
FIRETHORN_CODE=/projects/firethorn
EOF

    #
    # Clone our repository.
    source "${HOME:?}/firethorn.settings"
    pushd "$(dirname ${FIRETHORN_CODE:?})"

        hg clone 'http://wfau.metagrid.co.uk/code/firethorn'

        #
        # Select the target branch.
        pushd firethorn
            hg update 'default'
        popd

    popd

    #
    # Build our toolkit containers.
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        docker build \
            --tag firethorn/fedora:21 \
            docker/fedora/21

        docker build \
            --tag firethorn/java:8 \
            docker/java/8

        docker build \
            --tag firethorn/tomcat:8 \
            docker/tomcat/8

        docker build \
            --tag firethorn/postgres:9 \
            docker/postgres/9

        docker build \
            --tag firethorn/ssh-client:1 \
            docker/ssh-client

        docker build \
            --tag firethorn/ambassador:1 \
            docker/ambassador

    popd

    #
    # Tag our toolkit images.
    docker tag "firethorn/fedora:21"    "firethorn/fedora:latest"
    docker tag "firethorn/java:8"       "firethorn/java:latest"
    docker tag "firethorn/tomcat:8"     "firethorn/tomcat:latest"
    docker tag "firethorn/postgres:9"   "firethorn/postgres:latest"
    docker tag "firethorn/ssh-client:1" "firethorn/ssh-client:latest"
    docker tag "firethorn/ambassador:1" "firethorn/ambassador:latest"

    #
    # Push our toolkit images.
    docker login

        Username: xxxx
        Password: xxxx
        Email: xxxx@xxxx

    docker push "firethorn/fedora:21"
    docker push "firethorn/fedora:latest"

    docker push "firethorn/java:8"
    docker push "firethorn/java:latest"

    docker push "firethorn/tomcat:8"
    docker push "firethorn/tomcat:latest"

    docker push "firethorn/postgres:9"
    docker push "firethorn/postgres:latest"

    docker push "firethorn/ssh-client:1"
    docker push "firethorn/ssh-client:latest"

    docker push "firethorn/ambassador:1"
    docker push "firethorn/ambassador:latest"

    #
    # Build our webapp services.
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

    #
    # Build our webapp containers.
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

#
# Get the host IP address (internal)
dockerip=$(netstat -nr | grep '^0\.0\.0\.0' | awk '{print $2}')

        pushd firethorn-ogsadai/webapp

            mvn -D "docker.host=http://${dockerip}:2375/" docker:package

        popd
        
        pushd firethorn-webapp
            mvn docker:package
        popd

    popd

# -----------------------------------------------------
# Problems : Maven plugin can't reach Docker service.
# Java doesn't (yet) support unix sockets.
#[root@virtual]

    Maven plugin defaults to using 'http://localhost:2375'

    Options

    1) Modify Maven plugin to support unix sockets
    2) Expose the Docker service via a TCP socket

    2.1) Pass the host IP address as part of the run params.
        
        #
        # Get the host address.
        dockerip=$(ifconfig docker0 | sed -n 's/\s*inet \(\S*\)\s*.*/\1/p')

        #
        # Pass the name:ip to the container in the run command
        # This adds an entry to the /etc/hosts file in the container
        docker run \
            -it --rm \
            --add-host "docker:${dockerip:?}" \
            ....

            #
            # Operations inside can use 'http://docker:2375/'
            # (needs testing)

    2.2) Resolve the host IP address from inside the container.

        #
        # Get the host address.
        dockerip=$(netstat -nr | grep '^0\.0\.0\.0' | awk '{print $2}')

    2.2.a) Side issue - ping is broken in Fedora containers.

        #
        # Ping fails with 'Operation not permitted'
        # http://kb.odin.com/en/115565
        # http://www.projectatomic.io/blog/2015/04/problems-with-ping-in-containers-on-atomic-hosts/
        setcap cap_net_raw+ep /bin/ping
        setcap cap_net_raw+ep /bin/ping6

    2.2.b) Docker is only listening on 127.0.0.1.

        systemctl status docker.service

            ● docker.service - Docker Application Container Engine
               Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled)
               Active: active (running) since Sun 2015-04-05 15:42:24 BST; 5s ago
                 Docs: http://docs.docker.com
             Main PID: 4109 (docker)
               CGroup: /system.slice/docker.service
                       └─4109 /usr/bin/docker -d --selinux-enabled

        vi /usr/lib/systemd/system/docker.service 

            [Service]
            Type=notify
            EnvironmentFile=-/etc/sysconfig/docker
            EnvironmentFile=-/etc/sysconfig/docker-storage
            EnvironmentFile=-/etc/sysconfig/docker-network
            ExecStart=/usr/bin/docker -d \
                      $OPTIONS \
                      $DOCKER_STORAGE_OPTIONS \
                      $DOCKER_NETWORK_OPTIONS \
                      $INSECURE_REGISTRY

        vi /etc/sysconfig/docker-network

            # /etc/sysconfig/docker-network
        -   DOCKER_NETWORK_OPTIONS=
        +   DOCKER_NETWORK_OPTIONS=-H tcp://172.17.42.1:2375


        systemctl restart docker.service

        systemctl status docker.service

            ● docker.service - Docker Application Container Engine
               Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled)
               Active: active (running) since Sun 2015-04-05 15:39:53 BST; 1min 20s ago
                 Docs: http://docs.docker.com
             Main PID: 4045 (docker)
               CGroup: /system.slice/docker.service
                       └─4045 /usr/bin/docker -d --selinux-enabled -H tcp://172.17.42.1:2375
    
    2.2.c) We can 'ping' the docker host, but http access is blocked.

            ping "${dockerip}"

                PING 172.17.42.1 (172.17.42.1) 56(84) bytes of data.
                64 bytes from 172.17.42.1: icmp_seq=1 ttl=64 time=0.177 ms
                64 bytes from 172.17.42.1: icmp_seq=2 ttl=64 time=0.203 ms

            curl "http://${dockerip}:2375/version"

                curl: (7) Failed to connect to 172.17.42.1 port 2375: No route to host

    2.2.d) Need to learn how to manage the firewall service on Fedora

        systemctl status firewalld.service

            ● firewalld.service - firewalld - dynamic firewall daemon
               Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled)
               Active: active (running) since Sat 2015-04-04 15:00:20 BST; 24h ago
             Main PID: 412 (firewalld)
               CGroup: /system.slice/firewalld.service
                       └─412 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid

        systemctl stop firewalld.service

    2.2.e) Can't connect from the docker host either.

        dockerip=$(ifconfig docker0 | sed -n 's/\s*inet \(\S*\)\s*.*/\1/p')
        curl "http://${dockerip}:2375/version"

            curl: (7) Failed to connect to 172.17.42.1 port 2375: Connection refused

    2.2.f) At some point the error changed from "No route to host" to "Connection refused"
    
            
            








