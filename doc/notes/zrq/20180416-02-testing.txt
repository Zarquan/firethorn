#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Create a new VM.
#[user@server]

    createvm

        INFO : Node name [Araybwyn]
        INFO : Base name [fedora-27-docker-base-20180129.qcow]
        INFO : Base path [/var/lib/libvirt/images/base/fedora-27-docker-base-20180129.qcow]
        INFO : Disc name [Araybwyn.qcow]
        INFO : Disc size [16GiB]

# -----------------------------------------------------
# Login as Stevedore
#[user@server]

    ssh Araybwyn

# -----------------------------------------------------
# Add our secret function.
#[user@virtual]

    mkdir "${HOME:?}/bin"
    scp 'Zarquan@wfau.metagrid.co.uk:bin/secret' \
        "${HOME:?}/bin/secret"
    chmod u+x "${HOME:?}/bin/secret"

    secret 'frog'

# -----------------------------------------------------
# Create our chain properties.
#[user@virtual]

    cat > "${HOME:?}/chain.properties" << EOF

        buildtag=${buildtag:-latest}
        
        metauser=$(pwgen 20 1)
        metapass=$(pwgen 20 1)

        usertype=mssql
        userhost=$(secret 'firethorn.user.host')
        userdata=$(secret 'firethorn.user.data')
        useruser=$(secret 'firethorn.user.user')
        userpass=$(secret 'firethorn.user.pass')

        datatype=mssql
        datahost=$(secret 'firethorn.data.host')
        datadata=$(secret 'firethorn.data.data')
        datauser=$(secret 'firethorn.data.user')
        datapass=$(secret 'firethorn.data.pass')

        admingroup=Hyaenidae
        adminuser=Aardwolf
        adminpass=$(pwgen 20 1)

        guestgroup=Afrotheria
        guestuser=Hyrax
        guestpass=$(pwgen 20 1)

EOF

# -----------------------------------------------------
# Download our compose file.
#[user@virtual
    wget http://wfau.metagrid.co.uk/code/firethorn/raw-file/tip/docker/compose/tests/distictella/distictella-local.yml

# -----------------------------------------------------
# Link our compose config.
#[user@virtual]

    ln -sf "${HOME:?}/chain.properties" "${HOME:?}/.env"

# -----------------------------------------------------
# Run our compose set.
#[user@virtual]

    docker-compose \
        --file distictella-local.yml \
        run \
            angela

# -----------------------------------------------------
# Tail the logs in a separate window.
#[user@virtual]

    ssh Araybwyn

        sudo tail -f /logs/gillian/firethorn.log

    ssh Araybwyn

        sudo tail -f /logs/jarmila/ogsadai.log

# -----------------------------------------------------
# List the docker containers in a separate window.
#[user@virtual]

    ssh Araybwyn

        docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"

# -----------------------------------------------------
# Run our Python client.
#[user@pyclient]

import os
import time
import firethorn as ftpy

#
# Create our firethorn client.
firethorn = ftpy.Firethorn(
    os.environ.get(
        'endpoint'
        ),
    )

#
# Login using the admin account.
firethorn.login(
    os.environ.get('adminuser'),
    os.environ.get('adminpass'),
    os.environ.get('admingroup')
    )

#
# Create a JdbcResource to connect to the ATLAS database.
atlas_jdbc = firethorn.firethorn_engine.create_jdbc_resource(
    "ATLAS JDBC resource",
    os.environ.get('datadata'),
    '*',
    os.environ.get('datatype'),
    os.environ.get('datahost'),
    os.environ.get('datauser'),
    os.environ.get('datapass')
    )

print(
    atlas_jdbc
    )

#
# Create an AdqlResource to represent the JdbcResource.
atlas_adql = firethorn.firethorn_engine.create_adql_resource(
    "ATLAS ADQL resource"
    )

print(
    atlas_adql
    )

#
# Import the target JdbcSchema into AdqlSchema.
schema_names = [
    "ATLASDR1"
    ]

for schema_name in schema_names:
    print(schema_name)
    jdbc_schema = atlas_jdbc.select_schema_by_name(
        schema_name,
        "dbo"
        )
    if (None != jdbc_schema):
        metadoc="https://raw.githubusercontent.com/wfau/metadata/master/metadocs/" + schema_name + "_TablesSchema.xml"
        adql_schema = atlas_adql.import_jdbc_schema(
            jdbc_schema,
            schema_name,
            metadoc=metadoc
            )

#
# Admin user
# -------- -------- -------- --------
# Normal user
#

#
# Login using our guest account.
firethorn.login(
    os.environ.get('guestuser'),
    os.environ.get('guestpass'),
    os.environ.get('guestgroup')
    )

#
# Create a new workspace.
workspace = firethorn.firethorn_engine.create_adql_resource(
    "Query resource"
    )

#
# Import the ATLAS schemas into our workspace
for schema in atlas_adql.select_schemas():
    workspace.import_adql_schema(
        schema
        )

#
# Create and run a query.
atlas_adql = "SELECT TOP 1000 ra, dec FROM ATLASDR1.atlasSource"
query = workspace.create_query(
    atlas_adql,
    "COMPLETED",
    None,
    3000000
    )
print(
    query
    )

#
# Get the query results.
print(
    query.table()
    )
print(
    query.table().count()
    )







# -----------------------------------------------------
# Run a second set of services.
#[user@virtual]

    docker-compose \
        --project-name umbrolt \
        --file distictella-local.yml \
        run \
            angela



# -----------------------------------------------------
# Run Maria's Kafka and Zookeper.
#[user@virtual]


    git clone git@github.com:mtpatter/alert_stream.git
        
    docker-compose \
        --file "alert_stream/docker-compose.yml" \
        up -d


    docker-compose \
        --file "alert_stream/docker-compose.yml" \
        down


