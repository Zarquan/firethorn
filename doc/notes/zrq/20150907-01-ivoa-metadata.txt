#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


    doc/notes/stv/20150804-shep-deploy.txt

    devname=zrq-ivoa-meta

# -----------------------------------------------------
# Create a new development branch.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        #
        # Pull the latest changes
        hg pull
        hg update 'default'

        #
        # Create the new branch name
        source "bin/util.sh"
        devbranch="$(getversion)-${devname:?}"

        #
        # Create the new branch.
        hg branch "${devbranch:?}"

        #
        # Set the project version.
        source 'bin/util.sh'
        setversion "${devbranch:?}"

        #
        # Commit and push the new branch.
        hg commit -m "Creating [branch-${devbranch:?}]"
        hg push --new-branch

    popd


# -----------------------------------------------------
# Start our docker-proxy container.
#[user@desktop]

    docker run \
        --detach \
        --name "docker-proxy" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/docker-proxy:1

    sleep 5
    dockerip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' docker-proxy)
    
    echo "${dockerip:?}"
    curl "http://${dockerip:?}:2375/version"

# -----------------------------------------------------
# Clean build
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn -P all clean install eclipse:eclipse

    popd

# -----------------------------------------------------
# Build our webapp containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd firethorn-ogsadai/webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd
        
        pushd firethorn-webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd

    popd

# -----------------------------------------------------
# Build our tester container.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source "bin/util.sh"

        docker build \
            --tag firethorn/tester:$(getversion) \
            integration/tester

    popd

# -----------------------------------------------------
# Build our sqsh container.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source "bin/util.sh"

        docker build \
            --tag firethorn/sqsh:1.1 \
            firethorn-sqlserver/src

    popd

# -----------------------------------------------------
# Create our secret function.
#[user@desktop]

    secrethost='dave@shepseskaf.roe.ac.uk'
    secretfile='${HOME:?}/secret.store'

    secret()
        {
        local key=${1:?}
        ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/^${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
        }

    secret 'ping'

# -----------------------------------------------------
# Get our build version.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source "bin/util.sh"
        version=$(getversion)

    popd

# -----------------------------------------------------
# Create our chain config.
#[user@desktop]

    cat > "${HOME:?}/chain.properties" << EOF

    version=${version:?}
    
    metaname=bethany
    username=patricia
    dataname=elayne
    ogsaname=jarmila
    firename=gillian

    metalink=albert
    userlink=edward
    datalink=sebastien
    ogsalink=timothy
    firelink=peter

    metatype=pgsql
    metadata=postgres
    metauser=$(pwgen 20 1)
    metapass=$(pwgen 20 1)
    metadriver=org.postgresql.Driver

    usertype=mssql
    userhost=$(secret 'firethorn.user.host')
    userdata=$(secret 'firethorn.user.data')
    useruser=$(secret 'firethorn.user.user')
    userpass=$(secret 'firethorn.user.pass')
    userdriver=net.sourceforge.jtds.jdbc.Driver

    datatype=mssql
    datahost=$(secret 'firethorn.data.host')
    datadata=$(secret 'firethorn.data.data')
    datauser=$(secret 'firethorn.data.user')
    datapass=$(secret 'firethorn.data.pass')
    datadriver=net.sourceforge.jtds.jdbc.Driver

    tunneluser=$(secret 'ssh.tunnel.user')
    tunnelhost=$(secret 'ssh.tunnel.host')

EOF

    chmod a+r \
        "${HOME:?}/chain.properties" 
    chcon -t svirt_sandbox_file_t \
        "${HOME:?}/chain.properties" 

# -----------------------------------------------------
# -----------------------------------------------------
# Create our sqsh config.
#[user@desktop]


    cat > "${HOME:?}/sqsh.properties" << EOF

    sqlname=nastja
    sqllink=nerijus

    sqlhost=$(secret 'sqlserver.admin.host')
    sqlpath=$(secret 'sqlserver.admin.path')

    sqldata=$(secret 'sqlserver.admin.data')
    sqluser=$(secret 'sqlserver.admin.user')
    sqlpass=$(secret 'sqlserver.admin.pass')

    basename=ZRQ$(date '+%Y%m%d')DEV
    metaname="FirethornMetadata\${basename:?}"
    username="FirethornUserdata\${basename:?}"

EOF

# -----------------------------------------------------
# Start our SQLServer tunnel.
#[user@desktop]

    source "${HOME:?}/chain.properties"
    source "${HOME:?}/sqsh.properties"

    docker run \
        --detach \
        --interactive \
        --name "${sqlname:?}" \
        --env  "tunneluser=${tunneluser:?}" \
        --env  "tunnelhost=${tunnelhost:?}" \
        --env  "targethost=${sqlhost:?}" \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        firethorn/sql-tunnel:1

# -----------------------------------------------------
# Run our sqlsh container.
#[user@desktop]

    touch  "${HOME:?}/data.properties"
    chmod a+rw \
        "${HOME:?}/data.properties" 
    chcon -t svirt_sandbox_file_t \
        "${HOME:?}/data.properties" 

    source "${HOME:?}/chain.properties"
    source "${HOME:?}/sqsh.properties"
    
    docker run \
        --rm -it \
        --link "${sqlname:?}:${sqllink:?}" \
        --volume "${HOME:?}/chain.properties":/chain.properties \
        --volume "${HOME:?}/sqsh.properties":/sqsh.properties \
        --volume "${HOME:?}/data.properties":/data.properties \
        firethorn/sqsh:1.1 \
        bash

        #
        # Load the SQLServer properties
        source "/sqsh.properties"

        #
        # Test connection to SQLServer
        sqsh \
            -S "${sqllink:?}" \
            -U "${sqluser:?}" \
            -P "${sqlpass:?}" \
            -C "SELECT name FROM master..sysdatabases WHERE name LIKE 'Firethorn%'"
        
        #
        # Function to fill in the template values.
        sqlsed()
            {
            sed '
                s|{databasename}|'"${databasename}"'|g
                s|{databasepath}|'"${databasepath}"'|g
                s|{databaseuser}|'"${databaseuser}"'|g
                s|{databasepass}|'"${databasepass}"'|g
                s|{databaselogin}|'"${databaselogin}"'|g
                ' "${1:?}"
            }

        #
        # Set the template values
        databasehost="${sqlhost:?}"
        databaseport="1433"
        databasename="${metaname:?}"
        databasepath="${sqlpath:?}"
        databaseuser="${databasename:?}User"
        databaselogin="${databasename:?}Login"
        databasepass="${databasename:?}$(pwgen -s 8 1)"

        cat > "/data.properties" << EOF
#
# Metadata database
firethorn.meta.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.meta.host=${databasehost:?}
firethorn.meta.data=${databasename:?}
firethorn.meta.path=${databasepath:?}
firethorn.meta.user=${databaselogin:?}
firethorn.meta.pass=${databasepass:?}
EOF

        #
        # Delete our old metadata database.
        sqlsed 'delete-user.sql'     | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'delete-login.sql'    | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'delete-database.sql' | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        #
        # Create our new metadata database.
        sqlsed 'create-database.sql' | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-login.sql'    | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-user.sql'     | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        #
        # Set the template values
        databasehost="${sqlhost:?}"
        databaseport="1433"
        databasename="${username:?}"
        databasepath="${sqlpath:?}"
        databaseuser="${databasename:?}User"
        databaselogin="${databasename:?}Login"
        databasepass="${databasename:?}$(pwgen -s 8 1)"

        cat >> "/data.properties" << EOF
#
# Userdata database
firethorn.user.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.user.host=${databasehost:?}
firethorn.user.data=${databasename:?}
firethorn.user.path=${databasepath:?}
firethorn.user.user=${databaselogin:?}
firethorn.user.pass=${databasepass:?}
EOF

        #
        # Delete our old userdata database.
        sqlsed 'delete-user.sql'     | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'delete-login.sql'    | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'delete-database.sql' | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        #
        # Create our new userdata database (including empty table).
        sqlsed 'create-database.sql'   | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-login.sql'      | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-user.sql'       | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        #
        # Check the created databases
        sqsh \
            -S "${sqllink:?}" \
            -U "${sqluser:?}" \
            -P "${sqlpass:?}" \
            -C "SELECT name FROM master..sysdatabases WHERE name LIKE 'Firethorn%${basename:?}'"

# -----------------------------------------------------
# Check our database properties.
#[user@desktop]

    cat  "${HOME:?}/data.properties"

        #
        # Metadata database
        firethorn.meta.url=jdbc:jtds:sqlserver://ramses9:1433/FirethornMetadataZRQ20150909DEV
        firethorn.meta.host=xxxx
        firethorn.meta.path=xxxx
        firethorn.meta.user=xxxx
        firethorn.meta.pass=xxxx
        #
        # Userdata database
        firethorn.user.url=jdbc:jtds:sqlserver://ramses9:1433/FirethornUserdataZRQ20150909DEV
        firethorn.user.host=xxxx
        firethorn.user.path=xxxx
        firethorn.user.user=xxxx
        firethorn.user.pass=xxxx

# -----------------------------------------------------
# Update our secret function.
#[user@desktop]

    secretfile="${HOME:?}/data.properties"

    secret()
        {
        local key=${1:?}
        sed -n 's/^ *'"${key}"'=\(.*\)/\1/p' "${secretfile:?}"
        }

    secret 'firethorn.meta.host'

# -----------------------------------------------------
# Update our chain properties.
#[user@desktop]

    cat >> "${HOME:?}/chain.properties" << EOF

    usertype=mssql
    userhost=$(secret 'firethorn.user.host')
    userdata=$(secret 'firethorn.user.data')
    useruser=$(secret 'firethorn.user.user')
    userpass=$(secret 'firethorn.user.pass')
    userdriver=net.sourceforge.jtds.jdbc.Driver

EOF

    pluma "${HOME:?}/chain.properties" &

    source "${HOME:?}/chain.properties"

# -----------------------------------------------------
# -----------------------------------------------------
# Start our userdata ambassador.
#[user@desktop]

    docker run \
        --detach \
        --interactive \
        --name "${username:?}" \
        --env  "tunneluser=${tunneluser:?}" \
        --env  "tunnelhost=${tunnelhost:?}" \
        --env  "targethost=${userhost:?}" \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        firethorn/sql-tunnel:1

# -----------------------------------------------------
# Start our science data ambassador.
#[user@desktop]

    docker run \
        --detach \
        --interactive \
        --name "${dataname:?}" \
        --env  "tunneluser=${tunneluser:?}" \
        --env  "tunnelhost=${tunnelhost:?}" \
        --env  "targethost=${datahost:?}" \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        firethorn/sql-tunnel:1

# -----------------------------------------------------
# Start our PostgreSQL metadata container.
#[user@desktop]

    source "${HOME:?}/chain.properties"

    docker run \
        --detach \
        --name "${metaname:?}" \
        --env "POSTGRES_USER=${metauser:?}" \
        --env "POSTGRES_PASSWORD=${metapass:?}" \
        postgres

# -----------------------------------------------------
# Start our OGSA-DAI container.
#[user@desktop]

    docker run \
        --detach \
        --publish 8081:8080 \
        --name "${ogsaname:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        "firethorn/ogsadai:${version:?}"

# -----------------------------------------------------
# Get our container IP addresses.
#[user@desktop]

    metalink=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' ${metaname:?})
    userlink=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' ${username:?})
    datalink=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' ${dataname:?})
    ogsalink=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' ${ogsaname:?})

# -----------------------------------------------------
# Create our FireThorn config.
#[user@desktop]

    cat > "${HOME:?}/firethorn.properties" << EOF

firethorn.ogsadai.endpoint=http://${ogsalink:?}:8080/ogsadai/services

firethorn.meta.type=${metatype:?}
firethorn.meta.url=jdbc:postgresql://${metalink:?}/${metadata:?}
firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}
firethorn.meta.driver=${metadriver:?}

firethorn.user.type=${usertype:?}
firethorn.user.url=jdbc:jtds:sqlserver://${userlink:?}/${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}
firethorn.user.driver=${userdriver:?}

firethorn.atlas.type=${datatype:?}
firethorn.atlas.url=jdbc:jtds:sqlserver://${datalink:?}/${datadata:?}
firethorn.atlas.user=${datauser:?}
firethorn.atlas.pass=${datapass:?}
firethorn.atlas.driver=${datadriver:?}

EOF

    chmod a+r \
        "${HOME:?}/firethorn.properties" 
    chcon -t svirt_sandbox_file_t \
        "${HOME:?}/firethorn.properties" 

# -----------------------------------------------------
# Load the IVOA metadata.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"
        pushd firethorn-core

            mvn -D skipTests=false -D test=IvoaResourceLoaderTestCase test

        popd
    popd

    ....
    ....
    [IvoaResourceLoaderTestCase] Resource [gaia-tap][5799937] 
    [IvoaResourceLoaderTestCase]   Schema [public][5832709] 
    [IvoaResourceLoaderTestCase]   Schema [tap_schema][5832710] 
    [IvoaResourceLoaderTestCase] Resource [gavo-tap][5799938] 
    [IvoaResourceLoaderTestCase]   Schema [icecube][5832732] 
    [IvoaResourceLoaderTestCase]   Schema [tap_schema][5832758] 
    ....

# -----------------------------------------------------
# Create our OGSA-DAI resources.
#[user@desktop]

    docker exec -it "${ogsaname}" bash 

        gaiauid=gaia-tap
        gaiaurl=http://geadev.esac.esa.int/tap-dev/tap/
        
cat > webapps/ogsadai/WEB-INF/etc/dai/resources/gaia-tap << EOF
id=${gaiauid:?}
type=uk.org.ogsadai.DATA_RESOURCE
creationTime=null
terminationTime=null
PROPERTIES
END
CONFIG
dai.astro.tapurl=${gaiaurl:?}
END
ACTIVITIES
uk.org.ogsadai.SQLQuery=uk.org.ogsadai.ADQLQuery
END
dataResourceClass=uk.org.ogsadai.resource.generic.GenericResource
EOF

        gavouid=gavo-tap
        gavourl=http://dc.zah.uni-heidelberg.de/__system__/tap/run/tap

cat > webapps/ogsadai/WEB-INF/etc/dai/resources/gavo-tap << EOF
id=${gavouid:?}
type=uk.org.ogsadai.DATA_RESOURCE
creationTime=null
terminationTime=null
PROPERTIES
END
CONFIG
dai.astro.tapurl=${gavourl:?}
END
ACTIVITIES
uk.org.ogsadai.SQLQuery=uk.org.ogsadai.ADQLQuery
END
dataResourceClass=uk.org.ogsadai.resource.generic.GenericResource
EOF

    exit

# -----------------------------------------------------
# -----------------------------------------------------
# Start our FireThorn container.
#[root@virtual]

    source "${HOME:?}/chain.properties"

    docker run \
        --detach \
        --publish 8080:8080 \
        --name "${firename:?}" \
        --link "${ogsaname:?}:${ogsalink:?}" \
        --link "${metaname:?}:${metalink:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume "${HOME:?}/firethorn.properties:/etc/firethorn.properties" \
        "firethorn/firethorn:${version:?}"

    docker inspect -f '{{.NetworkSettings.IPAddress}}' ${firename:?}

# -----------------------------------------------------
# Start our test container.
#[user@desktop]

    source "${HOME:?}/chain.properties"

    docker run \
        --rm \
        --tty \
        --interactive \
        --env "datadata=${datadata:?}" \
        --env "datalink=${datalink:?}" \
        --env "datauser=${datauser:?}" \
        --env "datapass=${datapass:?}" \
        --env "datadriver=${datadriver:?}" \
        --env "endpointurl=http://${firelink:?}:8080/firethorn" \
        --link "${firename:?}:${firelink:?}" \
        "firethorn/tester:${version:?}" \
        bash

# -----------------------------------------------------
# Configure our tests.
#[root@tester]

        identity=${identity:-$(date '+%H:%M:%S')}
        community=${community:-$(date '+%A %-d %B %Y')}

        source "bin/01-01-init-rest.sh"

# -----------------------------------------------------
# Load our ATLASDR1 resource.
#[root@tester]

        database=ATLASDR1
        
        source "bin/02-02-create-jdbc-space.sh" \
            'Atlas JDBC conection' \
            "jdbc:jtds:sqlserver://${datalink:?}/${database:?}" \
            "${datauser:?}" \
            "${datapass:?}" \
            "${datadriver:?}" \
            '*'
        atlasjdbc=${jdbcspace:?}

        source "bin/03-01-create-adql-space.sh" 'ADQL workspace'
        atlasadql=${adqlspace:?}

        source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'ATLASDR1' 'dbo' "meta/ATLASDR1_AtlasSource.xml"

# -----------------------------------------------------
# Run our ATLASDR1 queries
#[root@tester]

        source "bin/04-01-create-query-space.sh" 'Test workspace'

        source "bin/04-03-import-query-schema.sh" "${atlasadql:?}" 'ATLASDR1' 'atlas'

        source "bin/04-03-create-query-schema.sh"

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                atlasSource.ra,
                atlasSource.dec
            FROM
                atlas.atlasSource
            WHERE
                atlasSource.ra  BETWEEN 354 AND 355
            AND
                atlasSource.dec BETWEEN -40 AND -39
            "

# -----------------------------------------------------
# Load our TAP resources.
#[root@tester]

    ivoaname=GACS
    ivoaschema=/ivoa/schema/5832709

	curl  \
	    --header "firethorn.auth.identity:${identity:?}" \
	    --header "firethorn.auth.community:${community:?}" \
	    --data   "urn:adql.copy.depth=${adqlcopydepth:-THIN}" \
	    --data   "adql.resource.schema.import.name=${ivoaname:?}" \
	    --data   "adql.resource.schema.import.base=${ivoaschema:?}" \
	    "${endpointurl:?}${adqlspace:?}/schemas/import" \
	    | bin/pp | tee ${ivoaname:?}-schema.json


	ivoaname=ICECUBE
	ivoaschema=/ivoa/schema/5832732

	curl  \
	    --header "firethorn.auth.identity:${identity:?}" \
	    --header "firethorn.auth.community:${community:?}" \
	    --data   "urn:adql.copy.depth=${adqlcopydepth:-THIN}" \
	    --data   "adql.resource.schema.import.name=${ivoaname:?}" \
	    --data   "adql.resource.schema.import.base=${ivoaschema:?}" \
	    "${endpointurl:?}${adqlspace:?}/schemas/import" \
	    | bin/pp | tee ${ivoaname:?}-schema.json

# -----------------------------------------------------
# Run our test queries
#[root@tester]

        source "bin/04-01-create-query-space.sh" 'Test workspace'

        source "bin/04-03-import-query-schema.sh" "${adqlspace:?}" 'GACS'    'GACS'
        source "bin/04-03-import-query-schema.sh" "${adqlspace:?}" 'ICECUBE' 'ICECUBE'

        source "bin/04-03-create-query-schema.sh"

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                nualpha,
                nudelta
            FROM
                ICECUBE.nucand
            WHERE
                nualpha BETWEEN 263.0 AND 263.9
            AND
                nudelta BETWEEN 19.0 AND 19.9
            "

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                count(*)
            FROM
                GACS.igsl_source
            WHERE
                galactic_lat BETWEEN -3.7 AND -3.6
            AND
                galactic_lon BETWEEN 27.3 AND 27.4
            "



#
# Problem - null resource for query source
2015-09-09 10:58:21,963 DEBUG [http-nio-8080-exec-1] [AdqlQueryEntity] ++ Query source [null] 

