#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


    doc/notes/stv/20150804-shep-deploy.txt

    devname=zrq-ivoa-meta

# -----------------------------------------------------
# Create a new development branch.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        #
        # Pull the latest changes
        hg pull
        hg update 'default'

        #
        # Create the new branch name
        source "bin/util.sh"
        devbranch="$(getversion)-${devname:?}"

        #
        # Create the new branch.
        hg branch "${devbranch:?}"

        #
        # Set the project version.
        source 'bin/util.sh'
        setversion "${devbranch:?}"

        #
        # Commit and push the new branch.
        hg commit -m "Creating [branch-${devbranch:?}]"
        hg push --new-branch

    popd


# -----------------------------------------------------
# Start our docker-proxy container.
#[user@desktop]

    docker run \
        --detach \
        --name "docker-proxy" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/docker-proxy:1

    sleep 5
    dockerip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' docker-proxy)
    
    echo "${dockerip:?}"
    curl "http://${dockerip:?}:2375/version"

# -----------------------------------------------------
# Clean build
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn -P all clean install eclipse:eclipse

    popd

# -----------------------------------------------------
# Build our webapp containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd firethorn-ogsadai/webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd
        
        pushd firethorn-webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd

    popd

# -----------------------------------------------------
# Build our tester container.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source "bin/util.sh"

        docker build \
            --tag firethorn/tester:$(getversion) \
            integration/tester

    popd

# -----------------------------------------------------
# Build our sqsh container.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source "bin/util.sh"

        docker build \
            --tag firethorn/sqsh:1.1 \
            firethorn-sqlserver/src

    popd

# -----------------------------------------------------
# Create our secret function.
#[user@desktop]

    secrethost='dave@shepseskaf.roe.ac.uk'
    secretfile='${HOME:?}/secret.store'

    secret()
        {
        local key=${1:?}
        ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/^${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
        }

    secret 'ping'

# -----------------------------------------------------
# Create our chain config.
#[user@desktop]

    cat > "${HOME:?}/chain.properties" << EOF

    tunneluser=$(secret 'ssh.tunnel.user')
    tunnelhost=$(secret 'ssh.tunnel.host')

EOF

    chmod a+r \
        "${HOME:?}/chain.properties" 
    chcon -t svirt_sandbox_file_t \
        "${HOME:?}/chain.properties" 

# -----------------------------------------------------
# Create our sqsh config.
#[user@desktop]

    basename=ZRQ$(date '+%Y%m%d')DEV

    cat > "${HOME:?}/sqsh.properties" << EOF

    sqlname=nastja
    sqllink=nerijus

    sqlhost=$(secret 'sqlserver.admin.host')
    sqlpath=$(secret 'sqlserver.admin.path')

    sqldata=$(secret 'sqlserver.admin.data')
    sqluser=$(secret 'sqlserver.admin.user')
    sqlpass=$(secret 'sqlserver.admin.pass')

    metaname="FirethornMetadata${basename:?}"
    username="FirethornUserdata${basename:?}"

EOF

# -----------------------------------------------------
# Start our SQLServer tunnel.
#[user@desktop]

    source "${HOME:?}/chain.properties"
    source "${HOME:?}/sqsh.properties"

    docker run \
        --detach \
        --interactive \
        --name "${sqlname:?}" \
        --env  "tunneluser=${tunneluser:?}" \
        --env  "tunnelhost=${tunnelhost:?}" \
        --env  "targethost=${sqlhost:?}" \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        firethorn/sql-tunnel:1

# -----------------------------------------------------
# Run our sqlsh container.
#[user@desktop]

    touch  "${HOME:?}/data.properties"
    chmod a+rw \
        "${HOME:?}/data.properties" 
    chcon -t svirt_sandbox_file_t \
        "${HOME:?}/data.properties" 

    source "${HOME:?}/chain.properties"
    source "${HOME:?}/sqsh.properties"
    
    docker run \
        --rm -it \
        --link "${sqlname:?}:${sqllink:?}" \
        --volume "${HOME:?}/chain.properties":/chain.properties \
        --volume "${HOME:?}/sqsh.properties":/sqsh.properties \
        --volume "${HOME:?}/data.properties":/data.properties \
        firethorn/sqsh:1.1 \
        bash

        #
        # Load the SQLServer properties
        source "/sqsh.properties"

        #
        # Test connection to SQLServer
        sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}"

            SELECT name FROM master..sysdatabases WHERE name LIKE 'Firethorn%'
            go

            exit
        
        #
        # Function to fill in the template values.
        sqlsed()
            {
            sed '
                s|{databasename}|'"${databasename}"'|g
                s|{databasepath}|'"${databasepath}"'|g
                s|{databaseuser}|'"${databaseuser}"'|g
                s|{databasepass}|'"${databasepass}"'|g
                s|{databaselogin}|'"${databaselogin}"'|g
                ' "${1:?}"
            }

        #
        # Set the template values
        databasehost="${sqlhost:?}"
        databaseport="1433"
        databasename="${metaname:?}"
        databasepath="${sqlpath:?}"
        databaseuser="${databasename:?}User"
        databaselogin="${databasename:?}Login"
        databasepass="${databasename:?}$(pwgen -s 8 1)"

        cat > "/data.properties" << EOF
#
# Metadata database
firethorn.meta.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.meta.host=${databasehost:?}
firethorn.meta.path=${databasepath:?}
firethorn.meta.user=${databaselogin:?}
firethorn.meta.pass=${databasepass:?}
EOF

        #
        # Delete our old metadata database.
        sqlsed 'delete-user.sql'     | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'delete-login.sql'    | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'delete-database.sql' | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        #
        # Create our new metadata database.
        sqlsed 'create-database.sql' | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-login.sql'    | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-user.sql'     | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        #
        # Set the template values
        databasehost="${sqshhost:?}"
        databaseport="1433"
        databasename="${userdataname:?}"
        databasepath="${sqshpath:?}"
        databaseuser="${databasename:?}User"
        databaselogin="${databasename:?}Login"
        databasepass="${databasename:?}$(pwgen -s 8 1)"

        cat >> "/data.properties" << EOF
#
# Userdata database
firethorn.user.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.user.host=${databasehost:?}
firethorn.user.path=${databasepath:?}
firethorn.user.user=${databaselogin:?}
firethorn.user.pass=${databasepass:?}
EOF

        #
        # Delete our old userdata database.
        sqlsed 'delete-user.sql'     | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'delete-login.sql'    | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'delete-database.sql' | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        #
        # Create our new userdata database (including empty table).
        sqlsed 'create-database.sql'   | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-login.sql'      | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"
        sqlsed 'create-user.sql'       | sqsh -S "${sqllink:?}" -U "${sqluser:?}" -P "${sqlpass:?}" -D "${sqldata:?}"

        cat  "/data.properties"























# -----------------------------------------------------
# Start our PostgreSQL metadata container.
#[user@desktop]

    source "${HOME:?}/chain.properties"

    docker run \
        --detach \
        --name "${metaname:?}" \
        --env "POSTGRES_USER=${metauser:?}" \
        --env "POSTGRES_PASSWORD=${metapass:?}" \
        postgres

# -----------------------------------------------------
# Start our OGSA-DAI container.
#[user@desktop]

    docker run \
        --detach \
        --publish 8081:8080 \
        --name "${ogsaname:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        "firethorn/ogsadai:${version:?}"

# -----------------------------------------------------
# Get our container IP addresses.
#[user@desktop]

    metalink=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' ${metaname:?})
    userlink=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' ${username:?})
    datalink=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' ${dataname:?})
    ogsalink=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' ${ogsaname:?})

# -----------------------------------------------------
# Create our FireThorn config.
#[user@desktop]

    source "${HOME:?}/chain.properties"

    cat > "${HOME:?}/firethorn.properties" << EOF

firethorn.ogsadai.endpoint=http://${ogsalink:?}:8080/ogsadai/services

firethorn.meta.type=${metatype:?}
firethorn.meta.url=jdbc:postgresql://${metalink:?}/${metadata:?}
firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}
firethorn.meta.driver=${metadriver:?}

firethorn.user.type=${usertype:?}
firethorn.user.url=jdbc:jtds:sqlserver://${userlink:?}/${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}
firethorn.user.driver=${userdriver:?}

firethorn.atlas.type=${datatype:?}
firethorn.atlas.url=jdbc:jtds:sqlserver://${datalink:?}/${datadata:?}
firethorn.atlas.user=${datauser:?}
firethorn.atlas.pass=${datapass:?}
firethorn.atlas.driver=${datadriver:?}

EOF

    chmod a+r \
        "${HOME:?}/firethorn.properties" 
    chcon -t svirt_sandbox_file_t \
        "${HOME:?}/firethorn.properties" 


