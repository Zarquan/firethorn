#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Create a new development branch.
#[user@desktop]

    devname=zrq-docker-devel
    
    # Copy paste instructions
    source "${HOME:?}/firethorn.settings"
    gedit  "${FIRETHORN_CODE:?}/doc/notes/zrq/20141130-01-hg-branch.txt" &

# -----------------------------------------
# Login to shep
#[user@shep]

    ssh shep

# -----------------------------------------
# Configure our path
#[user@shep]

    export PATH=${PATH}:${HOME}/projects/ischnura-kvm/src/bin

# -----------------------------------------
# Create a new VM
#[user@shep]

    createvm

        INFO : Node name [amarna]
        INFO : Base name [fedora-21-base-20150317.qcow]
        INFO : Base path [/home/dave/projects/libvirt/base/fedora-21-base-20150317.qcow]
        INFO : Disc name [amarna.qcow]
        INFO : Disc size [8G]

# -----------------------------------------
# Update known hosts.
#[user@shep]

    ....
    ....

# -----------------------------------------
# Login to the the VM
#[user@shep]

    ssh amarna

# -----------------------------------------------------
# Set our target version.
#[root@virtual]

    version=1.13.8-zrq-docker-devel

# -----------------------------------------------------
# Create our projects directory.
#[root@virtual]

    if [ ! -e /var/local/projects ]
    then
        mkdir -p /var/local/projects
        chgrp -R users /var/local/projects
        chmod -R g+rwx /var/local/projects
    fi

# -----------------------------------------------------
# Allow access to Docker containers.
#[root@virtual]

    chcon -t svirt_sandbox_file_t "/var/local/projects" 

# -----------------------------------------------------
# Install and run Docker.
#[root@virtual]

    yum -y install docker-io

    systemctl enable docker.service
    systemctl start  docker.service
    systemctl status docker.service

# -----------------------------------------------------
# Install the selinux-dockersock SELinux policy.
# https://github.com/dpw/selinux-dockersock
#[root@virtual]

    yum install -y git
    yum install -y make
    yum install -y checkpolicy
    yum install -y policycoreutils policycoreutils-python
    
    pushd /var/local/projects

        git clone https://github.com/dpw/selinux-dockersock

        pushd selinux-dockersock

            make dockersock.pp

            semodule -i dockersock.pp

        popd
    popd

# -----------------------------------------------------
# Run our build container.
#[root@virtual]

    docker run \
        -it --rm \
        --env "version=${version:?}" \
        --volume /var/local/projects:/projects \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/builder:1 \
        bash

# -----------------------------------------------------
# Update our path.
#[root@builder]

    # ** this should be in the container **
    source /etc/bashrc

# -----------------------------------------------------
# Checkout a copy of our source code.
#[root@builder]

    #
    # Set the project path.
    if [ ! -e "${HOME:?}/firethorn.settings" ]
    then
        cat > "${HOME:?}/firethorn.settings" << EOF
FIRETHORN_CODE=/projects/firethorn
EOF
    fi

    #
    # Clone our repository.
    source "${HOME:?}/firethorn.settings"
    if [ ! -e "${FIRETHORN_CODE:?}" ]
    then
        pushd "$(dirname ${FIRETHORN_CODE:?})"

            hg clone 'http://wfau.metagrid.co.uk/code/firethorn'

        popd
    fi

    #
    # Change to the development branch
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        hg pull
        hg update "${version:?}"
    
    popd

# -----------------------------------------------------
# Build our toolkit containers.
#[root@builder]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        docker build \
            --tag firethorn/fedora:21 \
            docker/fedora/21

        docker build \
            --tag firethorn/java:8 \
            docker/java/8

        docker build \
            --tag firethorn/tomcat:8 \
            docker/tomcat/8

        docker build \
            --tag firethorn/postgres:9 \
            docker/postgres/9

        docker build \
            --tag firethorn/builder:1 \
            docker/builder

        docker build \
            --tag firethorn/docker-proxy:1 \
            docker/docker-proxy

        docker build \
            --tag firethorn/sql-proxy:1 \
            docker/sql-proxy

        docker build \
            --tag firethorn/sql-tunnel:1 \
            docker/sql-tunnel

    popd

# -----------------------------------------------------
# Start our docker-proxy container.
#[root@builder]

    docker run \
        --detach \
        --name "docker-proxy" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/docker-proxy:1

    dockerip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' docker-proxy)

    echo "${dockerip:?}"
    curl "http://${dockerip:?}:2375/version"

# -----------------------------------------------------
# Build our webapp services.
#[root@builder]

    #
    # Build our webapp services.
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our webapp containers.
#[root@builder]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd firethorn-ogsadai/webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd
        
        pushd firethorn-webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd

    popd

# -----------------------------------------------------
# Build our tester container.
#[root@builder]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source "bin/util.sh"

        docker build \
            --tag firethorn/tester:$(getversion) \
            integration/tester

    popd

# -----------------------------------------------------
# Exit our builder.
#[root@builder]

    exit

# -----------------------------------------------------
# Install missing tools.
#[root@virtual]

    yum -y install pwgen

# -----------------------------------------------------
# Create our chain settings.
#[root@virtual]

    metaname=bethany
    username=patricia
    dataname=elayne
    ogsaname=jarmila
    firename=gillian

    metalink=albert
    userlink=edward
    datalink=sebastien
    ogsalink=timothy
    firelink=peter

    metadata=postgres
    metauser=$(pwgen 20 1)
    metapass=$(pwgen 20 1)

    mssqlhost=ramses2
    mssqlport=1433
    
    userdata=FirethornUserdataZRQ20150319DEV
    useruser=FirethornUserdataZRQ20150319DEVLogin
    userpass=FirethornUserdataZRQ20150319DEVKSdcr1ri
    userhost=${mssqlhost:?}
    userport=${mssqlport:?}

    datadata=ATLASDR1
    datauser=atlasro
    datapass=atlasropw
    datahost=${mssqlhost:?}
    dataport=${mssqlport:?}

# -----------------------------------------------------
# Run our userdata ambassador.
#[root@virtual]

    docker run \
        --detach \
        --name "${username:?}" \
        --env  "target=${userhost:?}" \
        firethorn/sql-proxy:1

# -----------------------------------------------------
# Run our science data ambassador.
#[root@virtual]

    docker run \
        --detach \
        --name "${dataname:?}" \
        --env  "target=${datahost:?}" \
        firethorn/sql-proxy:1

#
    docker run \
        --rm -it \
        --env  "target=${datahost:?}" \
        firethorn/sql-proxy:1 \
        bash
#
#socat "TCP-LISTEN:1433,fork,reuseaddr" "TCP:$(host -t A ${target:?} | cut -d ' ' -f 4):1433"
#

# -----------------------------------------------------
# Run our PostgreSQL metadata container.
#[root@virtual]

    docker run \
        --detach \
        --name "${metaname:?}" \
        --env "POSTGRES_USER=${metauser:?}" \
        --env "POSTGRES_PASSWORD=${metapass:?}" \
        postgres

#
# TODO use firethorn/postgres with config

# -----------------------------------------------------
# Run our OGSA-DAI container.
#[root@virtual]

    docker run \
        --detach \
        --name "${ogsaname:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        "firethorn/ogsadai:${version:?}"

# -----------------------------------------------------
# Create our FireThorn config.
#[root@virtual]

    properties=$(mktemp)
    cat > "${properties:?}" << EOF

firethorn.ogsadai.endpoint=http://${ogsalink:?}:8080/ogsadai/services

firethorn.meta.url=jdbc:postgresql://${metalink:?}/${metadata:?}
firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}
firethorn.meta.driver=org.postgresql.Driver

firethorn.user.url=jdbc:jtds:sqlserver://${userlink:?}:${userport:?}/${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}
firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver
firethorn.user.type=mssql

EOF

    chmod a+r "${properties:?}" 
    chcon -t svirt_sandbox_file_t "${properties:?}" 

# -----------------------------------------------------
# Run our FireThorn container.
#[root@virtual]

        --publish 8080:8080 \

    docker run \
        --detach \
        --expose 8080 \
        --name "${firename:?}" \
        --link "${ogsaname:?}:${ogsalink:?}" \
        --link "${metaname:?}:${metalink:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume "${properties:?}:/etc/firethorn.properties" \
        "firethorn/firethorn:${version:?}"

# -----------------------------------------------------
# Create our test config.
#[root@virtual]

    testcfg=$(mktemp)
    cat > "${testcfg:?}" << EOF

firethorn.webapp.endpoint=http://${firelink:?}:8080/firethorn

firethorn.atlas.url=jdbc:jtds:sqlserver://${datalink:?}:${dataport:?}/${datadata:?}
firethorn.atlas.name=${datadata:?}
firethorn.atlas.user=${datauser:?}
firethorn.atlas.pass=${datapass:?}
firethorn.atlas.type=mssql
firethorn.atlas.driver=net.sourceforge.jtds.jdbc.Driver

EOF

    chmod a+r "${testcfg:?}" 
    chcon -t svirt_sandbox_file_t "${testcfg:?}" 

# -----------------------------------------------------
# Run our test container.
#[root@virtual]

    docker run \
        --rm \
        --tty \
        --interactive \
        --link "${firename:?}:${firelink:?}" \
        --volume "${testcfg:?}:/root/firethorn.properties" \
        "firethorn/tester:${version:?}" \
        bash

# -----------------------------------------------------
# Run our tests.
#[root@tester]

        identity=${identity:-$(date '+%H:%M:%S')}
        community=${community:-$(date '+%A %-d %B %Y')}

        source "bin/01-01-init-rest.sh"

        databasekey='firethorn.atlas'
        databasecfg="${HOME:?}/firethorn.properties"

        databaseurl="$(sed  -n 's|^'${databasekey?}'.url=\(.*\)|\1|p'  ${databasecfg?})"
        databasetype="$(sed -n 's|^'${databasekey?}'.type=\(.*\)|\1|p' ${databasecfg?})"
        databasename="$(sed -n 's|^'${databasekey?}'.name=\(.*\)|\1|p' ${databasecfg?})"
        databaseuser="$(sed -n 's|^'${databasekey?}'.user=\(.*\)|\1|p' ${databasecfg?})"
        databasepass="$(sed -n 's|^'${databasekey?}'.pass=\(.*\)|\1|p' ${databasecfg?})"
        databasedriver="$(sed -n 's|^'${databasekey?}'.driver=\(.*\)|\1|p' ${databasecfg?})"

        source "bin/02-02-create-jdbc-space.sh" \
            'Atlas JDBC conection' \
            "${databaseurl:?}" \
            "${databaseuser:?}" \
            "${databasepass:?}" \
            "${databasedriver:?}" \
            '*'
        cat >  "${HOME:?}/firethorn.spaces" << EOF
atlasjdbc=${jdbcspace:?}
EOF

        source "bin/03-01-create-adql-space.sh" 'Atlas ADQL workspace'
        cat >> "${HOME:?}/firethorn.spaces" << EOF
atlasadql=${adqlspace:?}
EOF

        source "bin/03-04-import-jdbc-metadoc.sh" "${jdbcspace:?}" "${adqlspace:?}" 'ATLASDR1' 'dbo' "meta/ATLASDR1_AtlasSource.xml"
        cat >> "${HOME:?}/firethorn.spaces" << EOF
atlaspublic=${adqlschema:?}
EOF

        source "bin/03-04-import-jdbc-metadoc.sh" "${jdbcspace:?}" "${adqlspace:?}" 'TWOMASS'  'dbo' "meta/TWOMASS_TwomassPsc.xml"
        cat >> "${HOME:?}/firethorn.spaces" << EOF
twomasspublic=${adqlschema:?}
EOF

        source "${HOME:?}/firethorn.spaces"

        source "bin/04-01-create-query-space.sh" 'Test workspace'

        source "bin/04-03-import-query-schema.sh" "${atlasadql:?}" 'ATLASDR1' 'atlas'

        source "bin/04-03-create-query-schema.sh"

        source "bin/05-03-execute-query.sh" \
            "DIRECT" \
            "
            SELECT
                ra,
                dec
            FROM
                atlas.atlasSource
            WHERE
                ra  BETWEEN '56.0' AND '57.9'
            AND
                dec BETWEEN '24.0' AND '24.2'
            "

        source "bin/05-03-execute-query.sh" \
            "DISTRIBUTED" \
            "
            SELECT
                ra,
                dec
            FROM
                atlas.atlasSource
            WHERE
                ra  BETWEEN '56.0' AND '57.9'
            AND
                dec BETWEEN '24.0' AND '24.2'
            "














    docker run \
        --detach \
        --name "sql-test" \
        --env target=ramses2 \
        firethorn/sql-proxy:1

    docker run \
        --detach \
        --name "sql-test" \
        --env target=ramses2 \
        firethorn/sql-proxy:1

