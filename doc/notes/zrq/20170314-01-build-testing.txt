#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2017, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Create a new VM.
#[user@trop02]

    createvm

        INFO : Node name [Lothigometh]
        INFO : Base name [fedora-24-docker-32G-20170113.qcow]
        INFO : Base path [/var/lib/libvirt/images/base/fedora-24-docker-32G-20170113.qcow]
        INFO : Disc name [Lothigometh.qcow]
        INFO : Disc size [32GiB]

# -----------------------------------------------------
# Remove old version of compose.
#[root@virtual]

    dnf -y remove docker-compose

# -----------------------------------------------------
# Install latest version of compose.
#[root@virtual]

    curl -L https://github.com/docker/compose/releases/download/1.11.1/docker-compose-`uname -s`-`uname -m` > /usr/bin/docker-compose
    chmod +x /usr/bin/docker-compose

# -----------------------------------------------------
# Get our compose file.
#[root@virtual]

    wget -O deployer.yml \
        https://tinyurl.com/firethorn-deployer

    wget -O deployer.yml \
        http://wfau.metagrid.co.uk/code/firethorn/raw-file/939b1b0d53ff/docker/compose/deployer.yml

# -----------------------------------------------------
# Load our secret function.
#[root@builder]

    vi ${HOME:?}/secret.sh

        ....

    source ${HOME:?}/secret.sh
    secret 'ping'

# -----------------------------------------------------
# Create our deployer env file.
#[user@virtual] 

    cat > ".env" << EOF
    
    metatype=pgsql
    metadata=postgres
    metauser=$(pwgen 20 1)
    metapass=$(pwgen 20 1)
    metadriver=org.postgresql.Driver

    usertype=mssql
    userhost=$(secret 'firethorn.user.host')
    userdata=$(secret 'firethorn.user.data')
    useruser=$(secret 'firethorn.user.user')
    userpass=$(secret 'firethorn.user.pass')
    userdriver=net.sourceforge.jtds.jdbc.Driver

    datatype=mssql
    datahost=$(secret 'firethorn.data.host')
    datadata=$(secret 'firethorn.data.data')
    datauser=$(secret 'firethorn.data.user')
    datapass=$(secret 'firethorn.data.pass')
    datadriver=net.sourceforge.jtds.jdbc.Driver

EOF

# -----------------------------------------------------
# Run our deployer, with dependencies.
#[root@builder]

    export buildtag=2.1.5

    export buildtag=2.1.6-zrq-bug-fixes
    docker-compose \
        --file deployer.yml \
        run deployer 

# -----------------------------------------------------
# Load our script tools.
#[root@tester]

        #source "bin/01-01-init.sh"

# -----------------------------------------------------
# Configure our identity.
#[root@tester]

        identity=${identity:-$(date '+%H:%M:%S')}
        community=${community:-$(date '+%A %-d %B %Y')}

# -----------------------------------------------------
# Check the system info.
#[root@tester]

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            "${endpointurl:?}/system/info" \
            | jq '.' | tee /tmp/system-info.json

# -----------------------------------------------------
# Create a JdbcResource to represent the local JDBC database.
#[root@tester]

        jdbcname="ATLAS JDBC resource"
        jdbcurl="jdbc:jtds:sqlserver://${dataname:?}/ATLASDR1"

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "urn:jdbc.copy.depth=FULL" \
            --data   "jdbc.resource.name=${jdbcname:?}" \
            --data   "jdbc.connection.url=${jdbcurl:?}" \
            --data   "jdbc.connection.user=${datauser:?}" \
            --data   "jdbc.connection.pass=${datapass:?}" \
            --data   "jdbc.connection.driver=${datadriver:?}" \
            --data   "jdbc.resource.catalog=ATLASDR1" \
            "${endpointurl:?}/jdbc/resource/create" \
            | jq '.' | tee /tmp/atlas-jdbc.json

        atlasjdbc=$(
            jq -r '.self' /tmp/atlas-jdbc.json
            )

        echo "Atlas JDBC [${atlasjdbc:?}]"

# -----------------------------------------------------
# Create an empty AdqlResource to represent the local JDBC database.
#[root@tester]

        adqlname="ATLAS ADQL resource"

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "urn:adql.copy.depth=FULL" \
            --data   "adql.resource.create.name=${adqlname:?}" \
            "${endpointurl:?}/adql/resource/create" \
            | jq '.' | tee /tmp/atlas-adql.json

        atlasadql=$(
            jq -r '.self' /tmp/atlas-adql.json
            )

        echo "Atlas ADQL [${atlasadql:?}]"

# -----------------------------------------------------
# Locate the JdbcSchema based on catalog and schema name.
#[root@tester]

        catalog="ATLASDR1"
        schema="dbo"
        
        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "jdbc.resource.schema.select.catalog=${catalog:?}" \
            --data   "jdbc.resource.schema.select.schema=${schema:?}" \
            "${atlasjdbc:?}/schemas/select" \
            | jq '.' | tee /tmp/jdbc-schema.json

        jdbcschema=$(
            jq -r '.self' /tmp/jdbc-schema.json
            )

        echo "JDBC schema [${jdbcschema:?}]"

# -----------------------------------------------------
# Import the mapping between JDBC and ADQL tables.
#[root@tester]

        metadoc="meta/ATLASDR1_TablesSchema.xml"

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --form   "urn:schema.metadoc.base=${jdbcschema:?}"   \
            --form   "urn:schema.metadoc.file=@${metadoc:?}" \
            "${atlasadql:?}/metadoc/import" \
            | jq '.' | tee /tmp/adql-schema.json

        adqlschema=$(
            jq -r '.[].self' /tmp/adql-schema.json
            )

        echo "ADQL schema [${adqlschema:?}]"

# --------------------------------------
# Create an IvoaResource to represent the GAIA TAP resource.
#[root@tester]

        tapname="GAIA TAP service"
        tapurl="http://gea.esac.esa.int/tap-server/tap"

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "ivoa.resource.name=${tapname}" \
            --data   "ivoa.resource.endpoint=${tapurl:?}" \
            "${endpointurl:?}/ivoa/resource/create" \
            | jq '.' | tee /tmp/gaia-ivoa.json

        gaiaivoa=$(
            jq -r '.self' /tmp/gaia-ivoa.json
            )

        echo "Gaia IVOA [${gaiaivoa:?}]"

# --------------------------------------
# Import the VOSI metadata.
#[root@tester]

        vosifile='vosi/gaia/gaia-tableset.xml'

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --form   "vosi.tableset=@${vosifile:?}" \
            "${gaiaivoa:?}/vosi/import" \
            | jq '.'



# -----------------------------------------------------
# -----------------------------------------------------
# Create a new ADQL resource to act as a workspace.
#[root@tester]

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "urn:adql.copy.depth=FULL" \
            "${endpointurl:?}/adql/resource/create" \
            | jq '.' | tee /tmp/query-space.json

        queryspace=$(
            jq -r '.self' /tmp/query-space.json
            )

        echo "Query space [${queryspace:?}]"

# -----------------------------------------------------
# Find the AtlasDR1 schema by name.
#[root@tester]

        atlasfind=ATLASDR1

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}" \
            --header "firethorn.auth.community:${community:?}" \
            --data   "adql.resource.schema.select.name=${atlasfind:?}" \
            "${atlasadql:?}/schemas/select" \
            | jq '.' | tee /tmp/atlas-schema.json

        atlasschema=$(
            jq '.self' /tmp/atlas-schema.json
            )

        echo "Atlas schema [${atlasschema:?}]"

# -----------------------------------------------------
# Add the Atlas DR1 schema.
#[root@tester]

        atlasname=ATLASDR1

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "urn:adql.copy.depth=THIN" \
            --data   "adql.resource.schema.import.name=${atlasname:?}" \
            --data   "adql.resource.schema.import.base=${atlasschema:?}" \
            "${queryspace:?}/schemas/import" \
            | jq '.'


# --------------------------------------
# Find the Gaia DR1 schema by name.
#[root@tester]

        gaiafind=gaiadr1

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "ivoa.resource.schema.name=${gaiafind:?}" \
            "${gaiaivoa:?}/schemas/select" \
            | jq '.' | tee /tmp/gaia-schema.json

        gaiaschema=$(
            jq -r '.self' /tmp/gaia-schema.json
            )

        echo "Gaia schema [${gaiaschema:?}]"

# -----------------------------------------------------
# Add the Gaia DR1 schema.
#[root@tester]

        gaianame=GAIADR1

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "urn:adql.copy.depth=THIN" \
            --data   "adql.resource.schema.import.name=${gaianame:?}" \
            --data   "adql.resource.schema.import.base=${gaiaschema:?}" \
            "${queryspace:?}/schemas/import" \
            | jq '.'

# -----------------------------------------------------
# List the workspace schema.
#[root@tester]

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            "${queryspace:?}/schemas/select" \
            | jq '.'

# -----------------------------------------------------
# Query the local JDBC database.
#[root@tester]

cat > /tmp/atlas-query.adql << EOF
    SELECT
        COUNT(sourceID),
        (ROUND( ra/10, 0) * 10) AS rablock,
        (ROUND(dec/10, 0) * 10) AS decblock
    FROM
        ATLASDR1.atlasSource
    WHERE
        sourceID <> 0
    GROUP BY
        (ROUND( ra/10, 0) * 10),
        (ROUND(dec/10, 0) * 10)
    ORDER BY
        rablock,
        decblock
EOF


cat > /tmp/atlas-query.adql << EOF
SELECT
    COUNT(*),
    ROUND(gAperMag3, 0) AS gAper,
    ROUND(iAperMag3, 0) AS iAper
FROM
    ATLASDR1.atlasSource
WHERE
    gAperMag3 <> 0
GROUP BY
    ROUND(gAperMag3, 0),
    ROUND(iAperMag3, 0)
ORDER BY
    gAper,
    iAper
EOF


        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data-urlencode "adql.query.input@/tmp/atlas-query.adql" \
            --data "adql.query.status.next=COMPLETED" \
            --data "adql.query.wait.time=600000" \
            "${queryspace:?}/queries/create" \
            | jq '.' | tee /tmp/atlas-query.json

# -----------------------------------------------------
# Get the results as a VOTable.
#[root@tester]

        curl --silent $(
            jq -r '.results.formats.votable' "/tmp/atlas-query.json"
            ) \
            | xmllint --format - \
            | tee /tmp/atlas-data.xml


# -----------------------------------------------------
# Query the remote TAP service.
#[root@tester]

cat > /tmp/gaia-query.adql << EOF
SELECT
    source_id
FROM
    GAIADR1.tgas_source AS tgas
WHERE
    tgas.parallax > (10.0 * tgas.parallax_error)
   
EOF

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data-urlencode "adql.query.input@/tmp/gaia-query.adql" \
            --data "adql.query.status.next=COMPLETED" \
            --data "adql.query.wait.time=600000" \
            "${queryspace:?}/queries/create" \
            | jq '.' | tee /tmp/gaia-query.json

# -----------------------------------------------------
# Get the results as a VOTable.
#[root@tester]

        curl --silent $(
            jq -r '.results.formats.votable' "/tmp/gaia-query.json"
            ) \
            | xmllint --format - \
            | tee /tmp/gaia-data.xml

# -----------------------------------------------------
# -----------------------------------------------------
# JOIN query on both resources ...
#[root@tester]

atlasSource.sourceID
atlasSource.ra
atlasSourceXGDR1gaia_source
atlasSourceXGDR1tgas_source



