#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Start a clean VM.
#[root@server]

    ischnura-createvm

        INFO : Node name [tau]
        INFO : Base name [fedora-21-base-20150317.qcow]
        INFO : Disc name [tau.qcow]
        INFO : Disc size [8G]

# -----------------------------------------------------
# Create our developer account.
#[root@virtual]

    useradd --create-home developer

    mkdir -p /var/local/projects
    chown -R developer:users /var/local/projects

# -----------------------------------------------------
# Allow access to Docker containers.
#[root@virtual]

    chcon -t svirt_sandbox_file_t "/var/local/projects" 

# -----------------------------------------------------
# Install and start the Docker daemon.
#[root@virtual]

    yum install -y docker-io

    systemctl enable docker.service
    systemctl start  docker.service
    systemctl status docker.service

        ● docker.service - Docker Application Container Engine
           Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled)
           Active: active (running) since Sun 2015-04-05 16:14:01 BST; 9s ago
             Docs: http://docs.docker.com
         Main PID: 22094 (docker)
           CGroup: /system.slice/docker.service
                   └─22094 /usr/bin/docker -d --selinux-enabled

    #
    # Allow tcp access from the container network. 
    # Docker service needs to be running to create the docker0 interface.
    dockerip=$(ifconfig docker0 | sed -n 's/\s*inet \(\S*\)\s*.*/\1/p')

    unixsoc="unix:///var/run/docker.sock"
    httpsoc="tcp://${dockerip:?}:2375"

    pushd /etc/sysconfig/
        #cp docker-network docker-network.bak
        sed -i '
            s|^DOCKER_NETWORK_OPTIONS=.*|DOCKER_NETWORK_OPTIONS=-H '"${unixsoc}"' -H '"${httpsoc}"'|
            ' docker-network
    popd

    systemctl restart docker.service
    systemctl status  docker.service

        ● docker.service - Docker Application Container Engine
           Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled)
           Active: active (running) since Sun 2015-04-05 16:38:05 BST; 14ms ago
             Docs: http://docs.docker.com
         Main PID: 22651 (docker)
           CGroup: /system.slice/docker.service
                   └─22651 /usr/bin/docker -d --selinux-enabled -H unix:///var/run/docker.sock -H tcp://172.17.42.1:2375

# -----------------------------------------------------
# Install the selinux-dockersock SELinux policy.
# https://github.com/dpw/selinux-dockersock
#[root@virtual]

    yum install -y git
    yum install -y make
    yum install -y checkpolicy
    yum install -y policycoreutils policycoreutils-python
    
    pushd /var/local/projects

        git clone https://github.com/dpw/selinux-dockersock

        pushd selinux-dockersock

            make dockersock.pp

            semodule -i dockersock.pp

        popd
    popd

# -----------------------------------------------------
# Run a base container.
#[root@virtual]

    dockerip=$(ifconfig docker0 | sed -n 's/\s*inet \(\S*\)\s*.*/\1/p')

    docker run \
        -it --rm \
        --add-host "docker:${dockerip:?}" \
        --volume /var/local/projects:/projects \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        fedora:21 \
        bash

    #
    # Install Docker client.
    yum install -y docker-io

    #
    # Install Mercurial
    yum -y install mercurial

    #
    # Install Java
    yum -y install java-1.8.0-openjdk-devel
    yum -y install java-1.8.0-openjdk-headless

    #
    # Install Maven
    mkdir /toolkits
    pushd /toolkits

        mkdir maven
        pushd maven

            current=apache-maven-3.3.1
            tarfile=${current:?}-bin.tar.gz
            
            yum -y install wget
            wget "http://apache.mirrors.tds.net/maven/maven-3/3.3.1/binaries/${tarfile:?}"

            yum -y install tar
            tar -xvzf "${tarfile:?}"
            ln -s "${current:?}" current

            mkdir repository
            chgrp users repository
            chmod g+rws repository

            #
            # Set the repository path.
            sed -n '
                s|<localRepository>.*</localRepository>|<localRepository>'$(pwd)'/repository<\/localRepository>| p
                ' current/conf/settings.xml

            #
            # Update the executable path.
cat > /etc/bashrc << EOF
#
# Apache Maven.
# http://maven.apache.org/
export M2_HOME=$(pwd)/current
export PATH=\${M2_HOME}/bin:\${PATH} 
EOF

            source /etc/bashrc

        popd
    popd

    #
    # Set the project path.
    cat > "${HOME:?}/firethorn.settings" << EOF
FIRETHORN_CODE=/projects/firethorn
EOF

    #
    # Clone our repository.
    source "${HOME:?}/firethorn.settings"
    pushd "$(dirname ${FIRETHORN_CODE:?})"

        hg clone 'http://wfau.metagrid.co.uk/code/firethorn'

        #
        # Select the target branch.
        pushd firethorn
            hg update 'default'
        popd

    popd

    #
    # Build our toolkit containers.
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        docker build \
            --tag firethorn/fedora:21 \
            docker/fedora/21

        docker build \
            --tag firethorn/java:8 \
            docker/java/8

        docker build \
            --tag firethorn/tomcat:8 \
            docker/tomcat/8

        docker build \
            --tag firethorn/postgres:9 \
            docker/postgres/9

        docker build \
            --tag firethorn/ssh-client:1 \
            docker/ssh-client

        docker build \
            --tag firethorn/ambassador:1 \
            docker/ambassador

    popd

    #
    # Tag our toolkit images.
    docker tag "firethorn/fedora:21"    "firethorn/fedora:latest"
    docker tag "firethorn/java:8"       "firethorn/java:latest"
    docker tag "firethorn/tomcat:8"     "firethorn/tomcat:latest"
    docker tag "firethorn/postgres:9"   "firethorn/postgres:latest"
    docker tag "firethorn/ssh-client:1" "firethorn/ssh-client:latest"
    docker tag "firethorn/ambassador:1" "firethorn/ambassador:latest"

    #
    # Push our toolkit images.
    docker login

        Username: xxxx
        Password: xxxx
        Email: xxxx@xxxx

    docker push "firethorn/fedora:21"
    docker push "firethorn/fedora:latest"

    docker push "firethorn/java:8"
    docker push "firethorn/java:latest"

    docker push "firethorn/tomcat:8"
    docker push "firethorn/tomcat:latest"

    docker push "firethorn/postgres:9"
    docker push "firethorn/postgres:latest"

    docker push "firethorn/ssh-client:1"
    docker push "firethorn/ssh-client:latest"

    docker push "firethorn/ambassador:1"
    docker push "firethorn/ambassador:latest"

    #
    # Build our webapp services.
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

    #
    # Build our webapp containers.
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd firethorn-ogsadai/webapp

            mvn -D "docker.host=http://docker:2375/" docker:package

        popd
        
        pushd firethorn-webapp
            mvn docker:package
        popd

    popd

# -----------------------------------------------------
# Problems : Maven plugin can't reach Docker service.
# Java doesn't (yet) support unix sockets.
#[root@virtual]

    Maven plugin defaults to using 'http://localhost:2375'

    Options

    1) Modify Maven plugin to support unix sockets
    2) Expose the Docker service via a TCP socket

    2.1) Pass the host IP address as part of the run params.
        
        #
        # Get the host address.
        dockerip=$(ifconfig docker0 | sed -n 's/\s*inet \(\S*\)\s*.*/\1/p')

        #
        # Pass the name:ip to the container in the run command
        # This adds an entry to the /etc/hosts file in the container
        docker run \
            -it --rm \
            --add-host "docker:${dockerip:?}" \
            ....

            #
            # Operations inside can use 'http://docker:2375/'
            # (needs testing)

    2.2) Resolve the host IP address from inside the container.

        #
        # Get the host address.
        yum install -y net-tools
        dockerip=$(netstat -nr | grep '^0\.0\.0\.0' | awk '{print $2}')

    2.2.a) Side issue - ping is broken in Fedora containers.

        yum -y install iputils

        ping docker
        ping "${dockerip:?}"

            bash: /usr/bin/ping: Operation not permitted

        #
        # Ping fails with 'Operation not permitted'
        # http://kb.odin.com/en/115565
        # http://www.projectatomic.io/blog/2015/04/problems-with-ping-in-containers-on-atomic-hosts/
        setcap cap_net_raw+ep /bin/ping
        setcap cap_net_raw+ep /bin/ping6


        ping docker

            PING docker (172.17.42.1) 56(84) bytes of data.
            64 bytes from docker (172.17.42.1): icmp_seq=1 ttl=64 time=0.764 ms
            64 bytes from docker (172.17.42.1): icmp_seq=2 ttl=64 time=0.151 ms

        ping "${dockerip:?}"

            PING 172.17.42.1 (172.17.42.1) 56(84) bytes of data.
            64 bytes from 172.17.42.1: icmp_seq=1 ttl=64 time=0.262 ms
            64 bytes from 172.17.42.1: icmp_seq=2 ttl=64 time=0.151 ms

    
    2.2.c) We can 'ping' the docker host, but http access is blocked.

            curl 'http://docker:2375/version'

                curl: (7) Failed to connect to docker port 2375: No route to host

            curl "http://${dockerip}:2375/version"

                curl: (7) Failed to connect to 172.17.42.1 port 2375: No route to host

    2.2.d) We *can* connect from the docker host.

        dockerip=$(ifconfig docker0 | sed -n 's/\s*inet \(\S*\)\s*.*/\1/p')

        curl "http://${dockerip}:2375/version"

            {
            "ApiVersion":"1.17",
            "Arch":"amd64",
            "GitCommit":"a8a31ef/1.5.0",
            "GoVersion":"go1.3.3",
            "KernelVersion":"3.17.4-301.fc21.x86_64",
            "Os":"linux",
            "Version":"1.5.0"
            }

    2.2.e) Firewall ?

        systemctl status firewalld.service

            ● firewalld.service - firewalld - dynamic firewall daemon
               Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled)
               Active: active (running) since Sun 2015-04-05 16:05:51 BST; 1h 54min ago
             Main PID: 413 (firewalld)
               CGroup: /system.slice/firewalld.service
                       └─413 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid

        systemctl stop firewalld.service
            
    2.2.f) TCP access works from inside container :-)

        curl "http://docker:2375/version"
        curl "http://${dockerip}:2375/version"

            {
            "ApiVersion":"1.17",
            "Arch":"amd64",
            "GitCommit":"a8a31ef/1.5.0",
            "GoVersion":"go1.3.3",
            "KernelVersion":"3.17.4-301.fc21.x86_64",
            "Os":"linux",
            "Version":"1.5.0"
            }

    2.2.g) External access is broken
        Docker uses firewall rules to implement the container network ..
        
        curl 'http://data.metagrid.co.uk/'

            curl: (6) Could not resolve host: data.metagrid.co.uk

        docker firewall rules are not persistent         
        firewalld needs to be running when docker service is started
        stopping and re-starting firewall looses the rules added by docker

    2.2.h) What about a docker proxy ?

        Volume mount of the unix socket, exposed as a tcp socket

        docker run \
            --detach \
            --name "docker-proxy" \
            --expose 2375 \
            --env "DOCKER_PORT_2375_TCP=unix-connect:/var/run/docker.sock" \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            svendowideit/ambassador

        docker inspect -f '{{.NetworkSettings.IPAddress}}' docker-proxy

            172.17.0.2

        curl 'http://172.17.0.2:2375/version'

            curl: (7) Failed to connect to 172.17.0.2 port 2375: Connection refused

    2.2.i) svendowideit/ambassador only supports TCP

        https://registry.hub.docker.com/u/svendowideit/ambassador/
        https://github.com/SvenDowideit/dockerfiles/blob/master/ambassador/Dockerfile

    2.2.j) Create our own ...

    2.2.j.a) Can't find an easy to use busybox container ..
        
        docker pull docker-ut

            Pulling repository docker-ut
            e9aa60c60128: Error pulling image (latest) from docker-ut, image ID 'e9aa60c60128cad1' is invalid 
            FATA[0004] Error pulling image (latest) from docker-ut, image ID 'e9aa60c60128cad1' is invalid 
        
    2.2.j.b) Revert to using Fedora

        docker run \
            --rm -it \
            --name "docker-proxy" \
            --expose 2375 \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            firethorn/fedora \
            bash

            yum -y install socat

            socat TCP-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock

        docker inspect -f '{{.NetworkSettings.IPAddress}}' docker-proxy

            172.17.0.2

        curl --head 'http://172.17.0.2:2375/version'

            {....}

        docker run \
            --rm -it \
            --link 'docker-proxy:docker-proxy' \
            firethorn/fedora \
            bash

        curl 'http://docker-proxy:2375/version'

            {....}

    2.2.k) Create a Dockerfile

        FROM firethorn/fedora:21
        MAINTAINER Dave Morris <docker-admin@metagrid.co.uk>

        RUN yum -y install socat

        CMD socat TCP-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock

