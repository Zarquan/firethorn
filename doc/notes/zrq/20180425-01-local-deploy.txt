#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Fetch the current build name.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source bin/util.sh
        export buildtag=$(getversion)

    popd

# -----------------------------------------------------
# Create our chain properties.
#[user@desktop]

    source "${HOME:?}/secret.sh"
    
    cat > "${HOME:?}/chain.properties" << EOF

        buildtag=${buildtag:?}

        metauser=$(pwgen 20 1)
        metapass=$(pwgen 20 1)

        userhost=$(secret 'firethorn.user.host')
        userdata=$(secret 'firethorn.user.data')
        useruser=$(secret 'firethorn.user.user')
        userpass=$(secret 'firethorn.user.pass')

        datahost=$(secret 'firethorn.data.host')
        datadata=$(secret 'firethorn.data.data')
        datauser=$(secret 'firethorn.data.user')
        datapass=$(secret 'firethorn.data.pass')

        tunneluser=$(secret 'ssh.tunnel.user')
        tunnelhost=$(secret 'ssh.tunnel.host')

        admingroup=Hyaenidae
        adminuser=Aardwolf
        adminpass=$(pwgen 20 1)

        guestgroup=Aardvark

        tapschemauser=$(pwgen 20 1)
        tapschemapass=$(pwgen 20 1)

EOF

# -----------------------------------------------------
# Link our chain properties as our compose env file.
#[user@desktop]

    ln -fs "${HOME:?}/chain.properties" "${HOME:?}/.env"

# -----------------------------------------------------
# Build our Docker images.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        docker-compose \
            --file docker/compose/images.yml \
            build

    popd

#---------------------------------------------------------------------
# Compile our Java code.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our Java containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)
        pushd firethorn-ogsadai/webapp
            mvn docker:package
        popd

        export buildtag=$(hg branch)
        pushd firethorn-webapp
            mvn docker:package
        popd

    popd

# -----------------------------------------------------
# Set the compose file path.
#[user@desktop]

    compose="${FIRETHORN_CODE:?}/docker/compose"

# -----------------------------------------------------
# Run our tester.
#[user@desktop]

    docker-compose \
        --file "${compose:?}/tests/baryptera/baryptera.yml" \
        run \
            tester

# -----------------------------------------------------
# -----------------------------------------------------
# Create our sed functions.
#[root@tester]

        skip-headers()
            {
            sed '
                /^HTTP\/1.1 100/,/^\r$/ {
                    d
                    }
                '
            }

        split-headers()
            {
            sed '
                /^HTTP\/1.1 [0-9]\{3\}/,/^\r$/ {
                    /^\r$/ !{
                        w /tmp/response-headers.txt
                        d
                        }
                    }
                '
            }

        get-httpcode()
            {
            sed -n '
                s/\(^HTTP.*\) \r/\1/p
                ' /tmp/response-headers.txt
            }

        get-username()
            {
            sed -n '
                s/^firethorn.auth.username: \(.*\)\r/\1/p
                ' /tmp/response-headers.txt
            }

        get-group()
            {
            sed -n '
                s/^firethorn.auth.community: \(.*\)\r/\1/p
                ' /tmp/response-headers.txt
            }

        print-headers()
            {
            echo "----"
            echo "HTTP code [$(get-httpcode)]"
            echo "Community [$(get-group)]"
            echo "Username  [$(get-username)]"
            echo "----"
            }

# -----------------------------------------------------
# -----------------------------------------------------
# Make a HEAD request to check admin account works.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --header "firethorn.auth.community:${admingroup:?}" \
            "${endpointurl:?}/system/info" \
            | split-headers

        print-headers

# -----------------------------------------------------
# Make a HEAD request to get a guest username.
#[root@deployer]

        curl \
            --head \
            --silent \
            "${endpointurl:?}/system/info" \
            | split-headers

        guestuser=$(get-username)

        print-headers

# -----------------------------------------------------
# Make a HEAD request to choose our test username.
#[root@deployer]

        testuser=$(pwgen 20 1)@example.com
        testpass=$(pwgen 20 1)

        curl \
            --head \
            --silent \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            "${endpointurl:?}/system/info" \
            | split-headers

        testgroup=$(get-group)

        print-headers

# -----------------------------------------------------
# Get the system status.
#[root@deployer]

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            "${endpointurl:?}/system/info" \
            | split-headers \
            | jq '.' | tee /tmp/system-info.json

        print-headers

# -----------------------------------------------------
# -----------------------------------------------------
# Create the Atlas JdbcResource as admin user.
#[root@deployer]

        name="ATLAS JDBC resource"
        catalog="ATLASDR1"

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --header "firethorn.auth.community:${admingroup:?}" \
            --data   "jdbc.resource.name=${name:?}" \
            --data   "jdbc.resource.connection.type=${datatype:?}" \
            --data   "jdbc.resource.connection.host=${datahost:?}" \
            --data   "jdbc.resource.connection.user=${datauser:?}" \
            --data   "jdbc.resource.connection.pass=${datapass:?}" \
            --data   "jdbc.resource.connection.catalog=${catalog:?}" \
            --data   "jdbc.resource.connection.database=${datadata:?}" \
            "${endpointurl:?}/jdbc/resource/create" \
            | split-headers \
            | jq '.' | tee /tmp/atlas-jdbc.json

        print-headers

# -----------------------------------------------------
# Extract the JdbcResource URL.
#[root@deployer]

        atlasjdbc=$(
            jq -r '.url' /tmp/atlas-jdbc.json
            )

        echo "Atlas JDBC [${atlasjdbc:?}]"

# -----------------------------------------------------
# Create an empty AdqlResource to represent the local JDBC database.
#[root@deployer]

        name="ATLAS ADQL resource"

        curl \
            --silent \
            --include \
            --header "firethorn.auth.community:${admingroup:?}" \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --data   "adql.resource.name=${name:?}" \
            "${endpointurl:?}/adql/resource/create" \
            | split-headers \
            | jq '.' | tee /tmp/atlas-adql.json

        print-headers

# -----------------------------------------------------
# Extract the AdqlResource URL.
#[root@deployer]

        atlasadql=$(
            jq -r '.url' /tmp/atlas-adql.json
            )

        echo "Atlas ADQL [${atlasadql:?}]"

# -----------------------------------------------------
# Locate the JdbcSchema based on catalog and schema name.
#[root@deployer]

        catalog="ATLASDR1"
        schema="dbo"
        
        curl \
            --silent \
            --include \
            --header "firethorn.auth.community:${admingroup:?}" \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --data   "jdbc.schema.catalog=${catalog:?}" \
            --data   "jdbc.schema.schema=${schema:?}" \
            "${atlasjdbc:?}/schemas/select" \
            | split-headers \
            | jq '.' | tee /tmp/jdbc-schema.json

        print-headers

# -----------------------------------------------------
# Extract the JdbcSchema URL.
#[root@deployer]

        jdbcschema=$(
            jq -r '.url' /tmp/jdbc-schema.json
            )

        echo "JDBC schema [${jdbcschema:?}]"

# -----------------------------------------------------
# Import the mapping between JDBC and ADQL tables.
#[root@deployer]

        metadoc="ATLASDR1_TablesSchema.xml"
        wget "https://raw.githubusercontent.com/wfau/metadata/master/metadocs/${metadoc:?}"

        curl \
            --silent \
            --include \
            --header "firethorn.auth.community:${admingroup:?}" \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --form   "metadoc.base=${jdbcschema:?}" \
            --form   "metadoc.file=@${metadoc:?}" \
            "${atlasadql:?}/metadoc/import" \
            | skip-headers | split-headers \
            | jq '.' | tee /tmp/adql-schema.json

# -----------------------------------------------------
# Extract the AdqlSchema URL.
#[root@tester]

        adqlschema=$(
            jq -r '.[].url' /tmp/adql-schema.json
            )

        echo "ADQL schema [${adqlschema:?}]"

# -----------------------------------------------------
# -----------------------------------------------------
# List the top level ADQL resources.
#[root@tester]

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            "${endpointurl:?}/adql/resource/select" \
            | split-headers \
            | jq '.' | tee /tmp/adql-list.json

        print-headers

# -----------------------------------------------------
# Get the Atlas ADQL resource from the list.
#[root@tester]

    match='^ATLAS ADQL'

    atlasadql=$(
        jq -r "
            [
            .[] |
            if (.name | test(\"${match:?}\"))
            then
                .
            else
                empty
            end
            ] |
            .[0].url
            " /tmp/adql-list.json
            )

# -----------------------------------------------------
# Query the Atlas database.
#[root@tester]

cat > /tmp/atlas-query.adql << EOF

        SELECT
            COUNT(sourceID),
            (ROUND( ra/10, 0) * 10) AS rablock,
            (ROUND(dec/10, 0) * 10) AS decblock
        FROM
            ATLASDR1.atlasSource
        WHERE
            sourceID <> 0
        GROUP BY
            (ROUND( ra/10, 0) * 10),
            (ROUND(dec/10, 0) * 10)
        ORDER BY
            rablock,
            decblock

EOF

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            --data-urlencode "adql.query.input@/tmp/atlas-query.adql" \
            --data "adql.query.status.next=COMPLETED" \
            --data "adql.query.wait.time=600000" \
            "${atlasadql:?}/queries/create" \
            | split-headers \
            | jq '.' | tee /tmp/atlas-query.json

        print-headers

# -----------------------------------------------------
# Get the results as a VOTable.
#[root@tester]

        votableurl=$(
            jq -r '.results.formats.votable' "/tmp/atlas-query.json"
            )

        curl \
            --silent \
            ${votableurl:?} \
            | xmllint --format - \
            | tee /tmp/atlas-data.xml


# -----------------------------------------------------
# -----------------------------------------------------
# Create a TAP_SCHEMA table for the ADQL resource.
#[root@tester]

        ident=$(
            jq -r '.ident' /tmp/atlas-adql.json
            )

        curl \
            --silent \
            --include \
            --header "firethorn.auth.community:${admingroup:?}" \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            "${endpointurl:?}/tap/${ident:?}/generateTapSchema" \
            | split-headers

        print-headers

# -----------------------------------------------------
# List the AdqlResource schema.
#[root@tester]

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            "${atlasadql:?}/schemas/select" \
            | split-headers \
            | jq '.'

        print-headers

# -----------------------------------------------------
# Find the TAP_SCHEMA schema.
#[root@tester]

        selector=TAP_SCHEMA

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            --data   "adql.schema.name=${selector:?}" \
            "${atlasadql:?}/schemas/select" \
            | split-headers \
            | jq '.' | tee /tmp/tap-schema.json

        print-headers

# -----------------------------------------------------
# List the TAP_SCHEMA tables.
#[root@tester]

        tapschema=$(
            jq -r '.url' /tmp/tap-schema.json
            )

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            "${tapschema:?}/tables/select" \
            | split-headers \
            | jq '.'

        print-headers

# -----------------------------------------------------
# Query a TAP_SCHEMA table.
#[root@tester]

cat > /tmp/tapcolumns-query.adql << EOF

        SELECT
            *
        FROM
            TAP_SCHEMA.columns

EOF

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            --data-urlencode "adql.query.input@/tmp/tapcolumns-query.adql" \
            --data "adql.query.status.next=COMPLETED" \
            --data "adql.query.wait.time=600000" \
            "${atlasadql:?}/queries/create" \
            | split-headers \
            | jq '.' | tee /tmp/tapcolumns-query.json

        print-headers

# -----------------------------------------------------
# Get the results as a VOTable.
#[root@tester]

        votableurl=$(
            jq -r '.results.formats.votable' "/tmp/tapcolumns-query.json"
            )

        curl \
            --silent \
            ${votableurl:?} \
            | xmllint --format - \
            | tee /tmp/atlas-data.xml

# -----------------------------------------------------
# -----------------------------------------------------
# Create a new AdqlResource to act as a workspace.
#[root@tester]

        name="Query workspace"

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            --data   "adql.resource.name=${name:?}" \
            "${endpointurl:?}/adql/resource/create" \
            | split-headers \
            | jq '.' | tee /tmp/query-space.json

        print-headers

# -----------------------------------------------------
# Get the workspace URL.
#[root@deployer]

        queryspace=$(
            jq -r '.url' /tmp/query-space.json
            )

        echo "Query space [${queryspace:?}]"

# -----------------------------------------------------
# Find the Atlas AdqlSchema by name.
#[root@tester]

        selector=ATLASDR1

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            --data   "adql.schema.name=${selector:?}" \
            "${atlasadql:?}/schemas/select" \
            | split-headers \
            | jq '.' | tee /tmp/atlas-schema.json

        print-headers

# -----------------------------------------------------
# Get the Atlas AdqlSchema URL.
#[root@deployer]

        atlasschema=$(
            jq -r '.self' /tmp/atlas-schema.json
            )

        echo "Atlas schema [${atlasschema:?}]"

# -----------------------------------------------------
# Add the Atlas AdqlSchema to our workspace.
#[root@tester]

        name=ATLASDR1
        base=${atlasschema}
        
        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            --data   "adql.schema.name=${name:?}" \
            --data   "adql.schema.base=${base:?}" \
            "${queryspace:?}/schemas/import" \
            | split-headers \
            | jq '.'

        print-headers

# -----------------------------------------------------
# List our workspace schema.
#[root@tester]

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            "${queryspace:?}/schemas/select" \
            | split-headers \
            | jq '.'

        print-headers

# -----------------------------------------------------
# Create a TAP_SCHEMA table for our workspace.
#[root@tester]

        ident=$(
            jq -r '.ident' /tmp/query-space.json
            )

        curl \
            --silent \
            --include \
            --header "firethorn.auth.community:${admingroup:?}" \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            "${endpointurl:?}/tap/${ident:?}/generateTapSchema" \
            | split-headers

        print-headers

# -----------------------------------------------------
# Find the TAP_SCHEMA schema.
#[root@tester]

        selector=TAP_SCHEMA

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            --data   "adql.schema.name=${selector:?}" \
            "${queryspace:?}/schemas/select" \
            | split-headers \
            | jq '.' | tee /tmp/tap-schema.json

        print-headers

# -----------------------------------------------------
# List the TAP_SCHEMA tables.
#[root@tester]

        tapschema=$(
            jq -r '.url' /tmp/tap-schema.json
            )

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            "${tapschema:?}/tables/select" \
            | split-headers \
            | jq '.'

        print-headers

# -----------------------------------------------------
# Query a TAP_SCHEMA table.
#[root@tester]

cat > /tmp/tapcolumns-query.adql << EOF

        SELECT
            *
        FROM
            TAP_SCHEMA.columns

EOF

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            --data-urlencode "adql.query.input@/tmp/tapcolumns-query.adql" \
            --data "adql.query.status.next=COMPLETED" \
            --data "adql.query.wait.time=600000" \
            "${queryspace:?}/queries/create" \
            | split-headers \
            | jq '.' | tee /tmp/tapcolumns-query.json

        print-headers

# -----------------------------------------------------
# Get the results as a VOTable.
#[root@tester]

        votableurl=$(
            jq -r '.results.formats.votable' "/tmp/tapcolumns-query.json"
            )

        curl \
            --silent \
            ${votableurl:?} \
            | xmllint --format - \
            | tee /tmp/atlas-data.xml


