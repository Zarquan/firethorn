#
#
# Copyright (c) 2013, ROE (http://www.roe.ac.uk/)
# All rights reserved.
#
# This information is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This information is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

# -------------------------------------------------------------
# Testing with PostgreSQL databases ....
#

    #
    # 
    mkdir /etc/firethorn

    #
    # Settings for the postgres admin account.
    cat > /etc/firethorn/postgres.conf << EOF
    type=pgsql
    host=localhost
    name=postgres
    user=postgres
    pass=$(pwgen -s 40 1)
    EOF

    #
    # Settings for the metadata database.
    cat > /etc/firethorn/metadata.conf << EOF
    type=pgsql
    host=localhost
    name=metadata
    user=$(pwgen -0 10 1)
    pass=$(pwgen -s 40 1)
    EOF

    #
    # Settings for the userdata database.
    cat > /etc/firethorn/userdata.conf << EOF
    type=pgsql
    host=localhost
    name=userdata
    user=$(pwgen -0 10 1)
    pass=$(pwgen -s 40 1)
    EOF

    #
    # Settings for the testdata database.
    cat > /etc/firethorn/testdata.conf << EOF
    type=pgsql
    host=localhost
    name=testdata
    user=$(pwgen -0 10 1)
    pass=$(pwgen -s 40 1)
    EOF

    #
    # Set the postgres admin password.
    pgadminpass="$(sed -n 's/^pass=\(.*\)/\1/p' /etc/firethorn/postgres.conf)"
    pgadminuser="$(sed -n 's/^user=\(.*\)/\1/p' /etc/firethorn/postgres.conf)"
    echo "ALTER ROLE ${pgadminuser?} WITH PASSWORD '${pgadminpass?}'" | su - postgres -c 'psql postgres'

    echo "localhost:*:postgres:${pgadminuser?}:${pgadminpass?}" > ${HOME?}/.pgpass
    chmod u=rw,o=,g= ${HOME?}/.pgpass

    #
    # Check we can login as admin.
    psql postgres postgres --command 'SELECT version()'

    
# ----------------- -----------------

    #
    # Create our local pgpass file.
    rm    ${HOME?}/.pgpass
    touch ${HOME?}/.pgpass
    chmod u=rw,g=,o= ${HOME?}/.pgpass

    for conf in $(ls /etc/firethorn/*.conf)
    do

        databasehost="$(sed -n 's/^host=\(.*\)/\1/p' ${conf?})"
        databasename="$(sed -n 's/^name=\(.*\)/\1/p' ${conf?})"
        databaseuser="$(sed -n 's/^user=\(.*\)/\1/p' ${conf?})"
        databasepass="$(sed -n 's/^pass=\(.*\)/\1/p' ${conf?})"

        echo ""
        echo "Config [${conf?}]"
        echo "  name [${databasename?}]"
        echo "  user [${databaseuser?}]"

        echo "${databasehost?}:*:${databasename?}:${databaseuser?}:${databasepass?}" >> ${HOME?}/.pgpass

    done

    #
    # Create our userdata accounts and databases.
    for conf in $(ls /etc/firethorn/*.conf)
    do

        databasehost="$(sed -n 's/^host=\(.*\)/\1/p' ${conf?})"
        databasename="$(sed -n 's/^name=\(.*\)/\1/p' ${conf?})"
        databaseuser="$(sed -n 's/^user=\(.*\)/\1/p' ${conf?})"
        databasepass="$(sed -n 's/^pass=\(.*\)/\1/p' ${conf?})"

        echo ""
        echo "Config [${conf?}]"
        echo "  name [${databasename?}]"
        echo "  user [${databaseuser?}]"

        if [ "${databasename?}" != 'postgres' ]
        then
    
            psql postgres postgres --command "DROP DATABASE IF EXISTS ${databasename?}"
            psql postgres postgres --command "DROP ROLE     IF EXISTS ${databaseuser?}"

            psql postgres postgres --command "CREATE USER     ${databaseuser?} WITH LOGIN PASSWORD '${databasepass?}'"
            psql postgres postgres --command "CREATE DATABASE ${databasename?} WITH OWNER ${databaseuser?}"

        fi
    done

    #
    # Update our firethorn settings.
    # TODO - change to using our own Spring config class
    for conf in $(ls /etc/firethorn/*.conf)
    do

        databasehost="$(sed -n 's/^host=\(.*\)/\1/p' ${conf?})"
        databasename="$(sed -n 's/^name=\(.*\)/\1/p' ${conf?})"
        databaseuser="$(sed -n 's/^user=\(.*\)/\1/p' ${conf?})"
        databasepass="$(sed -n 's/^pass=\(.*\)/\1/p' ${conf?})"
        databaseprop="$(sed -n 's/^prop=\(.*\)/\1/p' ${conf?})"
        databasejdbc="jdbc:postgresql://${databasehost?}/${databasename?}"

        echo ""
        echo "Config [${conf?}]"
        echo "  prop [${databaseprop?}]"
        echo "  name [${databasename?}]"
        echo "  user [${databaseuser?}]"
        echo "  jdbc [${databasejdbc?}]"

        if [ "${databasename?}" != 'postgres' ]
        then

            sed -i '
                s|^'${databaseprop?}'\.url.*|'${databaseprop?}'.url='${databasejdbc?}'|
                s|^'${databaseprop?}'\.user.*|'${databaseprop?}'.user='${databaseuser?}'|
                s|^'${databaseprop?}'\.pass.*|'${databaseprop?}'.pass='${databasepass?}'|
                '  "${HOME?}/firethorn.properties"

            grep "${databaseprop?}" "${HOME?}/firethorn.properties"

        fi
    done

# ----------------- -----------------
#

cat > "${FIRETHORN_CONF?}/livetwomass.conf" << 'EOF'
type=mssql
host=localhost
name=TWOMASS
user=xxxx
pass=xxxx
EOF

cat > "${FIRETHORN_CONF?}/livetwoxmm.conf" << 'EOF'
type=mssql
host=localhost
name=TWOXMM
user=xxxx
pass=xxxx
EOF

cat > "${FIRETHORN_CONF?}/liveukidss.conf" << 'EOF'
type=mssql
host=localhost
name=UKIDSSDR5PLUS
user=xxxx
pass=xxxx
EOF

cat > "${FIRETHORN_CONF?}/liveuwfau.conf" << 'EOF'
type=mssql
host=localhost
name=WFAU
user=xxxx
pass=xxxx
EOF

# ----------------- -----------------
#

    #
    # Swap to using the postgres databases.
    vi "${HOME?}/firethorn.properties"

        #
        # FireThorn service config.
        firethorn.metadata.src=spring:PgsqlMetaData
        firethorn.userdata.src=spring:PgsqlUserData
        firethorn.testdata.src=spring:PgsqlTestData

# ----------------- -----------------


    #
    # Drop script ...

    DROP TABLE adqlcolumnentity          CASCADE ;
    DROP TABLE adqlqueryentity           CASCADE ;
    DROP TABLE adqlqueryjoinadqlcolumn   CASCADE ;
    DROP TABLE adqlqueryjoinbaseresource CASCADE ;
    DROP TABLE adqlresourceentity        CASCADE ;
    DROP TABLE adqlschemaentity          CASCADE ;
    DROP TABLE adqltableentity           CASCADE ;
    DROP TABLE basecolumnentity          CASCADE ;
    DROP TABLE baseresourceentity        CASCADE ;
    DROP TABLE baseschemaentity          CASCADE ;
    DROP TABLE basetableentity           CASCADE ;
    DROP TABLE config_property           CASCADE ;
    DROP TABLE identityentity            CASCADE ;
    DROP TABLE ivoacolumnentity          CASCADE ;
    DROP TABLE ivoaresourceentity        CASCADE ;
    DROP TABLE ivoaschemaentity          CASCADE ;
    DROP TABLE ivoatableentity           CASCADE ;
    DROP TABLE jdbccolumnentity          CASCADE ;
    DROP TABLE jdbcresourceentity        CASCADE ;
    DROP TABLE jdbcschemaentity          CASCADE ;
    DROP TABLE jdbctableentity           CASCADE ;
    DROP TABLE jobentity                 CASCADE ;

    DROP SEQUENCE hibernate_sequence     CASCADE ;



    #
    # Can't have a field called 'limit'
    2013-04-12 19:34:23,719 DEBUG [localhost-startStop-1] [SchemaUpdate] create table TestJobEntity (length int4 not null, limit int4, ident int8 not null, primary key (ident)) 
    2013-04-12 19:34:23,724 ERROR [localhost-startStop-1] [SchemaUpdate] HHH000388: Unsuccessful: create table TestJobEntity (length int4 not null, limit int4, ident int8 not null, primary key (ident)) 
    2013-04-12 19:34:23,724 ERROR [localhost-startStop-1] [SchemaUpdate] ERROR: syntax error at or near "limit"

    #
    # Need to have at least one table in userdata.
    # Liquibase config ... ?

    #
    # Maven hosted HsqlDB..
    
    #
    # Need to make table names 'safe'.

    #
    # Name of the default schema name is platform dependant.

    #
    # Config settings for user data catalog and schema.

    #
    # Need to changed CreateTableAction into CheckTableAction.
    # Compare actual TupleMeta with guess generated from query.
    # Fail query or modify table .... 

# -------------------------------------------------------------
# Testing with HSQLDB databases ....
#





