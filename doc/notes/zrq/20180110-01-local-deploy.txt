#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2017, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Build our Docker images.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)

        docker-compose \
            --file docker/compose/images.yml \
            build

    popd

#---------------------------------------------------------------------
# Compile our Java code.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our Java containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)
        pushd firethorn-ogsadai/webapp
            mvn docker:package
        popd

        export buildtag=$(hg branch)
        pushd firethorn-webapp
            mvn docker:package
        popd

    popd

# -----------------------------------------------------
# Fetch the current builldtag.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export hgbranch=$(hg branch)
        export buildtag=$(hg branch)

    popd

# -----------------------------------------------------
# Create our chain properties.
#[user@virtual]

    cat > "${HOME:?}/chain.properties" << EOF

metadata=postgres
metauser=$(pwgen 20 1)
metapass=$(pwgen 20 1)

userhost=$(secret 'firethorn.user.host')
userdata=$(secret 'firethorn.user.data')
useruser=$(secret 'firethorn.user.user')
userpass=$(secret 'firethorn.user.pass')

datahost=$(secret 'firethorn.data.host')
datadata=$(secret 'firethorn.data.data')
datauser=$(secret 'firethorn.data.user')
datapass=$(secret 'firethorn.data.pass')

tunneluser=$(secret 'ssh.tunnel.user')
tunnelhost=$(secret 'ssh.tunnel.host')

admingroup=wombles
adminuser=orinoco
adminpass=wombleden

guestgroup=friends

EOF

# -----------------------------------------------------
# Create our Firethorn properties.
#[user@virtual]

    source "${HOME:?}/chain.properties"
    cat > "${HOME:?}/firethorn.properties" << EOF

        firethorn.meta.type=pgsql
        firethorn.meta.driver=org.postgresql.Driver
        firethorn.meta.host=bethany
        firethorn.meta.url=jdbc:postgresql://bethany/${metadata}
        firethorn.meta.data=postgres

        firethorn.meta.user=${metauser:?}
        firethorn.meta.pass=${metapass:?}

        firethorn.user.type=mssql
        firethorn.user.url=jdbc:jtds:sqlserver://patricia/${userdata}
        firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver

        firethorn.user.host=patricia
        firethorn.user.data=${userdata:?}
        firethorn.user.user=${useruser:?}
        firethorn.user.pass=${userpass:?}

        firethorn.admin.community=${admingroup:?}
        firethorn.admin.user.name=${adminuser:?}
        firethorn.admin.user.pass=${adminpass:?}

        firethorn.guest.community=${guestgroup:?}

EOF

    chmod a+r "${HOME:?}/firethorn.properties"
    chcon -t svirt_sandbox_file_t "${HOME:?}/firethorn.properties"

# -----------------------------------------------------
# Create our tester properties.
#[user@virtual]

    source "${HOME:?}/chain.properties"
    cat > "${HOME:?}/tester.properties" << EOF

        datahost=elayne
        datadata=${datadata:?}
        datauser=${datauser:?}
        datapass=${datapass:?}
        datadriver=net.sourceforge.jtds.jdbc.Driver

        admingroup=${admingroup:?}
        adminuser=${adminuser:?}
        adminpass=${adminpass:?}

        guestgroup=${guestgroup:?}

EOF

    chmod a+r "${HOME:?}/tester.properties"
    chcon -t svirt_sandbox_file_t "${HOME:?}/tester.properties"

# -----------------------------------------------------
# Create our compose env file.
#[user@virtual]

    source "${HOME:?}/chain.properties"
    cat > "${HOME:?}/.env" << EOF

buildtag=${hgbranch:?}

metadata=postgres
metauser=${metauser:?}
metapass=${metapass:?}

userhost=${userhost:?}

datahost=${datahost:?}

tunneluser=${tunneluser:?}
tunnelhost=${tunnelhost:?}

EOF

# -----------------------------------------------------
# Set the compose file path.
#[user@virtual]

    compose="${FIRETHORN_CODE:?}/docker/compose"

# -----------------------------------------------------
# Shutdown our tester.
#[user@virtual]

    docker-compose \
        --file "${compose:?}/tester.yml" \
        down

#---------------------------------------------------------------------
# Compile our Java code.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our container.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)
        pushd firethorn-webapp
            mvn docker:package
        popd

    popd

# -----------------------------------------------------
# Run our tester.
#[user@virtual]

    docker-compose \
        --file "${compose:?}/tester.yml" \
        run \
            tester

# -----------------------------------------------------
# Load our configuration.
#[root@tester]

        cat /etc/tester.properties

        source /etc/tester.properties

# -----------------------------------------------------
# Create our sed functions.
#[root@tester]

httpcode()
    {
    sed -n 's/\(^HTTP.*\) \r/\1/p' /tmp/system-headers.txt
    }

username()
    {
    sed -n 's/^firethorn.auth.username: \(.*\)\r/\1/p' /tmp/system-headers.txt
    }

commname()
    {
    sed -n 's/^firethorn.auth.community: \(.*\)\r/\1/p' /tmp/system-headers.txt
    }

headers()
    {
    echo "----"
    echo "HTTP code [$(httpcode)]"
    echo "Community [$(commname)]"
    echo "Username  [$(username)]"
    echo "----"
    }

# -----------------------------------------------------
# Make a HEAD request to check admin username.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --header "firethorn.auth.community:${admingroup:?}" \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        headers

# -----------------------------------------------------
# Make a HEAD request to get anon username.
#[root@deployer]

        curl \
            --head \
            --silent \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        guestuser=$(username)

        headers

# -----------------------------------------------------
# Check no community works.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.username:${guestuser:?}" \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        headers

# -----------------------------------------------------
# Check no passsword works.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.username:${guestuser:?}" \
            --header "firethorn.auth.community:${guestgroup:?}" \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        headers

# -----------------------------------------------------
# Check null passsword works.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.password:" \
            --header "firethorn.auth.username:${guestuser:?}" \
            --header "firethorn.auth.community:${guestgroup:?}" \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        headers

# -----------------------------------------------------
# Check wrong passsword FAILS.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.password:xxxx" \
            --header "firethorn.auth.username:${guestuser:?}" \
            --header "firethorn.auth.community:${guestgroup:?}" \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        headers

# -----------------------------------------------------
# Make a HEAD request to choose our username.
#[root@deployer]

        testuser=$(pwgen 8 1)@example.com
        testpass=$(pwgen 20 1)

        curl \
            --head \
            --silent \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        headers

# -----------------------------------------------------
# Check no community works.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        headers

# -----------------------------------------------------
# Check no passsword fails.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.username:${testuser:?}" \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        headers

# -----------------------------------------------------
# Check null passsword fails.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.password:" \
            --header "firethorn.auth.username:${testuser:?}" \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        headers

# -----------------------------------------------------
# Check wrong passsword fails.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.password:xxxx" \
            --header "firethorn.auth.username:${testuser:?}" \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        headers

# -----------------------------------------------------
# Check right passsword works.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.password:${testpass:?}" \
            --header "firethorn.auth.username:${testuser:?}" \
            "${endpointurl:?}/system/info" \
            | tee /tmp/system-headers.txt

        headers

# -----------------------------------------------------
# Get the system status.
#[root@deployer]

        curl \
            --silent \
            --header "firethorn.auth.password:${testpass:?}" \
            --header "firethorn.auth.username:${testuser:?}" \
            "${endpointurl:?}/system/info" \
            | jq '.' | tee /tmp/system-info.json
































# -----------------------------------------------------
# Create a JdbcResource to represent the local JDBC database.
#[root@deployer]

        jdbcname="ATLAS JDBC resource"
        jdbcurl="jdbc:jtds:sqlserver://${dataname:?}/ATLASDR1"

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "jdbc.resource.name=${jdbcname:?}" \
            --data   "jdbc.connection.url=${jdbcurl:?}" \
            --data   "jdbc.connection.user=${datauser:?}" \
            --data   "jdbc.connection.pass=${datapass:?}" \
            --data   "jdbc.connection.driver=${datadriver:?}" \
            --data   "jdbc.resource.catalog=ATLASDR1" \
            "${endpointurl:?}/jdbc/resource/create" \
            | jq '.' | tee /tmp/atlas-jdbc.json

        atlasjdbc=$(
            jq -r '.self' /tmp/atlas-jdbc.json
            )

        echo "Atlas JDBC [${atlasjdbc:?}]"

        curl \
            --silent \
            ${atlasjdbc:?} \
            | jq '.'

# -----------------------------------------------------
# Create an empty AdqlResource to represent the local JDBC database.
#[root@deployer]

        adqlname="ATLAS ADQL resource"

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "adql.resource.name=${adqlname:?}" \
            "${endpointurl:?}/adql/resource/create" \
            | jq '.' | tee /tmp/atlas-adql.json

        atlasadql=$(
            jq -r '.self' /tmp/atlas-adql.json
            )

        echo "Atlas ADQL [${atlasadql:?}]"

        curl \
            --silent \
            ${atlasadql:?} \
            | jq '.'

# -----------------------------------------------------
# Locate the JdbcSchema based on catalog and schema name.
#[root@deployer]

        catalog="ATLASDR1"
        schema="dbo"
        
        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "jdbc.schema.catalog=${catalog:?}" \
            --data   "jdbc.schema.schema=${schema:?}" \
            "${atlasjdbc:?}/schemas/select" \
            | jq '.' | tee /tmp/jdbc-schema.json

        jdbcschema=$(
            jq -r '.self' /tmp/jdbc-schema.json
            )

        echo "JDBC schema [${jdbcschema:?}]"

        curl \
            --silent \
            ${jdbcschema:?} \
            | jq '.'

# -----------------------------------------------------
# Import the mapping between JDBC and ADQL tables.
#[root@deployer]

        metadoc="meta/ATLASDR1_TablesSchema.xml"

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --form   "metadoc.base=${jdbcschema:?}" \
            --form   "metadoc.file=@${metadoc:?}" \
            "${atlasadql:?}/metadoc/import" \
            | jq '.' | tee /tmp/adql-schema.json

        adqlschema=$(
            jq -r '.[].self' /tmp/adql-schema.json
            )

        echo "ADQL schema [${adqlschema:?}]"

        curl \
            --silent \
            ${adqlschema:?} \
            | jq '.'

# --------------------------------------
# Create an IvoaResource to represent the GAIA TAP resource.
#[root@deployer]

        tapname="GAIA TAP service"
        tapurl="http://gea.esac.esa.int/tap-server/tap"

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "ivoa.resource.name=${tapname}" \
            --data   "ivoa.resource.endpoint=${tapurl:?}" \
            "${endpointurl:?}/ivoa/resource/create" \
            | jq '.' | tee /tmp/gaia-ivoa.json

        gaiaivoa=$(
            jq -r '.self' /tmp/gaia-ivoa.json
            )

        echo "Gaia IVOA [${gaiaivoa:?}]"

        curl \
            --silent \
            ${gaiaivoa:?} \
            | jq '.'

# --------------------------------------
# Import the VOSI metadata.
#[root@deployer]

        vosifile='vosi/gaia/gaia-tableset.xml'

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --form   "vosi.tableset=@${vosifile:?}" \
            "${gaiaivoa:?}/vosi/import" \
            | jq '.'

# -----------------------------------------------------
# Create an empty AdqlResource to represent the gaia TAP resource.
#[root@deployer]

        adqlname="Gaia ADQL resource"

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "adql.resource.name=${adqlname:?}" \
            "${endpointurl:?}/adql/resource/create" \
            | jq '.' | tee /tmp/gaia-adql.json

        gaiaadql=$(
            jq -r '.self' /tmp/gaia-adql.json
            )

        echo "Gaia ADQL [${gaiaadql:?}]"

        curl \
            --silent \
            ${gaiaadql:?} \
            | jq '.'

# --------------------------------------
# Find the Gaia DR1 schema by name.
#[root@deployer]

        selector=gaiadr1

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "ivoa.schema.name=${selector:?}" \
            "${gaiaivoa:?}/schemas/select" \
            | jq '.' | tee /tmp/gaia-schema.json

        gaiaschema=$(
            jq -r '.self' /tmp/gaia-schema.json
            )

        echo "Gaia schema [${gaiaschema:?}]"

        curl \
            --silent \
            ${gaiaschema:?} \
            | jq '.'

# -----------------------------------------------------
# Add the Gaia DR1 schema.
#[root@deployer]

        name=GAIADR1
        base=${gaiaschema}

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data   "adql.schema.name=${name:?}" \
            --data   "adql.schema.base=${base:?}" \
            "${gaiaadql:?}/schemas/import" \
            | jq '.'

# -----------------------------------------------------
# Exit from the deployer
#[root@deployer]

    exit

# -----------------------------------------------------
# Run our tester.
#[user@virtual]

    docker-compose \
        --file "deployer.yml" \
        run \
            tester


# -----------------------------------------------------
# -----------------------------------------------------
# List the top level ADQL resources.
#[root@tester]

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            "${endpointurl:?}/adql/resource/select" \
            | jq '.' | tee /tmp/adql-list.json


# -----------------------------------------------------
# Find the Atlas ADQL resource.
#[root@tester]

    match='^ATLAS ADQL'

    atlasadql=$(
        jq -r "
            [
            .[] |
            if (.name | test(\"${match:?}\"))
            then
                .
            else
                empty
            end
            ] |
            .[0].self
            " /tmp/adql-list.json
            )


# -----------------------------------------------------
# Find the Gaia ADQL resource.
#[root@tester]

    match='^Gaia ADQL'

    gaiaadql=$(
        jq -r "
            [
            .[] |
            if (.name | test(\"${match:?}\"))
            then
                .
            else
                empty
            end
            ] |
            .[0].self
            " /tmp/adql-list.json
            )

# -----------------------------------------------------
# Query the Atlas database.
#[root@tester]

cat > /tmp/atlas-query.adql << EOF
    SELECT
        COUNT(sourceID),
        (ROUND( ra/10, 0) * 10) AS rablock,
        (ROUND(dec/10, 0) * 10) AS decblock
    FROM
        ATLASDR1.atlasSource
    WHERE
        sourceID <> 0
    GROUP BY
        (ROUND( ra/10, 0) * 10),
        (ROUND(dec/10, 0) * 10)
    ORDER BY
        rablock,
        decblock
EOF

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data-urlencode "adql.query.input@/tmp/atlas-query.adql" \
            --data "adql.query.status.next=COMPLETED" \
            --data "adql.query.wait.time=600000" \
            "${atlasadql:?}/queries/create" \
            | jq '.' | tee /tmp/atlas-query.json

# -----------------------------------------------------
# Get the results as a VOTable.
#[root@tester]

        votableurl=$(
            jq -r '.results.formats.votable' "/tmp/atlas-query.json"
            )

        curl --silent ${votableurl:?} \
            | xmllint --format - \
            | tee /tmp/atlas-data.xml

# -----------------------------------------------------
# -----------------------------------------------------
# Query the gaia database.
#[root@tester]

cat > /tmp/gaia-query.adql << EOF
SELECT
    source_id
FROM
    GAIADR1.tgas_source AS tgas
WHERE
    tgas.parallax > (10.0 * tgas.parallax_error)
EOF

        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}"   \
            --header "firethorn.auth.community:${community:?}" \
            --data-urlencode "adql.query.input@/tmp/gaia-query.adql" \
            --data "adql.query.status.next=COMPLETED" \
            --data "adql.query.wait.time=600000" \
            "${gaiaadql:?}/queries/create" \
            | jq '.' | tee /tmp/gaia-query.json

# -----------------------------------------------------
# Get the results as a VOTable.
#[root@tester]

        votableurl=$(
            jq -r '.results.formats.votable' "/tmp/gaia-query.json"
            )

        curl --silent ${votableurl:?} \
            | xmllint --format - \
            | tee /tmp/gaia-data.xml




