













    |                
   webservice
          |
         factory.create()
                     |
                    Creator.create()
                     |          |
                     |         insert()
                     |
                    Updator.update()
                     |          |
                     |         advance(..)
                     |              |
                     |             running()
                     |                  |
                     |                 Updator.update()
                     |                             |
                     |                            prepare()
                     |                             |   |
                     |                             |  parse()
                     |                             |
                     |                            execute()
                     |                                 |
                     |                                build()
                     |                                 |
                     |                                ogsa from - +OgsaService +OgsaResource
                     |                                ogsa dest - +OgsaService +OgsaResource
                     |                                 |
                     |                                transition(RUNNING)
                     |                                 |
                     |                                event(true) - create handler
                     |                                 |
                     |                                new BlueWorkflowClient()
                     |                                 |
                     |                                workflow.execute(..)
                     |                                 |            |
                     |                                 |            \----------------------\
                     |                                 |                                   |
                     |                                refresh()                            |
                     |                                 |                                   |
                     |                                transition(RUNNING)                  |
                     |                                                                     |
                     |                                                                     |
                                                                                           |
                                                                                         query
                                                                                           |
                                                                                           |
                                                                                           |
    /--------------------------------------------------------------------------------------/
    |                
   webservice
          |
         factory.callback()
                     |
                    Updator.update() <-- why ?
                     |          |
                     |         entity.transition(..)
                     |          |
                     |         entity.transition(..)
                     |          |
                     |         entity.event()
                     |           
  /------------------/           
  |           
  -           

                     |
                     |
                     |
                    refresh()
                     |
                    query.waitfor()
                     |
                    refresh()
                     |           
  /------------------/           
  |           
  -           



    hg update -r '3815:612e4ff7a620'
    hg update -r '3816:9795e065c496'
    hg update -r '3817:592d4cb0b283'
    hg update -r '3818:e4f780fc265e'

        3815:
        3816:
            java.lang.NullPointerException: null
        3817:
            race condition
        3818:
            javax.persistence.EntityExistsException

    05.01-javamaven.sh
    05.02-javadocker.sh

    docker-compose --file distictella.yml down
    docker-compose --file distictella.yml run distictella



    hg diff \
        --reverse \
        --rev 3817:3820 \
        firethorn-core/src/main/java/uk/ac/roe/wfau/firethorn/adql/query/blue/BlueQueryEntity.java \
      | tee backout-query.diff

    hg diff \
        --reverse \
        --rev 3817:3820 \
        firethorn-core/src/main/java/uk/ac/roe/wfau/firethorn/adql/query/blue/BlueTaskEntity.java \
      | tee backout-task.diff


    patch -p1 < backout-query.diff
    patch -p1 < backout-task.diff




$ hg import --no-commit backout.diff
$ hg ci -m "Backout A, B, C"


javax.persistence.EntityExistsException: A different object with the same identifier value was already associated with the session : [uk.ac.roe.wfau.firethorn.meta.jdbc.JdbcResourceEntity#53]



# -----------------------------------------------------
# Set the target branch
#[user@virtual]

    branch=2.1.16-zrq-race-bug

# -----------------------------------------------------
# Run our compose set.
#[user@desktop]

    docker-compose \
        --file distictella.yml \
        run \
            distictella


# -----------------------------------------------------
# Run our Python client.
#[user@pyclient]

import os
import time
import firethorn as ftpy

#
# Create our firethorn client.
firethorn = ftpy.Firethorn(
    os.environ.get(
        'endpoint'
        ),
    )

#
# Login using the admin account.
firethorn.login(
    os.environ.get('adminuser'),
    os.environ.get('adminpass'),
    os.environ.get('admingroup')
    )

#
# Create a JdbcResource to connect to the ATLAS database.
atlas_jdbc = firethorn.firethorn_engine.create_jdbc_resource(
    "ATLAS JDBC resource",
    os.environ.get('datadata'),
    '*',
    os.environ.get('datatype'),
    os.environ.get('datahost'),
    os.environ.get('datauser'),
    os.environ.get('datapass')
    )

print(
    atlas_jdbc
    )

#
# Create an AdqlResource to represent the JdbcResource.
atlas_adql = firethorn.firethorn_engine.create_adql_resource(
    "ATLAS ADQL resource"
    )

print(
    atlas_adql
    )

#
# Import the target JdbcSchema into AdqlSchema.
schema_names = [
    "ATLASDR1"
    ]

for schema_name in schema_names:
    print(schema_name)
    jdbc_schema = atlas_jdbc.select_schema_by_name(
        schema_name,
        "dbo"
        )
    if (None != jdbc_schema):
        metadoc="https://raw.githubusercontent.com/wfau/metadata/master/metadocs/" + schema_name + "_TablesSchema.xml"
        adql_schema = atlas_adql.import_jdbc_schema(
            jdbc_schema,
            schema_name,
            metadoc=metadoc
            )

#
# Admin user
# -------- -------- -------- --------
# Normal user
#

#
# Login using our guest account.
firethorn.login(
    os.environ.get('guestuser'),
    os.environ.get('guestpass'),
    os.environ.get('guestgroup')
    )

#
# Create a new workspace.
workspace = firethorn.firethorn_engine.create_adql_resource(
    "Query resource"
    )

#
# Import the ATLAS schemas into our workspace
for schema in atlas_adql.select_schemas():
    workspace.import_adql_schema(
        schema
        )

#
# Create and run a query on our workspace.
atlas_adql="SELECT TOP 1000 ra,dec FROM ATLASDR1.atlasSource"

query = workspace.create_query(
    atlas_adql,
    "COMPLETED",
    None,
    3000000
    )
print(
    query
    )
print(
    query.json_object.get("results").get("count")
    )

print(
    query.table()
    )
print(
    query.table().count()
    )

#
# Convert the query results into an astropy table.
from astropy.table import Table as ApTable
def wrap_as_pytable(adql_table, limit=100):
    if ((limit) and (query.table().count() > limit)):
        print("Row count [" + str(query.table().count()) + "] exceeds limit [" + str(limit) + "]")
        return None
    else:
        return ApTable.read(
            adql_table.json_object.get("formats").get("votable"),
            format="votable",
            use_names_over_ids=True,
            )    

pytable = wrap_as_pytable(
    query.table(),
    10000
    )
pytable.pprint()




#
# Run several queries at the same time.
# https://docs.python.org/3/library/concurrent.futures.html
# http://masnun.com/2016/03/29/python-a-quick-introduction-to-the-concurrent-futures-module.html
# 

from concurrent.futures import ThreadPoolExecutor
import concurrent.futures

def do_query(workspace, limit, delay):
    query = workspace.create_query(
        atlas_adql,
        "COMPLETED",
        None,
        20000,
            {
            "adql.query.limit.rows"  : limit,
            "adql.query.delay.first" : delay
            }
        )
    return query.json_object.get("results").get("count")

def run_queries(tasks, delay):
    with concurrent.futures.ThreadPoolExecutor(tasks) as executor:
        futures = {
            executor.submit(
                do_query,
                workspace,
                limit,
                delay
                ): limit for limit in range(tasks)
            }
        for future in concurrent.futures.as_completed(futures):
            print(
                future.result()
                )

run_queries(10, 500)
run_queries(20, 500)
run_queries(40, 500)
run_queries(80, 500)

run_queries(80, 500)   FAIL
run_queries(80, 1000)  PASS
run_queries(10, 10)    FAIL
run_queries(10, 200)   PASS
run_queries(10, 150)   FAIL


hg 3825:a1a64ab51918
run_queries(200, 100, 500) // Complete gridlock. Not reproducable ?

run_queries(100, 500) # PASS
run_queries(100, 600) # PASS
run_queries(100, 400) # PASS
run_queries(100, 200) # PASS
run_queries(100, 100) # PASS
run_queries(100, 50)  # PASS
run_queries(100, 25)  # PASS
run_queries(100, 10)  # PASS
run_queries(100, 1)   # PASS
run_queries(100, 0)   # PASS

run_queries(200, 10) # PASS




hg 3825:a1a64ab51918

    Almost all the tests pass.
    One instance where it locks up - needed to restart the services.
    Results section of query() response is out of date.

    query = workspace.create_query(
        atlas_adql,
        "COMPLETED",
        None,
        3000000
        )
    print(
        query
        )

    {
    "results":{
        "formats":{
            ....
            }
        "count": 0
        "state": EMPTY
        "table": "http://..."
        }
    ....
    }


hg 3826:5200e4ed398b

    Moved event() back outside the Thread in callback.
    Looks like this is reverting an earlier change though :-(


#
# Recovering a confised Docker
https://github.com/moby/moby/issues/23302#issuecomment-379038990

// We need to check this works ok now.
// Select our target OGSA-DAI service.  
// Assumes a valid resource list for a DIRECT query.
// TODO fails on a DISTRIBUTED query.
// Need a default DQP resource


dockclean() {
    docker rmi $(docker images --quiet firethorn/firethorn)
    docker rmi $(docker images --quiet firethorn/ogsadai)
    docker rmi $(docker images --quiet --filter 'dangling=true')
    }



hg 3828:16898fe43f7e
Seems fairly robust :-)
run_queries(1000, 0)
run_queries(1100, 0)

for delay in range(1000,0,-1):
    print("----")
    run_queries(100, delay)



