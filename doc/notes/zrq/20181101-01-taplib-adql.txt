#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Compile the Java CC grammar ..
#[user@desktop]

    copyname=zrq.final
    copyname=working.001
    copyname=working.002

    cp -r zrq.final "${copyname:?}"

    source "${HOME:?}/projects.settings"
    pushd "${EDINBURGH_PROJECTS:?}"
        pushd 'taplib'
            pushd "${copyname:?}"

                # Remove the outputs
                mvn -f adql-pom.xml clean

                # Compile the JavaCC grammar
                mvn -f adql-pom.xml javacc:javacc


# -----------------------------------------------------
# Manual check to compare the generated classes with their originals ..
#[user@desktop]

    srcdir=src/adql/parser
    gendir=target/generated-sources/javacc/adql/parser

    filename=ParseException
    filename=SimpleCharStream
    filename=Token
    filename=TokenMgrError

    filename=ADQLParserTokenManager
    filename=ADQLParserConstants
    filename=ADQLParser

    # For each filename ...
    meld "${srcdir:?}/${filename}.orig" "${gendir:?}/${filename}.java"


    ParseException          // Keep original - modified to report text position.
    SimpleCharStream        // Keep original - modified to add boolean trackLineColumn (as far as I can see this isn't actually used anywhere).
    Token                   // Keep original - modified to report text position (as far as I can see, only the comment is added, the code is the same).
    TokenMgrError           // Keep original - modified to keep a record of errorLine and errorColumn.

    ADQLParserTokenManager  // Use generated - no manual changes, lots of generated token numbers.
    ADQLParserConstants     // Use generated - no manual changes, lots of generated token numbers.
    ADQLParser              // Use generated - no manual changes, lots of generated token numbers.


# -----------------------------------------------------
# Create a new working copy.
#[user@desktop]

    copyname=working.003
    cp -r zrq.final "${copyname:?}"

# -----------------------------------------------------
# Modify the Maven build file.
#[user@desktop]

cat > /tmp/adql-pom-patch.txt << 'EOF'
*** adql-pom.xml	2018-11-02 10:22:26.663081187 +0000
--- adql-pom.xml	2018-11-01 18:49:58.218846581 +0000
***************
*** 187,200 ****
                  <version>2.6</version>
                  <configuration>
                      <sourceDirectory>${basedir}/src/adql/parser</sourceDirectory>
                  </configuration>
-                 <!--executions>
-                     <execution>
-                         <goals>
-                             <goal>javacc</goal>
-                         </goals>
-                     </execution>
-                 </executions-->
              </plugin>

              <plugin>
--- 187,196 ----
                  <version>2.6</version>
                  <configuration>
                      <sourceDirectory>${basedir}/src/adql/parser</sourceDirectory>
+                     <outputDirectory>${project.build.directory}/generated-sources/javacc</outputDirectory>
+                     <buildParser>true</buildParser>
+                     <buildTokenManager>true</buildTokenManager>
                  </configuration>
              </plugin>
EOF

    source "${HOME:?}/projects.settings"
    pushd "${EDINBURGH_PROJECTS:?}"
        pushd 'taplib'
            pushd "${copyname:?}"

                patch < /tmp/adql-pom-patch.txt

            popd
        popd
    popd

# -----------------------------------------------------
# Check the list of modified files.
#[user@desktop]

    source "${HOME:?}/projects.settings"
    pushd "${EDINBURGH_PROJECTS:?}"
        pushd 'taplib'
            pushd "${copyname:?}"

                git status

	                modified:   adql-pom.xml
	                modified:   src/adql/parser/adqlGrammar.jj
	                modified:   src/adql/query/operand/OperationType.java

            popd
        popd
    popd

# -----------------------------------------------------
# Compile the Java CC grammar.
#[user@desktop]

    #
    # The generated files we want to use.
    uselist=(
        ADQLParserTokenManager
        ADQLParserConstants
        ADQLParser
        )

    #
    # The modified files we want to keep.
    keeplist=(
        ParseException
        SimpleCharStream
        TokenMgrError
        Token
        )

    source "${HOME:?}/projects.settings"
    pushd "${EDINBURGH_PROJECTS:?}"
        pushd 'taplib'
            pushd "${copyname:?}"

                srcdir=src/adql/parser
                gendir=target/generated-sources/javacc/adql/parser

                #
                # Remove any generated files
                echo ""
                echo "Removing generated files"
                mvn -f adql-pom.xml clean

                #
                # Remove the Java files we want to generate.
                echo ""
                echo "Removing existing Java files"
                for filename in ${uselist[@]}
                do
                    echo "  [${filename:?}]"
                    rm "${srcdir:?}/${filename:?}.java"
                done

##              #
##              # Remove the Java files we want to keep.
##              # We don't need to do this because JavaCC won't generate
##              # duplicates for files that are in the source directory.
##              echo ""
##              echo "Removing existing Java files"
##              for filename in ${keeplist[@]}
##              do
##                  echo "  [${filename:?}]"
##                  rm "${srcdir:?}/${filename:?}.java"
##              done

                #
                # Compile the JavaCC grammar
                echo ""
                echo "Compiling JavaCC grammar"
                mvn -f adql-pom.xml javacc:javacc

                #
                # Import the generated Java files we want to use.
                echo ""
                echo "Importing generated Java files"
                for filename in ${uselist[@]}
                do
                    echo "  [${filename:?}]"
                    cp "${gendir:?}/${filename:?}.java" "${srcdir:?}/"
                done

##              #
##              # Compare the generated files with their backups.
##              echo ""
##              echo "Comparing backup Java files"
##              for filename in ${keeplist[@]}
##              do
##                  echo "  [${filename:?}]"
##                  meld "${srcdir:?}/${filename:?}.java.backup" "${gendir:?}/${filename:?}.java"
##              done
##
##              #
##              # Restore the Java files we want to keep.
##              # We don't need to do this because JavaCC won't generate
##              # duplicates for files that are in the source directory.
##              echo ""
##              echo "Restoring backup Java files"
##              for filename in ${keeplist[@]}
##              do
##                  echo "  [${filename:?}]"
##                  cp "${srcdir:?}/${filename:?}.java.backup" "${srcdir:?}/${filename:?}.java"
##              done

                #
                # Remove the remaining generated files
                echo ""
                echo "Removing generated files"
                mvn -f adql-pom.xml clean

            popd
        popd
    popd

# -----------------------------------------------------
# Check the list of modified files.
#[user@desktop]

    source "${HOME:?}/projects.settings"
    pushd "${EDINBURGH_PROJECTS:?}"
        pushd 'taplib'
            pushd "${copyname:?}"

                git status

	                modified:   adql-pom.xml
	                modified:   src/adql/parser/ADQLParser.java
	                modified:   src/adql/parser/ADQLParserConstants.java
	                modified:   src/adql/parser/ADQLParserTokenManager.java
	                modified:   src/adql/parser/adqlGrammar.jj
	                modified:   src/adql/query/operand/OperationType.java

            popd
        popd
    popd

# -----------------------------------------------------
# Fix ambiguous constructor reference.
#[user@desktop]

    source "${HOME:?}/projects.settings"
    pushd "${EDINBURGH_PROJECTS:?}"
        pushd 'taplib'
            pushd "${copyname:?}"

                sed -i '
                    /ADQLParser(java.io.InputStream stream)/,/}/ {
                        s/null/(String)null/
                        }
                    ' src/adql/parser/ADQLParser.java

            popd
        popd
    popd

# -----------------------------------------------------
# Compile the Java code.
#[user@desktop]

    source "${HOME:?}/projects.settings"
    pushd "${EDINBURGH_PROJECTS:?}"
        pushd 'taplib'
            pushd "${copyname:?}"

                # Clean the target directory.
                mvn -f adql-pom.xml clean

                # Compile the adql library.
                mvn -f adql-pom.xml compile

                # Compile the tap library.
                mvn -f tap-pom.xml compile

                # Test the adql library.
                mvn -f adql-pom.xml test

##
## Really weird side effects.
## The tests fail because STCS.COORD_SYS_SYNTAX gets a null value for Frame.regexp.
## Only IF TestPgSphereTranslator is run before TestSTCS.
##
##              # FAIL
##              mvn -f adql-pom.xml test -Dtest=TestPgSphereTranslator,TestSTCS
##              # PASS
##              mvn -f adql-pom.xml test -Dtest=TestSTCS

                # Update the Eclipse project.
                mvn -f adql-pom.xml eclipse:eclipse

                # Install the jar in our Maven repository.
                mvn -f adql-pom.xml install

            popd
        popd
    popd

# -----------------------------------------------------
# Compile the Firethorn code.
#[user@desktop]


