#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2016, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    Create IvoaResource

        1) Create with uploaded MetaDoc/VOSI    
        2) Automate IvoaResource scan ..

#---------------------------------------------------------------------
# Create a branch for the first step.
#[user@desktop] 

    doc/notes/zrq/20141130-01-hg-branch.txt

    devname=zrq-ivoa-create

# -----------------------------------------------------
# Build our toolkit containers.
#[user@desktop] 

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        docker build \
            --tag firethorn/fedora:21.1 \
            docker/fedora/21

        docker build \
            --tag firethorn/java:8.1 \
            docker/java/8

        docker build \
            --tag firethorn/tomcat:8.1 \
            docker/tomcat/8

        docker build \
            --tag firethorn/postgres:9 \
            docker/postgres/9

        docker build \
            --tag firethorn/builder:1.1 \
            docker/builder

        docker build \
            --tag firethorn/docker-proxy:1.1 \
            docker/docker-proxy

        docker build \
            --tag firethorn/sql-proxy:1.1 \
            docker/sql-proxy

        docker build \
            --tag firethorn/sql-tunnel:1.1 \
            docker/sql-tunnel

        docker build \
            --tag firethorn/ssh-client:1.1 \
            docker/ssh-client

    popd

# -----------------------------------------------------
# Build our tester container.
#[user@desktop] 

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source "bin/util.sh"

        docker build \
            --tag firethorn/tester:1.1 \
            integration/tester

    popd

# -----------------------------------------------------
# Start our docker-proxy container.
#[user@desktop] 

    docker run \
        --detach \
        --name "docker-proxy" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/docker-proxy:1.1

    sleep 1
    dockerip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' docker-proxy)

    echo "${dockerip:?}"
    curl "http://${dockerip:?}:2375/version"

# -----------------------------------------------------
# Build our source code.
#[user@desktop] 

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our webapp containers.
#[user@desktop] 

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd firethorn-ogsadai/webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd
        
        pushd firethorn-webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd

    popd

# -----------------------------------------------------
# Load our secret function.
#[user@desktop] 

    source ${HOME:?}/secret.sh

    secret 'ping'

# -----------------------------------------------------
# Get our branch and version number.
#[user@desktop] 

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        branch=$(hg branch)

        source 'bin/util.sh'
        version=$(getversion)

    popd

# -----------------------------------------------------
# Configure our docker chain.
#[user@desktop] 

    cat > "${HOME:?}/chain.properties" << EOF

    metaname=bethany
    username=patricia
    dataname=elayne
    ogsaname=jarmila
    firename=gillian

    metalink=albert
    userlink=edward
    datalink=sebastien
    ogsalink=timothy
    firelink=peter

    metatype=pgsql
    metadata=postgres
    metauser=$(pwgen 20 1)
    metapass=$(pwgen 20 1)
    metadriver=org.postgresql.Driver

    usertype=mssql
    userhost=$(secret 'firethorn.user.host')
    userdata=$(secret 'firethorn.user.data')
    useruser=$(secret 'firethorn.user.user')
    userpass=$(secret 'firethorn.user.pass')
    userdriver=net.sourceforge.jtds.jdbc.Driver

    datatype=mssql
    datahost=$(secret 'firethorn.data.host')
    datadata=$(secret 'firethorn.data.data')
    datauser=$(secret 'firethorn.data.user')
    datapass=$(secret 'firethorn.data.pass')
    datadriver=net.sourceforge.jtds.jdbc.Driver

    tunneluser=$(secret 'ssh.tunnel.user')
    tunnelhost=$(secret 'ssh.tunnel.host')

EOF

# -----------------------------------------------------
# Create our FireThorn config.
#[user@desktop] 

    source "${HOME:?}/chain.properties"

    cat > "${HOME:?}/firethorn.properties" << EOF

firethorn.ogsadai.endpoint=http://${ogsalink:?}:8080/ogsadai/services

firethorn.meta.type=${metatype:?}
firethorn.meta.url=jdbc:postgresql://${metalink:?}/${metadata:?}
firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}
firethorn.meta.driver=${metadriver:?}

firethorn.user.type=${usertype:?}
firethorn.user.url=jdbc:jtds:sqlserver://${userlink:?}/${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}
firethorn.user.driver=${userdriver:?}

EOF

    chmod a+r "${HOME:?}/firethorn.properties" 
    chcon -t svirt_sandbox_file_t "${HOME:?}/firethorn.properties" 

# -----------------------------------------------------
# Start our userdata ambassador.
#[user@desktop] 

    source "${HOME:?}/chain.properties"
    docker run \
        --detach \
        --interactive \
        --name "${username:?}" \
        --env  "tunneluser=${tunneluser:?}" \
        --env  "tunnelhost=${tunnelhost:?}" \
        --env  "targethost=${userhost:?}" \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        firethorn/sql-tunnel:1.1

# -----------------------------------------------------
# Start our science data ambassador.
#[user@desktop] 

    source "${HOME:?}/chain.properties"
    docker run \
        --detach \
        --interactive \
        --name "${dataname:?}" \
        --env  "tunneluser=${tunneluser:?}" \
        --env  "tunnelhost=${tunnelhost:?}" \
        --env  "targethost=${datahost:?}" \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        firethorn/sql-tunnel:1.1

# -----------------------------------------------------
# Start our PostgreSQL metadata container.
#[user@desktop] 

    source "${HOME:?}/chain.properties"
    docker run \
        --detach \
        --name "${metaname:?}" \
        --env "POSTGRES_USER=${metauser:?}" \
        --env "POSTGRES_PASSWORD=${metapass:?}" \
        postgres

# -----------------------------------------------------
# Start our OGSA-DAI container.
#[user@desktop] 

# --publish 8081:8080 \

    source "${HOME:?}/chain.properties"

    docker run \
        --detach \
        --name "${ogsaname:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume /etc/localtime:/etc/localtime:ro \
        "firethorn/ogsadai:${version:?}"

# -----------------------------------------------------
# Start our FireThorn container.
#[user@desktop] 

# --publish 8080:8080 \

    source "${HOME:?}/chain.properties"

    properties=${HOME:?}/firethorn.properties

    docker run \
        --detach \
        --name "${firename:?}" \
        --link "${ogsaname:?}:${ogsalink:?}" \
        --link "${metaname:?}:${metalink:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume "${properties:?}:/etc/firethorn.properties" \
        --volume /etc/localtime:/etc/localtime:ro \
        "firethorn/firethorn:${version:?}"

# -----------------------------------------------------
# Check the logs ..
#[user@desktop] 

# Separate terminal
# source "${HOME:?}/chain.properties"
# docker exec -it "${firename:?}" tail -f logs/firethorn.log 


# Separate terminal
# source "${HOME:?}/chain.properties"
# docker exec -it "${ogsaname:?}" tail -f logs/ogsadai.log 

# -----------------------------------------------------
# Start our test container.
#[user@desktop] 

    source "${HOME:?}/chain.properties"
    docker run \
        --rm \
        --tty \
        --interactive \
        --env "datadata=${datadata:?}" \
        --env "datalink=${datalink:?}" \
        --env "datauser=${datauser:?}" \
        --env "datapass=${datapass:?}" \
        --env "datadriver=${datadriver:?}" \
        --env "endpointurl=http://${firelink:?}:8080/firethorn" \
        --link "${firename:?}:${firelink:?}" \
        --volume /etc/localtime:/etc/localtime:ro \
        "firethorn/tester:1.1" \
        bash

# -----------------------------------------------------
# Add XML and JSON tools.
#[root@tester]

    yum install -y jq
    yum install -y xmlstarlet

# -----------------------------------------------------
# Configure our identity.
#[root@tester]

        identity=${identity:-$(date '+%H:%M:%S')}
        community=${community:-$(date '+%A %-d %B %Y')}

        source "bin/01-01-init-rest.sh"

# -----------------------------------------------------
# Check the system info.
#[root@tester]

        curl \
            --header "firethorn.auth.identity:${identity:?}" \
            --header "firethorn.auth.community:${community:?}" \
            "${endpointurl:?}/system/info" \
            | bin/pp | tee system-info.json

# -----------------------------------------------------
# Load the ATLASDR1 resource.
#[root@tester]

        database=ATLASDR1
        
        source "bin/02-02-create-jdbc-space.sh" \
            'Atlas JDBC conection' \
            "jdbc:jtds:sqlserver://${datalink:?}/${database:?}" \
            "${datauser:?}" \
            "${datapass:?}" \
            "${datadriver:?}" \
            '*'
        atlasjdbc=${jdbcspace:?}

        source "bin/03-01-create-adql-space.sh" 'Atlas ADQL workspace'
        atlasadql=${adqlspace:?}

        source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'ATLASDR1' 'dbo' "meta/ATLASDR1_AtlasSource.xml"

# -----------------------------------------------------
# Create our workspace
#[root@tester]

        source "bin/04-01-create-query-space.sh" 'Test workspace'
        source "bin/04-03-import-query-schema.sh" "${atlasadql:?}" 'ATLASDR1' 'atlas'

# -----------------------------------------------------
# Test the limit and rowcount.
#[root@tester]

        #
        # Set the votable namespace.
        namespace=http://www.ivoa.net/xml/VOTable/v1.3

        #
        # Create BlueQuery with a valid input and wait for completion.
        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}" \
            --header "firethorn.auth.community:${community:?}" \
            --data "blue.query.input=SELECT TOP 2000 ra, dec FROM atlas.atlasSource" \
            --data "blue.query.next.status=COMPLETED" \
            --data "blue.query.delay.every=10" \
            --data "blue.query.limit.rows=1000" \
            --data "blue.query.wait=600000" \
            "${endpointurl:?}/${queryspace:?}/blue/create" \
            | bin/pp | tee blue-query.json

        #
        # Grab the adql table url.
        tableurl=$(
            cat blue-query.json | jq -r '.results.adql'
            )
        #
        # Grab the votable url.
        votable=$( \
            curl \
                --silent \
                --header "firethorn.auth.identity:${identity:?}" \
                --header "firethorn.auth.community:${community:?}" \
                "${tableurl}" \
                | jq -r '.formats.votable'
            )            
        #
        # Grab the votable data and count the rows.
        curl \
            --silent \
            --header "firethorn.auth.identity:${identity:?}" \
            --header "firethorn.auth.community:${community:?}" \
            "${votable}" |            
        xmlstarlet sel \
            -N "vot=${namespace}" \
            -t -v "count(//vot:TR)" ; echo

