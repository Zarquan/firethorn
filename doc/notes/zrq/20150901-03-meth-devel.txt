#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2014, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Configure our property files.
#[user@desktop]

    chainprops=${HOME:?}/chain.properties
    fireprops=${HOME:?}/firethorn.settings

# -----------------------------------------------------
# Set branch and version.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        branch=$(hg branch)

        source "bin/util.sh"
        version=$(getversion)

    popd

# -----------------------------------------------------
# Stop existing containers.
#[user@desktop]

    docker rm -vf $(docker ps -aq)

# -----------------------------------------------------
# Build our toolkit containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        docker build \
            --tag firethorn/fedora:21.1 \
            docker/fedora/21

        docker build \
            --tag firethorn/java:8.1 \
            docker/java/8

        docker build \
            --tag firethorn/tomcat:8.1 \
            docker/tomcat/8

        docker build \
            --tag firethorn/postgres:9.1 \
            docker/postgres/9

        docker build \
            --tag firethorn/builder:1.1 \
            docker/builder

        docker build \
            --tag firethorn/docker-proxy:1.1 \
            docker/docker-proxy

        docker build \
            --tag firethorn/sql-proxy:1.1 \
            docker/sql-proxy

        docker build \
            --tag firethorn/sql-tunnel:1.1 \
            docker/sql-tunnel

        docker build \
            --tag firethorn/ssh-client:1.1 \
            docker/ssh-client

    popd

# -----------------------------------------------------
# Start our docker-proxy container.
#[user@desktop]

    docker run \
        --detach \
        --name "docker-proxy" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/docker-proxy:1.1

    sleep 5
    dockerip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' docker-proxy)

    echo "${dockerip:?}"
    curl "http://${dockerip:?}:2375/version"

# -----------------------------------------------------
# Build our source code.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our webapp containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd firethorn-ogsadai/webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd
        
        pushd firethorn-webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd

    popd

# -----------------------------------------------------
# Build our tester container.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source "bin/util.sh"

        docker build \
            --tag firethorn/tester:$(getversion) \
            integration/tester

    popd

# -----------------------------------------------------
# Create our secret function.
#[user@desktop]

    secrethost='dave@shepseskaf.roe.ac.uk'
    secretfile='${HOME:?}/secret.store'

    secret()
        {
        local key=${1:?}
        ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
        }

    secret 'ping'

# -----------------------------------------------------
# Configure our docker chain.
#[user@desktop]

    cat > "${chainprops:?}" << EOF

    version=${branch:?}

    metaname=bethany
    username=patricia
    dataname=elayne
    ogsaname=jarmila
    firename=gillian

    metalink=albert
    userlink=edward
    datalink=sebastien
    ogsalink=timothy
    firelink=peter

    metatype=pgsql
    metadata=postgres
    metauser=$(pwgen 20 1)
    metapass=$(pwgen 20 1)
    metadriver=org.postgresql.Driver

    usertype=mssql
    userhost=$(secret 'firethorn.user.host')
    userdata=$(secret 'firethorn.user.data')
    useruser=$(secret 'firethorn.user.user')
    userpass=$(secret 'firethorn.user.pass')
    userdriver=net.sourceforge.jtds.jdbc.Driver

    datatype=mssql
    datahost=$(secret 'firethorn.data.host')
    datadata=$(secret 'firethorn.data.data')
    datauser=$(secret 'firethorn.data.user')
    datapass=$(secret 'firethorn.data.pass')
    datadriver=net.sourceforge.jtds.jdbc.Driver

    tunneluser=$(secret 'ssh.tunnel.user')
    tunnelhost=$(secret 'ssh.tunnel.host')

EOF

# -----------------------------------------------------
# Start our userdata ambassador.
#[user@desktop]

    source "${chainprops:?}"
    docker run \
        --detach \
        --interactive \
        --name "${username:?}" \
        --env  "tunneluser=${tunneluser:?}" \
        --env  "tunnelhost=${tunnelhost:?}" \
        --env  "targethost=${userhost:?}" \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        firethorn/sql-tunnel:1.1

# -----------------------------------------------------
# Start our science data ambassador.
#[user@desktop]

    source "${chainprops:?}"
    docker run \
        --detach \
        --interactive \
        --name "${dataname:?}" \
        --env  "tunneluser=${tunneluser:?}" \
        --env  "tunnelhost=${tunnelhost:?}" \
        --env  "targethost=${datahost:?}" \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        firethorn/sql-tunnel:1.1

# -----------------------------------------------------
# Start our PostgreSQL metadata container.
#[user@desktop]

    source "${chainprops:?}"
    docker run \
        --detach \
        --name "${metaname:?}" \
        --env "POSTGRES_USER=${metauser:?}" \
        --env "POSTGRES_PASSWORD=${metapass:?}" \
        postgres

# -----------------------------------------------------
# Create a function to manage permissions on our data directories.
#[user@desktop]

    datadir()
        {
        local target=${1:?}

        mkdir --parents "${target:?}"

        chown 995:994 "${target:?}"
        chmod u=rwxs  "${target:?}"
        chmod g=rwxs  "${target:?}"

        chcon -t svirt_sandbox_file_t "${target:?}"
        }

# -----------------------------------------------------
# Start our OGSA-DAI container.
#[root@virtual]

    source "${chainprops:?}"

    ogsalogs="/var/local/logs/${ogsaname:?}"
    datadir "${ogsalogs:?}"

    docker run \
        --detach \
        --publish 8081:8080 \
        --name "${ogsaname:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume "${ogsalogs:?}:/var/tomcat/logs" \
        "firethorn/ogsadai:${version:?}"

# -----------------------------------------------------
# Create our FireThorn config.
#[user@desktop]

    source "${chainprops:?}"

    cat > "${fireprops:?}" << EOF

firethorn.ogsadai.endpoint=http://${ogsalink:?}:8080/ogsadai/services

firethorn.meta.type=${metatype:?}
firethorn.meta.url=jdbc:postgresql://${metalink:?}/${metadata:?}
firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}
firethorn.meta.driver=${metadriver:?}

firethorn.user.type=${usertype:?}
firethorn.user.url=jdbc:jtds:sqlserver://${userlink:?}/${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}
firethorn.user.driver=${userdriver:?}

EOF

    chmod a+r "${fireprops:?}" 
    chcon -t svirt_sandbox_file_t "${fireprops:?}" 

# -----------------------------------------------------
# Start our FireThorn container.
#[user@desktop]

    source "${chainprops:?}"

    firelogs="/var/local/logs/${firename:?}"
    datadir "${firelogs:?}"

    docker run \
        --detach \
        --publish 8080:8080 \
        --name "${firename:?}" \
        --link "${ogsaname:?}:${ogsalink:?}" \
        --link "${metaname:?}:${metalink:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume "${firelogs:?}:/var/tomcat/logs" \
        --volume "${fireprops:?}:/etc/firethorn.properties" \
        "firethorn/firethorn:${version:?}"

# -----------------------------------------------------
# Check the logs ..
#[user@desktop]

    source "${chainprops:?}"
    docker logs -f --tail 100 "${firename:?}"

    source "${chainprops:?}"
    docker logs -f --tail 100 "${ogsaname:?}"





# -----------------------------------------------------
# Start our test container.
#[user@desktop]

    source "${chainprops:?}"
    docker run \
        --rm \
        --tty \
        --interactive \
        --env "datadata=${datadata:?}" \
        --env "datalink=${datalink:?}" \
        --env "datauser=${datauser:?}" \
        --env "datapass=${datapass:?}" \
        --env "datadriver=${datadriver:?}" \
        --env "endpointurl=http://${firelink:?}:8080/firethorn" \
        --link "${firename:?}:${firelink:?}" \
        "firethorn/tester:${version:?}" \
        bash

# -----------------------------------------------------
# Configure our identity.
#[root@tester]

    identity=${identity:-$(date '+%H:%M:%S')}
    community=${community:-$(date '+%A %-d %B %Y')}

    source "bin/01-01-init-rest.sh"

# -----------------------------------------------------
# Explore the blue API.
#[root@tester]

    #
    # Check the system info.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        "${endpointurl:?}/system/info" \
        | bin/pp | tee system-info.json

# -----------------------------------------------------
# Load the ATLASDR1 resource.
#[root@tester]

        database=ATLASDR1
        
        source "bin/02-02-create-jdbc-space.sh" \
            'Atlas JDBC conection' \
            "jdbc:jtds:sqlserver://${datalink:?}/${database:?}" \
            "${datauser:?}" \
            "${datapass:?}" \
            "${datadriver:?}" \
            '*'
        atlasjdbc=${jdbcspace:?}

        source "bin/03-01-create-adql-space.sh" 'Atlas ADQL workspace'
        atlasadql=${adqlspace:?}

        source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'ATLASDR1' 'dbo' "meta/ATLASDR1_AtlasSource.xml"

        source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'ATLASDR1' 'dbo' "meta/ATLASDR1_AtlasTwomass.xml"

        source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'TWOMASS'  'dbo' "meta/TWOMASS_TwomassPsc.xml"

# -----------------------------------------------------
# Create our source resource
#[root@tester]

        source "bin/04-01-create-query-space.sh" 'Test workspace'
        source "bin/04-03-import-query-schema.sh" "${atlasadql:?}" 'ATLASDR1' 'atlas'
        source "bin/04-03-import-query-schema.sh" "${atlasadql:?}" 'TWOMASS'  'twomass'

# -----------------------------------------------------
# Run our ATLASDR1 queries
#[root@tester]

        source "bin/04-03-create-query-schema.sh"

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                atlasSource.ra,
                atlasSource.dec
            FROM
                atlas.atlasSource
            WHERE
                atlasSource.ra  BETWEEN 354 AND 355
            AND
                atlasSource.dec BETWEEN -40 AND -39
            "

#------------------------------------------------------------------

    #
    # List our ADQL resources.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        "${endpointurl:?}/adql/resource/select" \
        | bin/pp | tee adql-list.json

    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        "${endpointurl:?}/${queryspace:?}" \
        | bin/pp | tee adql-resource.json

    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        "${endpointurl:?}/${queryspace:?}/schemas/select" \
        | bin/pp

#------------------------------------------------------------------

    #
    # Create BlueQuery with a null input.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "frog=green" \
        "${endpointurl:?}/${queryspace:?}/blue/create" \
        | bin/pp | tee blue-query.json

#------------------------------------------------------------------

    #
    # Create BlueQuery with an empty input.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.input=" \
        "${endpointurl:?}/${queryspace:?}/blue/create" \
        | bin/pp | tee blue-query.json

#------------------------------------------------------------------

    #
    # Create BlueQuery with an invalid input.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.input=NOT ADQL" \
        "${endpointurl:?}/${queryspace:?}/blue/create" \
        | bin/pp | tee blue-query.json

#------------------------------------------------------------------

    #
    # Create BlueQuery with a valid input.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.input=SELECT count(ra) FROM atlas.atlasSource" \
        "${endpointurl:?}/${queryspace:?}/blue/create" \
        | bin/pp | tee blue-query.json

    queryself=$(
        cat blue-query.json | self
        )

    querynode=$(
        cat blue-query.json | self | node
        )

    queryident=$(
        cat blue-query.json | self | ident
        )

    #
    # Select the BlueQuery.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        "${endpointurl:?}/blue/query/${queryident:?}" \
        | bin/pp

    #
    # Run the BlueQuery.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.next.status=RUNNING" \
        "${endpointurl:?}/blue/query/${queryident:?}" \
        | bin/pp

    #
    # Select the BlueQuery.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        "${endpointurl:?}/blue/query/${queryident:?}" \
        | bin/pp

    #
    # Complete the BlueQuery.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.next.status=COMPLETED" \
        "${endpointurl:?}/blue/query/callback/${queryident:?}" \
        | bin/pp

    #
    # Select the BlueQuery.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        "${endpointurl:?}/blue/query/${queryident:?}" \
        | bin/pp

#------------------------------------------------------------------

    #
    # Create BlueQuery with null input.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.other=other " \
        "${endpointurl:?}/adql/resource/32772/blue/create" \
        | bin/pp | tee blue-query.json

    queryself=$(
        cat blue-query.json | self
        )

    querynode=$(
        cat blue-query.json | self | node
        )

    queryident=$(
        cat blue-query.json | self | ident
        )

    #
    # Set the query ADQL.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.input=SELECT count(ra) FROM atlas.atlasSource" \
        "${endpointurl:?}/blue/query/${queryident:?}" \
        | bin/pp

    #
    # Run the BlueQuery.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.next.status=RUNNING" \
        "${endpointurl:?}/blue/query/${queryident:?}" \
        | bin/pp

    #
    # Complete the BlueQuery.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.next.status=COMPLETED" \
        "${endpointurl:?}/blue/query/callback/${queryident:?}" \
        | bin/pp

#------------------------------------------------------------------

    #
    # Create BlueQuery with null input.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.other=other " \
        "${endpointurl:?}/adql/resource/32772/blue/create" \
        | bin/pp | tee blue-query.json

    queryident=$(
        cat blue-query.json | self | ident
        )

    #
    # Set the query ADQL and set status to RUNNING.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.next.status=RUNNING" \
        --data "blue.query.input=SELECT count(ra) FROM atlas.atlasSource" \
        "${endpointurl:?}/blue/query/${queryident:?}" \
        | bin/pp

#------------------------------------------------------------------

    #
    # Create BlueQuery with null input.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.other=other " \
        "${endpointurl:?}/adql/resource/32772/blue/create" \
        | bin/pp | tee blue-query.json

    queryident=$(
        cat blue-query.json | self | ident
        )

    #
    # Set the query ADQL and set status to COMPLETED.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.next.status=COMPLETED" \
        --data "blue.query.input=SELECT count(ra) FROM atlas.atlasSource" \
        "${endpointurl:?}/blue/query/${queryident:?}" \
        | bin/pp

#------------------------------------------------------------------

    #
    # Create BlueQuery with null input.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.other=other " \
        "${endpointurl:?}/adql/resource/32772/blue/create" \
        | bin/pp | tee blue-query.json

    queryident=$(
        cat blue-query.json | self | ident
        )
    echo "queryident=${queryident:?}"

    #
    # Set the query ADQL and set status to COMPLETED, and wait 60 sec.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.wait=60000" \
        --data "blue.query.next.status=COMPLETED" \
        --data "blue.query.input=SELECT count(ra) FROM atlas.atlasSource" \
        "${endpointurl:?}/blue/query/${queryident:?}" \
        | bin/pp

    #
    # Complete the BlueQuery.
queryident=622605

    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.next.status=COMPLETED" \
        "${endpointurl:?}/blue/query/callback/${queryident:?}" \
        | bin/pp

#------------------------------------------------------------------

    #
    # Create BlueQuery with vaild ADQL, status to COMPLETED, and wait 60 sec.
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.wait=120000" \
        --data "blue.query.next.status=COMPLETED" \
        --data "blue.query.input=SELECT count(ra) FROM atlas.atlasSource" \
        "${endpointurl:?}/adql/resource/32772/blue/create" \
        | bin/pp | tee blue-query.json

    queryident=$(
        cat blue-query.json | self | ident
        )
    echo "queryident=${queryident:?}"


    #
    # Select the BlueQuery.
queryident=163853
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        "${endpointurl:?}/blue/query/${queryident:?}" \
        | bin/pp

    #
    # Complete the BlueQuery.
queryident=163853
    curl \
        --header "firethorn.auth.identity:${identity:?}" \
        --header "firethorn.auth.community:${community:?}" \
        --data "blue.query.next.status=COMPLETED" \
        "${endpointurl:?}/blue/query/callback/${queryident:?}" \
        | bin/pp


