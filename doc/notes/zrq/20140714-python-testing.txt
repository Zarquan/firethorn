#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2014, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -------------------------------------------------------------------------------------------
# Swap to Stelio's development branch
#[user@desktop]

    stvbranch=1.10.8-stv-pyrothorn

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        hg pull
        hg update "${stvbranch:?}"

# -------------------------------------------------------------------------------------------
# Create a clean Ubuntu 13 VM
#[root@desktop]

    ischnura-createvm 
        ....
        INFO : Node name [omicron]
        INFO : Base name [ubuntu-13-base-20140211.qcow]
        INFO : Disc name [omicron.qcow]
        INFO : Disc size [8G]

# -------------------------------------------------------------------------------------------
# Login to the VM as root.
#[user@desktop]

    cat > "/tmp/tester-settings.txt" << EOF
testhost=omicron.virtual.metagrid.co.uk    
EOF

    source "/tmp/tester-settings.txt"
    ssh root@${testhost:?}

# ------------------------------------------
# Install basic tools.
#[root@testhost]

    apt-get -y install \
        htop  \
        wget  \
        gzip  \
        unzip \
        pwgen \
        rsync \
        patch \

# -------------------------------------------------------------------------------------------
# Install the Java tools we need
#[root@testhost]

    apt-get -y install \
        openjdk-7-jre \
        openjdk-7-jdk \
        maven

# -------------------------------------------------------------------------------------------
# Install the SCM tools we need
#[root@testhost]

    apt-get -y install \
        mercurial

# -------------------------------------------------------------------------------------------
# Initialise our mysql settings.
#[root@testhost]

    #
    # MySQL root name and pass
    if [ ! -e "${HOME:?}/mysql-root-settings.txt" ]
    then
cat > "${HOME:?}/mysql-root-settings.txt" << EOF

mysqlrootuser=root
mysqlrootpass=$(pwgen -s 10 1)

EOF
    fi

    #
    # MySQL test user and pass
    if [ ! -e "${HOME:?}/mysql-pyro-settings.txt" ]
    then
cat > "${HOME:?}/mysql-pyro-settings.txt" << EOF

mysqlpyrodata=pyrothorn
mysqlpyrouser=$(pwgen -s 10 1)
mysqlpyropass=$(pwgen -s 10 1)

pyrothorndata

EOF
    fi

# -------------------------------------------------------------------------------------------
# Install the MySQL client and server
#[root@testhost]

    source "${HOME:?}/mysql-root-settings.txt"
    debconf-set-selections <<< "mysql-server mysql-server/root_password password ${mysqlrootpass:?}"
    debconf-set-selections <<< "mysql-server mysql-server/root_password_again password ${mysqlrootpass:?}"

    apt-get -y install \
        mysql-server \
        mysql-client

# -------------------------------------------------------------------------------------------
# Create the MySQL reporting database.
#[root@testhost]

    source "${HOME:?}/mysql-root-settings.txt"
    source "${HOME:?}/mysql-pyro-settings.txt"

    #
    # Test the admin password.
    mysql --user="${mysqlrootuser:?}" --password="${mysqlrootpass:?}" --execute \
        "SELECT version()"

    #
    # Create our (empty) database.
    mysqladmin --user="${mysqlrootuser:?}" --password="${mysqlrootpass:?}" create "${mysqlpyrodata:?}"

    #
    # Create our database user
    mysql --user="${mysqlrootuser:?}" --password="${mysqlrootpass:?}" --execute \
        "CREATE USER '${mysqlpyrouser:?}'@'localhost' IDENTIFIED BY '${mysqlpyropass:?}'"

    #
    # Grant access to our database
    mysql --user="${mysqlrootuser:?}" --password="${mysqlrootpass:?}" --execute \
        "GRANT ALL ON ${mysqlpyrodata:?}.* TO '${mysqlpyrouser:?}'@'localhost'"

    #
    # Check our login.
    mysql --user="${mysqlpyrouser:?}" --password="${mysqlpyropass:?}" --database="${mysqlpyrodata:?}" --execute \
        "SHOW DATABASES ; SHOW TABLES"

    #
    # Create our table.
    mysql --user="${mysqlpyrouser:?}" --password="${mysqlpyropass:?}" --database="${mysqlpyrodata:?}" << EOF

        CREATE TABLE IF NOT EXISTS others (
           queryid            int(10) unsigned NOT NULL AUTO_INCREMENT,
           query              text NOT NULL,
           direct_sql_rows    int(11) NOT NULL,
           firethorn_sql_rows int(11) NOT NULL,
           firethorn_duration varchar(60) NOT NULL,
           sql_duration       varchar(60) NOT NULL,
           test_passed        tinyint(1) NOT NULL,
           firethorn_version  varchar(60) NOT NULL,
           error_message      varchar(60) NOT NULL,
           PRIMARY KEY (queryid)
         ) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=10 ;
EOF

    #
    # Check the table.
    mysql --user="${mysqlpyrouser:?}" --password="${mysqlpyropass:?}" --database="${mysqlpyrodata:?}" --execute \
        "SHOW DATABASES ; SHOW TABLES"


# -------------------------------------------------------------------------------------------
# Install the ODBC tools we need
#[root@testhost]

    apt-get -y install \
        unixodbc \
        tdsodbc \
        libmyodbc

# -------------------------------------------------------------------------------------------
# Configure the ODBC tools.
#[root@testhost]

    cat > /etc/odbcinst.ini << EOF
[ODBC Drivers]
TDS             = Installed

[TDS]
Description     = TDS driver (Sybase/MS SQL)
Driver          = $(find /usr -name 'libtdsodbc.so' | head -n 1)
Setup           = $(find /usr -name 'libtdsS.so' | head -n 1)
FileUsage       = 1

[ODBC]
Trace           = No
TraceFile       = /tmp/odbc-sql-trace.log
ForceTrace      = No
Pooling         = No
EOF

    cat > /etc/odbc.ini << EOF
[ODBC]
Debug         = 0
Trace         = 0
DebugFile     = /tmp/odbc-sys-debugfile.log
TraceFile     = /tmp/odbc-sys-tracefile.log
TraceAutoStop = 1

[ODBC Data Sources]
RAMSES1         = General connection to ramses1
RAMSES2         = General connection to ramses2
RAMSES3         = General connection to ramses3

[Default]
Servername      =
Database        =

[RAMSES1]
Driver          = TDS
Servername      = ramses1
Database        =
UID             =
Password        =

[RAMSES2]
Driver          = TDS
Servername      = ramses2
Database        =
UID             =
Password        =

[RAMSES3]
Driver          = TDS
Servername      = ramses3
Database        =
UID             =
Password        =

# -------------------------------------------------------------------------------------------
# Install the Python tools we need
#[root@testhost]

    apt-get -y install \
        python \
        python-numpy \
        python-scipy

# -------------------------------------------------------------------------------------------
# Install pyodbc
#[root@testhost]

    apt-get -y install \
        g++ \
        make \
        python-dev
        unixodbc-dev

    if [ ! -d pyodbc-3.0.7 ]
    then

        if [ ! -e pyodbc-3.0.7.zip ]
        then
            wget https://pyodbc.googlecode.com/files/pyodbc-3.0.7.zip
        fi

        if [ ! -d pyodbc-3.0.7 ]
        then
            unzip pyodbc-3.0.7.zip
        fi

        pushd pyodbc-3.0.7/

            python setup.py install

        popd
    fi

# -------------------------------------------------------------------------------------------
# Create our test user
#[root@testhost]

cat > "${HOME:?}/tester-settings.txt" << EOF
testuser=$(pwgen 16 1)
testhost=$(hostname -f)
EOF

    source "${HOME:?}/tester-settings.txt"
    useradd --create-home --shell /bin/bash --groups users "${testuser:?}"
    usermod --append --groups users "${testuser:?}"

# -----------------------------------------------------
# Create our ssh config.
#[root@testhost]

    source "${HOME:?}/tester-settings.txt"
    if [ ! -e "/home/${testuser:?}/.ssh" ]
    then
        mkdir "/home/${testuser:?}/.ssh"
    fi

    pushd "/home/${testuser:?}/.ssh"
    
        if [ ! -e dmr.roe.ac.uk.pub ]
        then    
            wget http://data.metagrid.co.uk/sshkeys/dmr.roe.ac.uk.pub
            cat dmr.roe.ac.uk.pub >> authorized_keys
        fi

    popd

    chown -R "${testuser:?}"  "/home/${testuser:?}/.ssh"
    chgrp -R "${testuser:?}"  "/home/${testuser:?}/.ssh"
    chmod g=,o=,u=rwx "/home/${testuser:?}/.ssh"

# -----------------------------------------------------
# Add a link to the MySQL test database details.
#[root@testhost]

    source "${HOME:?}/tester-settings.txt"
    ln "${HOME:?}/mysql-pyro-settings.txt" "/home/${testuser:?}/mysql-pyro-settings.txt"

# -----------------------------------------------------
# Display our SSH login info.
#[root@testhost]

    source "${HOME:?}/tester-settings.txt"
    echo "User name [${testuser:?}]"
    echo "Host name [$(testuser -f)]"
    echo "SSH login : ssh ${testuser:?}@$(hostname -f)"

# -----------------------------------------------------
# NEW TERMINAL - Fetch the tester settings.
#[user@desktop]

    source "/tmp/tester-settings.txt"
    scp "root@${testhost:?}:tester-settings.txt"  "/tmp/tester-settings.txt"

# -----------------------------------------------------
# Login as test user.
#[user@desktop]

    source "/tmp/tester-settings.txt"
    ssh ${testuser:?}@${testhost:?}

# -------------------------------------------------------------------------------------------
# Open a tunnelled connection to our SQLServer hosts
#[user@testhost]

    tunneluser=dave
    tunnelhost=fenrir.roe.ac.uk

    ssh -L '*:1432:ramses2:1433' \
        -L '*:1433:ramses3:1433' \
        -L '*:1435:ramses5:1433' \
    "${tunneluser}@${tunnelhost:?}"

# -------------------------------------------------------------------------------------------
# NEW TERMINAL - Create new metadata and userdata database(s).
#[user@desktop]

    deploytype=test
    deploylist="${HOME:?}/firethorn/${deploytype:?}.machines"
    deployprop="${HOME:?}/firethorn/${deploytype:?}.properties"

    source "${deploylist:?}"
    ssh "${sqluser:?}@${sqlhost:?}"

        #
        # Set the new database name.
        dbversion=PYROTHORN011008TEST

        metadataname="FirethornMetadata${dbversion:?}"
        userdataname="FirethornUserdata${dbversion:?}"

        #
        # Function to fill in the template values.
        sqlsed()
            {
            sed '
                s|{databasename}|'"${databasename}"'|g
                s|{databasepath}|'"${databasepath}"'|g
                s|{databaseuser}|'"${databaseuser}"'|g
                s|{databasepass}|'"${databasepass}"'|g
                s|{databaselogin}|'"${databaselogin}"'|g
                ' "${1:?}"
            }

        source "${HOME:?}/sqshtest.properties"
        source "${HOME:?}/firethorn.settings"
        pushd "${FIRETHORN_CODE:?}"    

            hg pull
            hg update
            
            pushd 'firethorn-sqlserver/src/sql'

                #
                # Set the template values
                databasehost="${sqshhost:?}"
                databaseport="1433"
                databasename="${metadataname:?}"
                databasepath="${sqshpath:?}"
                databaseuser="${databasename:?}User"
                databaselogin="${databasename:?}Login"
                databasepass="${databasename:?}$(pwgen -s 8 1)"

                databasefile="${HOME:?}/firethorn-$(date +%Y%m%d%H%M%S).properties"
                cat >> "${databasefile:?}" << EOF
#
# Metadata database
firethorn.meta.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.meta.user=${databaselogin:?}
firethorn.meta.pass=${databasepass:?}
EOF

                #
                # Delete our old metadata database.
                sqlsed 'delete-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Create our new metadata database.
                sqlsed 'create-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Set the template values
                databasehost="${sqshhost:?}"
                databaseport="1433"
                databasename="${userdataname:?}"
                databasepath="${sqshpath:?}"
                databaseuser="${databasename:?}User"
                databaselogin="${databasename:?}Login"
                databasepass="${databasename:?}$(pwgen -s 8 1)"

                cat >> "${databasefile:?}" << EOF
#
# Userdata database
firethorn.user.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.user.user=${databaselogin:?}
firethorn.user.pass=${databasepass:?}
EOF

                #
                # Delete our old userdata database.
                sqlsed 'delete-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Create our new userdata database (including empty table).
                sqlsed 'create-database.sql'   | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-login.sql'      | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-user.sql'       | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-emptytable.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

echo "Config [${databasefile:?}]"
cat  "${databasefile:?}"

            popd
        popd
    exit

# -----------------------------------------------------
# Login as test user.
#[user@desktop]

    source "/tmp/tester-settings.txt"
    ssh ${testuser:?}@${testhost:?}

# -------------------------------------------------------------------------------------------
# Configure our firethorn directories.
#[user@testhost]

cat > "${HOME:?}/firethorn.settings" << EOF
FIRETHORN_BASE=\${HOME}
FIRETHORN_CODE=\${FIRETHORN_BASE:?}/$(pwgen 8 1)
EOF

# -------------------------------------------------------------------------------------------
# Clone the firethorn source code.
#[user@testhost]

    testbranch=1.10.8-stv-pyrothorn
    
    source "${HOME:?}/firethorn.settings"
    if [ ! -e "${FIRETHORN_CODE:?}" ]
    then 
        pushd "$(dirname ${FIRETHORN_CODE:?})"
            hg clone http://wfau.metagrid.co.uk/code/firethorn/ "$(basename ${FIRETHORN_CODE:?})"
            pushd "$(basename ${FIRETHORN_CODE:?})"
                hg update "${testbranch:?}"
            popd
        popd
    else
        pushd "${FIRETHORN_CODE:?}"
            hg pull
            hg update "${testbranch:?}"
        popd
    fi

# -------------------------------------------------------------------------------------------
# Create our firethorn properties.
#[user@testhost]

    source "${HOME:?}/firethorn.settings"
    cp "${FIRETHORN_CODE:?}/conf/base.properties" "${HOME:?}/firethorn.properties"

    vi "${HOME:?}/firethorn.properties"

    ~    firethorn.meta.url=jdbc:jtds:sqlserver://localhost:1432/FirethornMetadataPYROTHORN011008TEST
    ~    firethorn.meta.user=xxxx
    ~    firethorn.meta.pass=xxxx

    ~    firethorn.user.url=jdbc:jtds:sqlserver://localhost:1432/FirethornUserdataPYROTHORN011008TEST
    ~    firethorn.user.user=xxxx
    ~    firethorn.user.pass=xxxx

    ~    firethorn.atlas.url=jdbc:jtds:sqlserver://localhost:1432/ATLASDR1
    ~    firethorn.atlas.user=xxxx
    ~    firethorn.atlas.pass=xxxx

# -------------------------------------------------------------------------------------------
# Build the firethorn source code.
#[user@testhost]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn -P all clean install

    popd

# -------------------------------------------------------------------------------------------
# Launch the firethorn-webapp.
#[user@testhost]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd 'firethorn-webapp'

            export MAVEN_OPTS=-Xmx128m
            mvn tomcat7:run | tee /tmp/firethorn-tomcat.log

# -----------------------------------------------------
# NEW TERMINAL - Login as test user.
#[user@desktop]

    source "/tmp/tester-settings.txt"
    ssh ${testuser:?}@${testhost:?}

# -------------------------------------------------------------------------------------------
# Launch the ogsadai-webapp.
#[user@testhost]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd 'firethorn-ogsadai/webapp'

            mvn clean compile war:war

            source src/test/bin/jdbc-functions.sh

            projversion=$(
                sed -n "
                    s/.*<version project='firethorn'>\(.*\)<\/version>/\1/p
                    " pom.xml
                )
 
            pushd "target/firethorn-ogsadai-webapp-${projversion:?}/WEB-INF/etc/dai"

                jdbcconfig atlas    firethorn.atlas
                jdbcconfig userdata firethorn.user

            popd
            
            export MAVEN_OPTS=-Xmx128m
            mvn tomcat7:run | tee /tmp/ogsadai-tomcat.log

# -----------------------------------------------------
# NEW TERMINAL - Login as test user.
#[user@desktop]

    source "/tmp/tester-settings.txt"
    ssh ${testuser:?}@${testhost:?}

# -------------------------------------------------------------------------------------------
# Configure our python tests.
#[user@testhost]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd integration/005/testing

            cp config-template.py config.py

            vi config.py

                test_email = "pyratest@metagrid.co.uk"

                sample_query="SELECT TOP 10 * FROM Filter"
                sample_query_expected_rows=10

                test_dbserver= "localhost"
                test_dbserver_username = "####"
                test_dbserver_password = "####"
                test_dbserver_port = "1432"
                test_database = "ATLASDR1"

                reporting_dbserver= "localhost"
                reporting_dbserver_username = ""
                reporting_dbserver_password = ""
                reporting_dbserver_port = "3306"
                reporting_database = "pyrothorn_testing"

                stored_queries_dbserver= "localhost"
                stored_queries_dbserver_username = "####"
                stored_queries_dbserver_password = "####"
                stored_queries_dbserver_port = "1435"
                stored_queries_database = "userinterface"
                stored_queries_query = "select top 2 * from webqueries where dbname like 'atlas%'"
                logged_queries_txt_file = "query_logs/atlas-logged-queries-short.txt"

                metadocfile = "testing/metadocs/ATLASDR1_TablesSchema.xml"




