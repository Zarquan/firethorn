#
#
# Copyright (c) 2013, ROE (http://www.roe.ac.uk/)
# All rights reserved.
#
# This information is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This information is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

# ------------------------------------------------------------
# Project paths
#

FIRETHORN_BASE=${FIRETHORN_BASE:-/var/local/projects/edinburgh/wfau/firethorn}
FIRETHORN_NAME=devel
FIRETHORN_CODE=${FIRETHORN_BASE?}/${FIRETHORN_NAME?}

# ------------------------------------------------------------
# Build our metadata service components. 
#

    pushd "${FIRETHORN_CODE?}/firethorn-tap"

        mvn clean install
        
    popd

    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/metadata/common"

        mvn clean install
        
    popd

    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/metadata/server"

        mvn clean install
        
    popd

    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/metadata/client"

        mvn clean install
        
    popd

# ------------------------------------------------------------
# Build and run the firethorn webapp 
#

    pushd "${FIRETHORN_CODE?}/firethorn-war"

        mvn clean tomcat7:run
        
    popd

# ------------------------------------------------------------
# Initialise our test metadata 
#

    base=$(mktemp --directory)
    pushd ${base?}

        #
        # Install the 'resty' wrapper for curl.
        curl -# -L http://github.com/micha/resty/raw/master/resty > resty
        source ./resty

        #
        # Install the 'pp' pretty print script.
        curl -# -L http://github.com/micha/resty/raw/master/pp > pp
        chmod a+x ./pp

        #
        # Set the base URL and options.
        metahostname=localhost
        metahostport=8080
        metabasename="http://${metahostname?}:${metahostport?}/firethorn"
        
        #
        # Unique name generator 
        unique()
            {
            date '+%Y%m%d-%H%M%S%N'
            }

        #
        # Create a 'define' function for setting heredoc variables.
        # http://stackoverflow.com/questions/1167746/how-to-assign-a-heredoc-value-to-a-variable-in-bash
        define()
            {
            IFS='\n' read -r -d '' ${1} || true;
            }

        #
        # Initialise our REST client.
        resty "${metabasename?}" -H 'Accept: application/json'

        # -------- --------
        # JDBC ....

        #
        # Create our JDBC TWOMASS resource.
        POST "/jdbc/resource/create" \
            -d "jdbc.resource.create.url=spring:RoeTWOMASS" \
            -d "jdbc.resource.create.name=jdbc-twomass" \
            | ./pp


        #
        # Create our JDBC UKIDSS resource.
        POST "/jdbc/resource/create" \
            -d "jdbc.resource.create.url=spring:RoeUKIDSS" \
            -d "jdbc.resource.create.name=jdbc-ukidssdr5" \
            | ./pp

        #
        # List the JDBC TWOMASS schema.
        GET "/jdbc/resource/1/schemas/select" | ./pp

        #
        # List the JDBC UKIDSS schema.
        GET "/jdbc/resource/2/schemas/select" | ./pp

        #
        # List the JDBC TWOMASS tables.
        GET "/jdbc/schema/1/tables/select" | ./pp

        #
        # List the JDBC UKIDSS tables.
        GET "/jdbc/schema/2/tables/select" | ./pp

        #
        # Get the details for the twomass_psc table.
        GET "/jdbc/schema/1/tables/select" \
            -q "jdbc.schema.table.select.name=twomass_psc" \
            | ./pp

# http://localhost:8080/firethorn/jdbc/table/5

        #
        # Get the details for the gcsPointSource table.
        GET "/jdbc/schema/2/tables/select" \
            -q "jdbc.schema.table.select.name=gcsPointSource" \
            | ./pp

# http://localhost:8080/firethorn/jdbc/table/120

        #
        # Get the details for the gcsSourceXtwomass_psc table.
        GET "/jdbc/schema/2/tables/select" \
            -q "jdbc.schema.table.select.name=gcsSourceXtwomass_psc" \
            | ./pp

# http://localhost:8080/firethorn/jdbc/table/41


        # -------- --------
        # ADQL ....

        #
        # Create a new ADQL resource.
        POST "/adql/resource/create" \
            --data "adql.resource.create.name=adql-workspace" \
            | ./pp

        #
        # Create a new ADQL schema.
        POST "/adql/resource/3/schemas/create" \
            --data "adql.resource.schema.create.name=adql_schema" \
            | ./pp

        #
        # Import the twomass table into the ADQL schema.
        POST "/adql/schema/3/tables/import" \
            --data "adql.schema.table.import.base=${metabasename?}/jdbc/table/5" \
            | ./pp

# http://localhost:8080/firethorn/adql/table/140

        #
        # Import the ukidss tables into the ADQL schema.
        POST "/adql/schema/3/tables/import" \
            --data "adql.schema.table.import.base=${metabasename?}/jdbc/table/41" \
            | ./pp

# http://localhost:8080/firethorn/adql/table/141

        POST "/adql/schema/3/tables/import" \
            --data "adql.schema.table.import.base=${metabasename?}/jdbc/table/120" \
            | ./pp

# http://localhost:8080/firethorn/adql/table/142

        #
        # Check the ADQL tables.
        GET "/adql/schema/3/tables/select" | ./pp

        #
        # Check the table mapping service.
        GET "/meta/table/JDBC_5" | ./pp

            {
               "resource" : null,
               "name" : "TWOMASS.dbo.twomass_psc",
               "alias" : "JDBC_5"
            }

        #
        # Check the column mapping service.
        GET "/meta/table/JDBC_5/column/ra" | ./pp

            {
               "source" : "JDBC_5",
               "name" : "ra",
               "type" : 0,
               "key" : false
            }

        GET "/meta/table/JDBC_5/columns" | ./pp

            [
               {
                  "source" : "JDBC_5",
                  "name" : "coadd",
                  "type" : 0,
                  "key" : false
               },
               ....
               {
                  "source" : "JDBC_5",
                  "name" : "cx",
                  "type" : 0,
                  "key" : false
               }
            ]

#
# Create our ADQL query.

define query << 'EOF'

    SELECT
        twomass.ra AS tmra,
        ukidss.ra  AS ukra,
        (twomass.ra - ukidss.ra) AS difra,
        twomass.dec AS tmdec,
        ukidss.dec  AS ukdec,
        (twomass.ra - ukidss.ra) AS difdec,
        neighbour.distanceMins AS dist
    FROM
        adql_schema.twomass_psc AS twomass,
        adql_schema.gcsPointSource AS ukidss,
        adql_schema.gcsSourceXtwomass_psc AS neighbour
    WHERE
        twomass.ra  >= '55.0'
    AND
        twomass.ra  <= '55.9'
    AND
        twomass.dec >= '20.0'
    AND
        twomass.dec <= '22.9'
    AND
        ukidss.ra  >= '55.0'
    AND
        ukidss.ra  <= '55.9'
    AND
        ukidss.dec >= '20.0'
    AND
        ukidss.dec <= '22.9'
    AND
        neighbour.masterObjID = ukidss.sourceID
    AND
        neighbour.slaveObjID = twomass.pts_key
    AND
        neighbour.distanceMins < 1E-3
EOF

        #
        # Create the ADQL query.
        POST "/adql/resource/3/queries/create" \
            --data-urlencode "adql.resource.query.create.name=test-query" \
            --data-urlencode "adql.resource.query.create.query=${query?}" \
            | ./pp


# ------------------------------------------------------------
# Build our OGSA-DAI activity components.
#

    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/activity/common"

        mvn install
        mvn eclipse:eclipse
        
    popd

    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/activity/server"

        mvn install
        mvn eclipse:eclipse
        
    popd

    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/activity/client"

        mvn install
        mvn eclipse:eclipse
        
    popd

# ------------------------------------------------------------
# Create a Junit test to send query to OGSA-DAI
#

    public class TestDqpQueryTestCase
    extends SimpleQueryTestBase
        {
        /**
         * TWOMASS and UKIDSSDR1, using DQP, using GT and LT on both tables.
         *
         */
        @Test
        public void test100()
        throws Exception
            {
            execute(
                endpoint,
                "mydqp",
                " SELECT" +
                "     twomass.ra AS tmra," +
                "     ukidss.ra AS ukra," +
                "     twomass.ra - ukidss.ra AS difra," +
                "     twomass.dec AS tmdec," +
                "     ukidss.dec AS ukdec," +
                "     twomass.ra - ukidss.ra AS difdec," +
                "     neighbour.distanceMins AS dist" +
                " FROM" +
                "     JDBC_5 AS twomass" +
                " CROSS JOIN" +
                "     JDBC_120 AS ukidss" +
                " CROSS JOIN" +
                "     JDBC_41 AS neighbour" +
                " WHERE" +
                "     twomass.ra >= '55.0'" +
                " AND" +
                "     twomass.ra <= '55.9'" +
                " AND" +
                "     twomass.dec >= '20.0'" +
                " AND" +
                "     twomass.dec <= '22.9'" +
                " AND" +
                "     ukidss.ra >= '55.0'" +
                " AND" +
                "     ukidss.ra <= '55.9'" +
                " AND" +
                "     ukidss.dec >= '20.0'" +
                " AND" +
                "     ukidss.dec <= '22.9'" +
                " AND" +
                "     neighbour.masterObjID = ukidss.sourceID" +
                " AND" +
                "     neighbour.slaveObjID = twomass.pts_key" +
                " AND" +
                "     neighbour.distanceMins < 1E-3"
                );
            }
        }

# ------------------------------------------------------------
# Create a new DQP contet using our MetadataServiceFactoryImpl  ...
#

    <bean id="federation" 
        class="uk.org.ogsadai.dqp.firethorn.MetadataServiceDQPFederation">

        <property name="metadataServiceFactory">

            <bean class="uk.ac.roe.wfau.firethorn.ogsadai.metadata.client.MetadataServiceFactoryImpl">
                <constructor-arg name="endpoint" value="http://localhost:8080/firethorn/"/>
            </bean>

        </property>


# ------------------------------------------------------------
# Build and run the OGSA-DAI webapp.

    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/webapp"

        mvn clean
        mvn install

#---------------------------------------------------
# Deploy the ogsadai webapp in Tomcat ...
#
    #
    # Shell script function to configure the JDBC resources.
    dbconfg()
        {
        local dbname=${1?}
        local dbconf=${2?}

        local dbtype="$(sed -n 's/^type=\(.*\)/\1/p' ${dbconf?})"
        local dbdata="$(sed -n 's/^name=\(.*\)/\1/p' ${dbconf?})"
        local dbuser="$(sed -n 's/^user=\(.*\)/\1/p' ${dbconf?})"
        local dbpass="$(sed -n 's/^pass=\(.*\)/\1/p' ${dbconf?})"

        local dbdrv
        local dburi

        case ${dbtype?} in

            pgsql)
                echo "Postgresql database"
                dbdrv=org.postgresql.Driver
                dburi=jdbc:postgresql://localhost:5432
                ;;

            mssql)
                echo "SQLServer database"
                dbdrv=net.sourceforge.jtds.jdbc.Driver
                dburi=jdbc:jtds:sqlserver://localhost:1433
                ;;

            *)  echo "ERROR : unknown database type [${dbtype}]"
                ;;
        esac

        #
        # Set the database driver and url.
        sed -i '
            s|^dai.driver.class=.*|dai.driver.class='${dbdrv}'|
            s|^dai.data.resource.uri=.*|dai.data.resource.uri='${dburi}/${dbdata?}'|
            ' "target/ogsadai-webapp-1.0-SNAPSHOT/WEB-INF/etc/dai/resources/${dbname?}"

        #
        # Set the database password.
        sed -i '
            /^id='${dbname?}'/,/^END/ {
                s|^username=.*|username='${dbuser?}'|
                s|^password=.*|password='${dbpass?}'|
                }
            ' "target/ogsadai-webapp-1.0-SNAPSHOT/WEB-INF/etc/dai/logins.txt"
        }

    pushd ${FIRETHORN_CODE?}/firethorn-ogsadai/webapp

        #
        # Create a clean war file.
        mvn clean compile war:war

        #
        # Set the database passwords.
        dbconfg twomass /etc/firethorn/livetwomass.conf
        dbconfg ukidss  /etc/firethorn/liveukidss.conf
        dbconfg uber    /etc/firethorn/livetwoxmm.conf

        #
        # Run the webapp in Tomcat
        mvn tomcat6:run | tee /tmp/ogsadai-tomcat.log
        
    popd

# ------------------------------------------------------------
# Run the OGSA-DAI query tests ..
 

    2013-02-22 16:50:16,541 WARN  event.LoggingActivityListener [pool-1-thread-2,warnExceptionAndChildren:343] #1361551816540:115# A user problem has occured during activity processing.
    2013-02-22 16:50:16,541 WARN  event.LoggingActivityListener [pool-1-thread-2,warnExceptionAndChildren:343] #1361551816540:115# A user problem has occured during activity processing.
    2013-02-22 16:50:16,542 WARN  event.LoggingActivityListener [pool-1-thread-2,warnExceptionAndChildren:343] #1361551816540:115# uk.org.ogsadai.SQL_PARSER_EXCEPTION
    2013-02-22 16:50:16,544 WARN  event.LoggingActivityListener [pool-1-thread-2,warnExceptionAndChildren:343] #1361551816540:115# uk.org.ogsadai.MISMATCHED_TOKEN_EXCEPTION : 1, 239, CROSS


    SELECT     twomass.ra AS tmra,     ukidss.ra AS ukra,     twomass.ra-ukidss.ra AS difra,     twomass.dec AS tmdec,     ukidss.dec AS ukdec,     twomass.ra-ukidss.ra AS difdec,     neighbour.distanceMins AS dist FROM     JDBC_5 AS twomass CROSS JOIN     JDBC_120 AS ukidss CROSS JOIN     JDBC_41 AS neighbour WHERE     twomass.ra >= '55.0' AND     twomass.ra <= '55.9' AND     twomass.dec >= '20.0' AND     twomass.dec <= '22.9' AND     ukidss.ra >= '55.0' AND     ukidss.ra <= '55.9' AND     ukidss.dec >= '20.0' AND     ukidss.dec <= '22.9' AND     neighbour.masterObjID = ukidss.sourceID AND     neighbour.slaveObjID = twomass.pts_key AND     neighbour.distanceMins < 1E-3
    line 1:239 mismatched input 'CROSS' expecting EOF

#
# Works if we replace 'CROSS JOIN' with ','
#

# ----------------------------------------------------------------------------------------
#

        // I HATE GENERICS
        @SuppressWarnings("unchecked")
        Iterable<BaseColumn<?>> cols = (Iterable<BaseColumn<?>>) factories().base().tables().resolve(
            alias
            ).root().columns().select();

# ------------------------------------------------------------
# TODO

    Need to fix the CDS ADQL parser output to handle that.
    ** blocker **
    Add our own translator - more testing.

    Need a list of what ADQL isn't supported, and what the alternatives are.
    REGION ...
    
    Need a list of what SQL isn't supported, and what the alternatives are.
    CROSS JOIN, BETWEEN

    Simple fix - replace 'CROSS JOIN' with ','

# ------------------------------------------------------------
# TODO

    Need column types.
    - default read from JDBC type
    - mapping from JDBC type to OGSA type

    Need OGSA resource ID in base resource.

# ------------------------------------------------------------
# TODO

    TAP service
    UWS async job control

# ------------------------------------------------------------
# TODO

    OGSA-DAI activities
    DQP query
    Write results to user space

# ------------------------------------------------------------
# TODO

    Login / auth database tables
    Session cookies and webservice API ...








