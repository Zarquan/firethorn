#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2017, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


    source "${HOME}/projects.settings"
    source "${HOME}/firethorn.settings"
    FIRETHORN_PY_BASE="${EDINBURGH_PROJECTS:?}/ftpy/github.zrq-002"
    FIRETHORN_PY_BASE="${EDINBURGH_PROJECTS:?}/ftpy/github.stv"
    FIRETHORN_PY_CODE="${FIRETHORN_PY_BASE:?}/firethorn"

    DISTICTELLA_BASE=${FIRETHORN_CODE}/docker/compose/tests/distictella/

# -----------------------------------------------------
# Fetch our branch name.
#[user@virtual]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        buildtag=$(hg branch)

    popd

# -----------------------------------------------------
# Create our chain properties.
#[user@virtual]

    source "${HOME:?}/secret.sh"
    secret frog
    
    cat > "${HOME:?}/chain.properties" << EOF

        buildtag=${buildtag:?}
        
        metauser=$(pwgen 20 1)
        metapass=$(pwgen 20 1)

        userhost=$(secret 'firethorn.user.host')
        userdata=$(secret 'firethorn.user.data')
        useruser=$(secret 'firethorn.user.user')
        userpass=$(secret 'firethorn.user.pass')

        datahost=$(secret 'firethorn.data.host')
        datadata=$(secret 'firethorn.data.data')
        datauser=$(secret 'firethorn.data.user')
        datapass=$(secret 'firethorn.data.pass')

        tunneluser=$(secret 'ssh.tunnel.user')
        tunnelhost=$(secret 'ssh.tunnel.host')

        admingroup=wombles
        adminuser=orinoco
        adminpass=$(pwgen 20 1)

        guestgroup=friends

        zelltype=pgsql
        zellhost=zelleri
        zelldata=postgres
        zelluser=$(pwgen 20 1)
        zellpass=$(pwgen 20 1)

EOF

# -----------------------------------------------------
# Create our compose config.
#[user@virtual]

    rm "${HOME:?}/.env"
    ln -s "${HOME:?}/chain.properties" "${HOME:?}/.env"

# -----------------------------------------------------
# Build our Docker images.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)

        docker-compose \
            --file docker/compose/images.yml \
            build

    popd

#---------------------------------------------------------------------
# Compile our Java code.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our Java containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)
        pushd firethorn-ogsadai/webapp
            mvn docker:package
        popd

        export buildtag=$(hg branch)
        pushd firethorn-webapp
            mvn docker:package
        popd

    popd

# -----------------------------------------------------
# Take down our Python client container.
#[user@desktop]

    export buildtag
    export FIRETHORN_PY_BASE
    export DISTICTELLA_BASE

    docker-compose \
        --file "${DISTICTELLA_BASE:?}/distictella.yml" \
        down

# -----------------------------------------------------
# Build our Python client container.
#[user@desktop]

    export buildtag
    export FIRETHORN_PY_BASE
    export DISTICTELLA_BASE

    docker-compose \
        --file "${DISTICTELLA_BASE:?}/distictella.yml" \
        build \
            distictella

# -----------------------------------------------------
# Run our Python client container.
#[user@desktop]

    docker-compose \
        --file "${DISTICTELLA_BASE:?}/distictella.yml" \
        run \
            distictella

# -----------------------------------------------------
# Run our Python client.
#[user@pyclient]

import os
import firethorn as ftpy

#
# Create our firethorn client.
firethorn = ftpy.Firethorn(
    os.environ.get(
        'endpoint'
        ),
    )

#
# Login using the admin account.
firethorn.login(
    os.environ.get('adminuser'),
    os.environ.get('adminpass'),
    os.environ.get('admingroup')
    )

#
# Create a JdbcResource to connect to the ATLAS database.
atlas_jdbc = firethorn.firethorn_engine.create_jdbc_resource(
    "ATLAS JDBC resource",
    os.environ.get('datadata'),
    '*',
    os.environ.get('datatype'),
    os.environ.get('datahost'),
    os.environ.get('datauser'),
    os.environ.get('datapass'),
    )

print(
    atlas_jdbc
    )

#
# Create an AdqlResource to represent the JdbcResource.
atlas_adql = firethorn.firethorn_engine.create_adql_resource(
    "ATLAS ADQL resource"
    )

print(
    atlas_adql
    )

#
# List the top level AdqlResources.
resources = firethorn.firethorn_engine.select_adql_resources()

#
# Iterate the AdqlResources.
for resource in resources:
    print(
        resource
        )

#
# Import the Jdbc to Adql mappings.
mappings = [
    "ATLASDR1",
    "DENIS",
    "FIRST",
    "GLIMPSE",
    "IRAS",
    "ROSAT",
    "TWOMASS",
    "VHSDR1",
    "VIKINGDR3",
    "WISE"
    ]

for mapping in mappings:
    print(mapping)
    jdbc_schema = atlas_jdbc.select_schema_by_name(
        mapping,
        "dbo"
        )
    if (None != jdbc_schema):
        metadoc="https://raw.githubusercontent.com/wfau/metadata/master/metadocs/" + mapping + "_TablesSchema.xml"
        adql_schema = atlas_adql.import_jdbc_schema(
            jdbc_schema,
            mapping,
            metadoc=metadoc
            )

#
# List the Atlas schemas.
schemas = atlas_adql.select_schemas()
#
# Iterate the Atlas schemas.
for schema in schemas:
    print(
        schema
        )

#
# Select the TWOMASS schema.
twomass = atlas_adql.select_schema_by_name(
    'TWOMASS'
    )
print(
    twomass
    )

#
# Select the schema tables.
tables = twomass.select_tables()
for table in tables:
    print(
        table
        )

#
# Select the psc table.
table = twomass.select_table_by_name(
    'twomass_psc'
    )
print(
    table
    )

#
# Select the table columns.
columns = table.select_columns()
for column in columns:
    print(
        column
        )



