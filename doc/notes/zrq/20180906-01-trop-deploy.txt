#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# TODO - Make the virtual machines start on boot.
# TODO - Make the containers start on boot.

# -----------------------------------------------------
# Shutdown the existing proxy VM on trop01
#[user@trop01]

    vmname=Astoalith

    source "${HOME}/libvirt.settings"
    virsh -c ${connection:?} \
        shutdown \
            "${vmname:?}"

# -----------------------------------------------------
# Get the MAC address of the public interface.
#[user@trop01]

    source "${HOME}/libvirt.settings"
    virsh -c ${connection:?} \
        dumpxml \
            "${vmname:?}" \
        | tee "${vmname:?}.xml"

    devtype=$(
        xmllint \
            --xpath "string(//interface[source[@network='bridged']]/@type)" \
            "${vmname:?}.xml"
        )

    macaddr=$(
        xmllint \
            --xpath "string(//interface[source[@network='bridged']]/mac/@address)" \
            "${vmname:?}.xml"
            )

    echo "Interface [${devtype:?}][${macaddr:?}]"

# -----------------------------------------------------
# Remove the public interface.
#[user@trop01]

    source "${HOME}/libvirt.settings"
    virsh -c ${connection:?} \
        detach-interface \
            "${vmname:?}" \
            "${devtype:?}" \
            --mac "${macaddr:?}" \
            --config

    virsh -c ${connection:?} \
        dumpxml \
            "${vmname:?}" \
        | xmllint --xpath '//interface' -


# -----------------------------------------------------
# -----------------------------------------------------
# Settings for float1 on trop02
#[user@trop02]

    newnetname=ens7
    newaddress=129.215.175.100
    newmacaddr=52:54:00:00:01:00

# -----------------------------------------------------
# Generic settings for the ROE network.
#[user@trop02]

    roegateway=129.215.175.126
    roenetwork=129.215.175.0
    roenetmask=255.255.255.0

# -----------------------------------------------------
# Virtual machine name.
#[user@trop02]

    vmname=Acilamwen
    vmuser=Stevedore

# -----------------------------------------------------
# Login to the new VM and configure the network interface.
#[user@trop02]

    ssh "${vmuser:?}@${vmname:?}" << EOSH

        sudo -s

        cat > /etc/sysconfig/network-scripts/ifcfg-${newnetname:?} << EOF
NAME=${newnetname:?}
DEVICE=${newnetname:?}
ONBOOT=yes
TYPE=Ethernet
BOOTPROTO=static
IPV4INIT=yes
IPV6INIT=yes
HWADDR=${newmacaddr:?}
NETWORK=${roenetwork:?}
NETMASK=${roenetmask:?}
GATEWAY=${roegateway:?}
IPADDR=${newaddress}
EOF
EOSH

# -----------------------------------------------------
# Login to the new VM and configure the default route.
#[user@trop02]

    ssh "${vmuser:?}@${vmname:?}" << EOSH

        sudo -s

        sed -i '
            s/^GATEWAYDEV=.*/GATEWAYDEV=${newnetname:?}/
            ' /etc/sysconfig/network
EOSH

#---------------------------------------------------------------------
# Use virsh to attach an new (virtual) network interface to the VM.
#[user@trop02]

    source "${HOME}/libvirt.settings"
    virsh -c ${connection:?} \
        attach-interface \
            "${vmname:?}" \
            'network' \
            'bridged' \
            --model 'virtio' \
            --mac "${newmacaddr:?}" \
            --live \
            --config

    virsh -c ${connection:?} \
        dumpxml \
            "${vmname:?}" \
        | xmllint --xpath '//interface' -


# -----------------------------------------------------
# Login to the VM and initialise the interface.
#[user@trop02]

    ssh "${vmuser:?}@${vmname:?}" << EOSH

        sudo -s
        ifup "${newnetname:?}"

EOSH

# -----------------------------------------------------
# Reboot the new VM to force an update.
# We should be able to avoid this .. but for now ..
#[user@trop02]

    source "${HOME}/libvirt.settings"
    virsh -c ${connection:?} \
        reboot "${vmname:?}"

# -----------------------------------------------------
# -----------------------------------------------------
# Login to the VM.
#[user@trop02]

    ssh "${vmuser:?}@${vmname:?}"

# -----------------------------------------------------
# Set the target version.
#[user@virtual]

        export buildtag=2.1.25

# -----------------------------------------------------
# Deploy our Apache container.
#[user@virtual]

        docker run \
            --detach \
            --name 'apache' \
            --publish '80:80' \
            --restart 'always' \
            "firethorn/apache:${buildtag}"

# -----------------------------------------------------
# Use the proxy template to create our proxy config.
#[user@virtual]

        globalname=tap.roe.ac.uk
        servername=tap.roe.ac.uk
        serveralias=tap.metagrid.xyz
        serveradmin=tap-admin@metagrid.xyz
        confname=${servername:?}.conf

        firehost=siamond
        tapident=54

        #
        # Extract a copy of the template from the container.
        docker cp \
            'apache:/etc/httpd/conf.d/proxy-template' \
            "${confname:?}"

        #
        # Fill in the global values.
        sed -i "
            s/{globalname}/${globalname:?}/
            s/{servername}/${servername:?}/
            s/{serveralias}/${serveralias:?}/
            s/{serveradmin}/${serveradmin:?}/
            " "${confname:?}"

        #
        # Fill in the firethorn values.
        sed -i "
            /PROXY ENTRIES HERE/,/PROXY ENTRIES DONE/ {
                s/{firehost}/${firehost:?}/
                /\^\/firethorn/ {
                    s/#\(Proxy\)/\1/
                    }
                }
            " "${confname:?}"

        #
        # Fill in the OSA values.
        sed -i "
            /PROXY ENTRIES HERE/,/PROXY ENTRIES DONE/ {
                /\^\/osa/ {
                    s/#\(Proxy\)/\1/
                    s/{tapident}/${tapident:?}/
                    }
                }
            " "${confname:?}"

        #
        # Copy the new config file into the container.
        docker cp \
            "${confname:?}" \
            "apache:/etc/httpd/conf.d/${confname:?}"

        #
        # Send Apache the 'reload' signal.
        docker kill --signal 'USR1' 'apache'

# -----------------------------------------------------
# -----------------------------------------------------
# Test we can access the web server from inside the ROE network.
#[user@desktop]

    testname=tap.metagrid.xyz
    testname=tap.roe.ac.uk

    ssh -q trop01 "curl --silent --show-error --head http://${livename:?}/osa/availability"
    ssh -q trop02 "curl --silent --show-error --head http://${livename:?}/osa/availability"
    ssh -q trop03 "curl --silent --show-error --head http://${livename:?}/osa/availability"
    ssh -q trop04 "curl --silent --show-error --head http://${livename:?}/osa/availability"
    => PASS

    ssh -q shep "curl --silent --show-error --head http://${livename:?}/osa/availability"
    => PASS

# -----------------------------------------------------
# -----------------------------------------------------
# Test we can access the web server from outside the ROE network.
#[user@desktop]

    testname=tap.metagrid.xyz
    livename=tap.roe.ac.uk

    ssh -q data "curl --silent --show-error --head http://${testname:?}/osa/availability"
    => FAIL (routing of respose packets via default route)

    ssh -q data "curl --silent --show-error --head http://${livename:?}/osa/availability"
    => PASS

# -----------------------------------------------------
# -----------------------------------------------------
# Test we can access Firethorn from outside the ROE network.
#[user@desktop]

    testname=tap.metagrid.xyz
    livename=tap.roe.ac.uk

    curl --silent --show-error "http://${testname:?}/firethorn/system/info"
    => FAIL (routing of respose packets via default route)

    curl --silent --show-error "http://${livename:?}/firethorn/system/info"
    => PASS

# -----------------------------------------------------
# -----------------------------------------------------
# Test we can access Firethorn from outside the ROE network.
#[user@desktop]

    docker run \
        --rm \
        --tty \
        --interactive \
        --env 'endpoint=http://tap.roe.ac.uk/firethorn' \
        "firethorn/firethorn-py:latest" \
        python3

# -----------------------------------------------------
# Run our Python client.
#[python]

import os
import uuid
import time
import firethorn as ftpy

#
# Create our Firethorn client.
firethorn = ftpy.Firethorn(
    endpoint = os.environ.get(
        'endpoint'
        )
    )

#
# Login using a guest account.
firethorn.login(
    str(uuid.uuid4()),
    str(uuid.uuid4()),
    None
    )

#
# Get the Atlas AdqlResource.
resource = firethorn.firethorn_engine.select_adql_resources()[0]

#
# Create and run a query on the resource.
query_str = "SELECT TOP 1000 ra, dec FROM ATLASDR1.atlasSource"
query_obj = resource.create_query(
    query_str,
    "COMPLETED",
    None,
    3000000
    )
print(
    query_obj
    )
print(
    query_obj.table()
    )
print(
    query_obj.table().count()
    )

#
# Iterate the metadata tree
for schema in resource.select_schemas():
    for table in schema.select_tables():
        print(
            "table  [{}][{}][{}]".format(
                schema.name(),
                table.name(),
                table.count(),
                )
            )
        query_str = "SELECT TOP 10 * FROM {}.{}".format(
            schema.name(),
            table.name()
            )
        query_obj = resource.create_query(
            query_str,
            "COMPLETED",
            None,
            3000000
            )
        py_table = query_obj.table().as_astropy()
        py_table.pprint()














































