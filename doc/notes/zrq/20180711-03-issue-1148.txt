#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Start our containers ...
#[user@virtual]

    docker-compose \
        --file "baryptera-local.yml" \
        run \
            angela

# -----------------------------------------------------
# Run our Python tests ...
#[user@virtual]


#
# Create our firethorn client and point it at our test service.

import os
import uuid
import time
import firethorn as ftpy

firethorn = ftpy.Firethorn(
    'http://tap.metagrid.xyz/firethorn/'
    )

#
# Login as a guest user.
firethorn.login(
    str(uuid.uuid4()),
    str(uuid.uuid4()),
    None
    )

#
# Start with the WSA resource ..
# http://tap.metagrid.xyz/firethorn/adql/resource/54
from models.resource import Resource 
from adql.adql_resource import AdqlResource

resource = Resource(
    adql_resource = AdqlResource(
        url = 'http://tap.metagrid.xyz/firethorn/adql/resource/54',
        account = firethorn.identity()
        )
    )

#
# Iterate the catalog schemas querying each in turn.
results=dict()
errors=dict()
for schema in resource.get_schemas():
    for table in schema.get_tables():
        print(
            "table  [{}][{}]".format(
                schema.name(),
                table.name()
                )
            )
        if (table.name() == 'Region'):
            print("---------------")
            print("Skipping region")
            print("---------------")
        else:
            query_str = "SELECT TOP 10 * FROM {}.{}".format(
                schema.name(),
                table.name()
                )
            query_obj = resource.query(
                query_str
                )
            py_table = query_obj.results().as_astropy()
            py_table.pprint()
            fullname = schema.name() + '.' + table.name()
            rowcount = query_obj.results().rowcount()
            results[fullname] = rowcount
            if (rowcount < 10):
                errors[fullname] = rowcount

