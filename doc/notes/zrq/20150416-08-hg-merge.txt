#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------
# Create a new virtual machine
#[user@shep]

    createvm

        ....
        ....
        
        INFO : Node name [desouk]
        INFO : Base name [fedora-21-16G-20150407.qcow]
        INFO : Base path [/home/dave/projects/libvirt/base/fedora-21-16G-20150407.qcow]
        INFO : Disc name [desouk.qcow]
        INFO : Disc size [16GiB]

# -----------------------------------------
# Install missing tools.
#[root@virtual]

    yum -y install htop
    yum -y install pwgen
    
# -----------------------------------------------------
# Install and start the HAVEGE entropy generator.
# http://redmine.roe.ac.uk/issues/828
# http://blog-ftweedal.rhcloud.com/2014/05/more-entropy-with-haveged/
# http://stackoverflow.com/questions/26021181/not-enough-entropy-to-support-dev-random-in-docker-containers-running-in-boot2d/
#[root@edfu]

    yum install -y haveged
    systemctl start haveged.service

# -----------------------------------------------------
# Install and run Docker.
#[root@virtual]

    yum -y install docker-io

    systemctl enable docker.service
    systemctl start  docker.service
    systemctl status docker.service

# -----------------------------------------------------
# Set our target versions.
#[root@virtual]

    branch=1.13.9-zrq-demo-config
    version=1.13.10

# -----------------------------------------------------
# Create our projects directory.
#[root@virtual]

    if [ ! -e /var/local/projects ]
    then
        mkdir -p /var/local/projects
        chgrp -R users /var/local/projects
        chmod -R g+rwx /var/local/projects
    fi

# -----------------------------------------------------
# Create our cache directory.
#[root@virtual]

    if [ ! -e /var/local/cache ]
    then
        mkdir -p /var/local/cache
        chgrp -R users /var/local/cache
        chmod -R g+rwx /var/local/cache
    fi

# -----------------------------------------------------
# Allow access to Docker containers.
#[root@virtual]

    chcon -t svirt_sandbox_file_t "/var/local/projects" 
    chcon -t svirt_sandbox_file_t "/var/local/cache" 

# -----------------------------------------------------
# Install the selinux-dockersock SELinux policy.
# https://github.com/dpw/selinux-dockersock
#[root@virtual]

    # Test if present
    # semodule -l | grep dockersock

    if [ $(semodule -l | grep -c dockersock) -eq 0 ]
    then
        yum install -y git
        yum install -y make
        yum install -y checkpolicy
        yum install -y policycoreutils policycoreutils-python
        
        pushd /var/local/projects

            if [ ! -e selinux-dockersock ]
            then
                git clone https://github.com/dpw/selinux-dockersock
            fi

            pushd selinux-dockersock

                make dockersock.pp

                semodule -i dockersock.pp

            popd
        popd
    fi

# -----------------------------------------------------
# Run our build container.
#[root@virtual]

    docker run \
        -it --rm \
        --name builder \
        --env "branch=${branch:?}" \
        --env "version=${version:?}" \
        --volume /var/local/cache:/cache \
        --volume /var/local/projects:/projects \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/builder:1 \
        bash

# -----------------------------------------------------
# Update our path.
#[root@builder]

    # ** this should be in the container **
    source /etc/bashrc

# -----------------------------------------------------
# Checkout a copy of our source code.
#[root@builder]

    #
    # Set the project path.
    if [ ! -e "${HOME:?}/firethorn.settings" ]
    then
        cat > "${HOME:?}/firethorn.settings" << EOF
FIRETHORN_CODE=/projects/firethorn
EOF
    fi

    #
    # Clone our repository.
    source "${HOME:?}/firethorn.settings"
    if [ ! -e "${FIRETHORN_CODE:?}" ]
    then
        pushd "$(dirname ${FIRETHORN_CODE:?})"

            hg clone 'http://wfau.metagrid.co.uk/code/firethorn'

        popd
    fi

    #
    # Pull and update from branch.
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        hg pull
        hg update "${branch:?}"
        hg branch
    
    popd

# -----------------------------------------------------
# Merge the changes into main.
#[root@builder]

    newversion=${version:?}

    source "${HOME:?}/firethorn.settings"
    source "${FIRETHORN_CODE:?}/bin/util.sh"

    pushd "${FIRETHORN_CODE:?}"

        #
        # Get the current version
        devbranch=$(getversion)
        echo "devbranch [${devbranch:?}]"

        #
        # Check for changes
        hg status

        #
        # Merge and commit local changes
        # Push/pull the latest changes

        #
        # Swap to the main branch and get the version.
        hg update 'default'
        oldversion=$(getversion)

        echo "devbranch [${devbranch:?}]"
        echo "oldversion [${oldversion:?}]"
        echo "newversion [${newversion:?}]"

        #
        # Merge the dev branch.
        hg merge "${devbranch:?}"

        #
        # Update the main version.
        setversion "${newversion:?}"

    popd

#
# Testing should go here
# Merge and commit after
#


# -----------------------------------------------------
# Start our docker-proxy container.
#[root@builder]

    docker run \
        --detach \
        --name "docker-proxy" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/docker-proxy:1

    dockerip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' docker-proxy)

    echo "${dockerip:?}"
    curl "http://${dockerip:?}:2375/version"

# -----------------------------------------------------
# Build our webapp services.
#[root@builder]

    #
    # Build our webapp services.
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our webapp containers.
#[root@builder]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd firethorn-ogsadai/webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd
        
        pushd firethorn-webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd

    popd

# -----------------------------------------------------
# Build our tester container.
#[root@builder]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        docker build \
            --tag firethorn/tester:$(getversion) \
            integration/tester

    popd

# -----------------------------------------------------
# Exit our builder container.
#[root@builder]

    exit

# -----------------------------------------------------
# Configure our docker chain.
#[root@virtual]

    metaname=bethany
    username=patricia
    dataname=elayne
    ogsaname=jarmila
    firename=gillian

    metalink=albert
    userlink=edward
    datalink=sebastien
    ogsalink=timothy
    firelink=peter

    metadata=postgres
    metauser=$(pwgen 20 1)
    metapass=$(pwgen 20 1)

    mssqlhost=ramses2
    mssqlport=1433
    
    userdata=FirethornUserdataZRQ20150311DEV
    useruser=FirethornUserdataZRQ20150311DEVLogin
    userpass=FirethornUserdataZRQ20150311DEVBf8Xj3ow
    userhost=${mssqlhost:?}

    datahost=${mssqlhost:?}

# -----------------------------------------------------
# Run our userdata ambassador.
#[root@virtual]

    docker run \
        --detach \
        --name "${username:?}" \
        --env  "target=${userhost:?}" \
        firethorn/sql-proxy:1

# -----------------------------------------------------
# Run our science data ambassador.
#[root@virtual]

    docker run \
        --detach \
        --name "${dataname:?}" \
        --env  "target=${datahost:?}" \
        firethorn/sql-proxy:1

# -----------------------------------------------------
# Run our PostgreSQL metadata container.
#[root@virtual]

    docker run \
        --detach \
        --name "${metaname:?}" \
        --env "POSTGRES_USER=${metauser:?}" \
        --env "POSTGRES_PASSWORD=${metapass:?}" \
        postgres

# -----------------------------------------------------
# Run our OGSA-DAI container.
#[root@virtual]

    docker run \
        --detach \
        --publish 8081:8080 \
        --name "${ogsaname:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        "firethorn/ogsadai:${version:?}"

# -----------------------------------------------------
# Create our FireThorn config.
#[root@virtual]

    properties=$(mktemp)
    cat > "${properties:?}" << EOF

firethorn.ogsadai.endpoint=http://${ogsalink:?}:8080/ogsadai/services

firethorn.meta.url=jdbc:postgresql://${metalink:?}/${metadata:?}
firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}
firethorn.meta.driver=org.postgresql.Driver

firethorn.user.url=jdbc:jtds:sqlserver://${userlink:?}/${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}
firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver
firethorn.user.type=mssql

EOF

    chmod a+r "${properties:?}" 
    chcon -t svirt_sandbox_file_t "${properties:?}" 

# -----------------------------------------------------
# Run our FireThorn container.
#[root@virtual]

    docker run \
        --detach \
        --publish 8080:8080 \
        --name "${firename:?}" \
        --link "${ogsaname:?}:${ogsalink:?}" \
        --link "${metaname:?}:${metalink:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume "${properties:?}:/etc/firethorn.properties" \
        "firethorn/firethorn:${version:?}"

# -----------------------------------------------------
# Run our test container.
#[root@virtual]

    docker run \
        --rm \
        --tty \
        --interactive \
        --env "endpointurl=http://${firelink:?}:8080/firethorn" \
        --link "${firename:?}:${firelink:?}" \
        "firethorn/tester:${version:?}" \
        bash

# -----------------------------------------------------
# Configure our identity.
#[root@tester]

        identity=${identity:-$(date '+%H:%M:%S')}
        community=${community:-$(date '+%A %-d %B %Y')}

        source "bin/01-01-init-rest.sh"

# -----------------------------------------------------
# Load the ATLASDR1 resource.
#[root@tester]

        databasename=ATLASDR1
        databasehost=sebastien
        databaseuser=atlasro
        databasepass=atlasropw
        databasedriver=net.sourceforge.jtds.jdbc.Driver

        source "bin/02-02-create-jdbc-space.sh" \
            'Atlas JDBC conection' \
            "jdbc:jtds:sqlserver://${databasehost:?}/${databasename:?}" \
            "${databaseuser:?}" \
            "${databasepass:?}" \
            "${databasedriver:?}" \
            '*'
        atlasjdbc=${jdbcspace:?}

        source "bin/03-01-create-adql-space.sh" 'Atlas ADQL workspace'
        atlasadql=${adqlspace:?}

        source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'ATLASDR1' 'dbo' "meta/ATLASDR1_AtlasSource.xml"
        atlasschema=${adqlschema:?}

        source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'ATLASDR1' 'dbo' "meta/ATLASDR1_AtlasTwomass.xml"
        atlascross=${adqlschema:?}

        source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'TWOMASS'  'dbo' "meta/TWOMASS_TwomassPsc.xml"
        atlastwomass=${adqlschema:?}

# -----------------------------------------------------
# Run our ATLASDR1 queries
#[root@tester]

        source "bin/04-01-create-query-space.sh" 'Test workspace'

        source "bin/04-03-import-query-schema.sh" "${atlasadql:?}" 'ATLASDR1' 'atlas'
        source "bin/04-03-import-query-schema.sh" "${atlasadql:?}" 'TWOMASS'  'twomass'

        source "bin/04-03-create-query-schema.sh"

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                atlasSource.ra,
                atlasSource.dec
            FROM
                atlas.atlasSource
            WHERE
                atlasSource.ra  BETWEEN 354 AND 355
            AND
                atlasSource.dec BETWEEN -40 AND -39
            "

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                twomass_psc.ra,
                twomass_psc.dec
            FROM
                twomass.twomass_psc
            WHERE
                twomass_psc.ra  BETWEEN 354 AND 355
            AND
                twomass_psc.dec BETWEEN -40 AND -39
            "

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                atlasSource.ra  as atlasra,
                atlasSource.dec as atlasdec,
                twomass_psc.ra  as twomassra,
                twomass_psc.dec as twomassdec
            FROM
                atlasSource
            JOIN
                atlasSourceXtwomass_psc
            ON
                atlasSource.sourceID = atlasSourceXtwomass_psc.masterObjID 
            JOIN
                twomass_psc
            ON
                twomass_psc.pts_key = atlasSourceXtwomass_psc.slaveObjID
            WHERE
                atlasSource.ra  BETWEEN 354 AND 355
            AND
                atlasSource.dec BETWEEN -40 AND -39
            AND
                twomass_psc.ra  BETWEEN 354 AND 355
            AND
                twomass_psc.dec BETWEEN -40 AND -39
            "

# -----------------------------------------------------
# Load the TWOMASS resource.
#[root@tester]

        databasename=TWOMASS
        databasehost=sebastien
        databaseuser=palro
        databasepass=palropw
        databasedriver=net.sourceforge.jtds.jdbc.Driver

        source "bin/02-02-create-jdbc-space.sh" \
            'TWOMASS JDBC conection' \
            "jdbc:jtds:sqlserver://${databasehost:?}/${databasename:?}" \
            "${databaseuser:?}" \
            "${databasepass:?}" \
            "${databasedriver:?}" \
            "${databasename:?}"
        twomassjdbc=${jdbcspace:?}

        source "bin/03-01-create-adql-space.sh" 'TWOMASS ADQL workspace'
        twomassadql=${adqlspace:?}

        source "bin/03-04-import-jdbc-metadoc.sh" "${twomassjdbc:?}" "${twomassadql:?}" 'TWOMASS'  'dbo' "meta/TWOMASS_TwomassPsc.xml"
        twomassschema=${adqlschema:?}

# -----------------------------------------------------
# Run our ATLASDR1/TWOMASS queries
#[root@tester]

        source "bin/04-01-create-query-space.sh" 'Test workspace'

        source "bin/04-03-import-query-schema.sh" "${atlasadql:?}"   'ATLASDR1' 'atlas'
        source "bin/04-03-import-query-schema.sh" "${twomassadql:?}" 'TWOMASS'  'twomass'

        source "bin/04-03-create-query-schema.sh"

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                atlasSource.ra,
                atlasSource.dec
            FROM
                atlas.atlasSource
            WHERE
                atlasSource.ra  BETWEEN 354 AND 355
            AND
                atlasSource.dec BETWEEN -40 AND -39
            "

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                twomass_psc.ra,
                twomass_psc.dec
            FROM
                twomass.twomass_psc
            WHERE
                twomass_psc.ra  BETWEEN 354 AND 355
            AND
                twomass_psc.dec BETWEEN -40 AND -39
            "

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                atlasSource.ra  as atra,
                atlasSource.dec as atdec,
                twomass_psc.ra  as tmra,
                twomass_psc.dec as tmdec,
                atlasSourceXtwomass_psc.distanceMins as dist
            FROM
                atlasSource
            JOIN
                atlasSourceXtwomass_psc
            ON
                atlasSource.sourceID = atlasSourceXtwomass_psc.masterObjID 
            JOIN
                twomass_psc
            ON
                twomass_psc.pts_key = atlasSourceXtwomass_psc.slaveObjID
            WHERE
                atlasSource.ra  BETWEEN 354 AND 355
            AND
                atlasSource.dec BETWEEN -40 AND -39
            AND
                twomass_psc.ra  BETWEEN 354 AND 355
            AND
                twomass_psc.dec BETWEEN -40 AND -39
            "

# -----------------------------------------------------
# Exit from our tester container
#[root@tester]

    exit

# -------------------------------------------------------------------------------------------
# Push our changes to or Mercurial repo.


# -------------------------------------------------------------------------------------------
# Push our containers to the Docker repo.


# -------------------------------------------------------------------------------------------
# Push our artifacts to our Maven repo.

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        ./bin/rsync-repo.sh

    popd


