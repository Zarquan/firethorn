#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


# -----------------------------------------------------
# Create a new VM.
#[user@trop]

    createvm

        INFO : Node name [Ulov]
        INFO : Base name [fedora-25-docker-16G-20170713.qcow]
        INFO : Base path [/var/lib/libvirt/images/base/fedora-25-docker-16G-20170713.qcow]
        INFO : Disc name [Ulov.qcow]
        INFO : Disc size [16GiB]

        INFO : Node name [Lothigometh]
        INFO : Base name [fedora-25-docker-16G-20170713.qcow]
        INFO : Base path [/var/lib/libvirt/images/base/fedora-25-docker-16G-20170713.qcow]
        INFO : Disc name [Lothigometh.qcow]
        INFO : Disc size [16GiB]

# -----------------------------------------------------
# Login as normal user.
#[user@trop]

    ssh Ulov


# -----------------------------------------------------
# Add our secret function.
#[user@virtual]

    vi "${HOME:?}/secret.sh"

        ....
        ....
        ....

    source "${HOME:?}/secret.sh"
    secret 'frog'

# -----------------------------------------------------
# Set the target branch
#[user@virtual]


export buildtag=2.1.19
export branch=default


# -----------------------------------------------------
# Remove existing containers.
#[user@desktop]

    docker rm -vf $(docker ps -aq)

# -----------------------------------------------------
# Remove existing images.
#[user@desktop]

    docker rmi -f $(docker images -q)



# -----------------------------------------------------
# Download our deployer compose file
#[user@virtual]
     
wget http://wfau.metagrid.co.uk/code/firethorn/raw-file/tip/docker/compose/deployer.yml

wget http://wfau.metagrid.co.uk/code/firethorn/raw-file/b431332a5df0/docker/compose/deployer.yml



cat > "${HOME:?}/chain.properties" << EOF

metadata=postgres
metauser=$(pwgen 20 1)
metapass=$(pwgen 20 1)

userhost=$(secret 'firethorn.user.host')
userdata=$(secret 'firethorn.user.data')
useruser=$(secret 'firethorn.user.user')
userpass=$(secret 'firethorn.user.pass')

datahost=$(secret 'firethorn.data.host')
datadata=$(secret 'firethorn.data.data')
datacatalog=$(secret 'firethorn.data.data')
datatype=mssql
datauser=$(secret 'firethorn.data.user')
datapass=$(secret 'firethorn.data.pass')

tunneluser=$(secret 'ssh.tunnel.user')
tunnelhost=$(secret 'ssh.tunnel.host')

admingroup=
adminuser=
adminpass=

guestgroup=friends
endpoint=http://localhost:8080/firethorn

EOF

# -----------------------------------------------------
# Create our Firethorn properties.
#[user@virtual]

source "${HOME:?}/chain.properties"
cat > "${HOME:?}/firethorn.properties" << EOF

firethorn.meta.type=pgsql
firethorn.meta.driver=org.postgresql.Driver
firethorn.meta.host=bethany
firethorn.meta.url=jdbc:postgresql://bethany/${metadata}
firethorn.meta.data=postgres

firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}

firethorn.user.type=mssql
firethorn.user.url=jdbc:jtds:sqlserver://${userhost:?}/${userdata:?}
firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver

firethorn.user.host=${userhost:?}
firethorn.user.data=${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}

firethorn.admin.community=${admingroup:?}
firethorn.admin.user.name=${adminuser:?}
firethorn.admin.user.pass=${adminpass:?}

firethorn.guest.community=${guestgroup:?}

EOF



# -----------------------------------------------------
# Create our compose env file.
#[user@virtual]

source "${HOME:?}/chain.properties"
cat > "${HOME:?}/.env" << EOF

	buildtag=${branch:?}

	metadata=postgres
	metauser=${metauser:?}
	metapass=${metapass:?}

        datadata=${datadata:?}
        datauser=${datauser:?}
        datapass=${datapass:?}
	datahost=${datahost:?}
	datacatalog=${datacatalog:?}
	datatype=mssql

	tapschemadatabase=${tapschemadatabase:?}
	tapschemauser=${tapschemauser:?}
	tapschemapass=${tapschemapass:?}
	tapschemahost=carolina
	tapschemaport=${tapschemaport:?}
	tapschemajdbcname=${tapschemajdbcname:?}
	tapschematype=${tapschematype:?}

	userhost=${userhost:?}
	userdata=${userdata:?}
	useruser=${useruser:?}
	userpass=${userpass:?}

	admingroup=${admingroup:?}
	adminuser=${adminuser:?}
	adminpass=${adminpass:?}
	guestgroup=${guestgroup:?}


	endpoint=${endpoint:?}
EOF



# Run firethorn.py client

# -----------------------------------------------------
# Clone the firethorn.py project
#[user@virtual]

pushd "${HOME:?}"

    git clone https://github.com/stvoutsin/firethorn.py.git

popd


# -----------------------------------------------------
# Build our python client image
#[user@virtual]


pushd  "${HOME:?}/firethorn.py/docker"

   docker build --tag "firethorn-py" firethorn-py

popd

# -----------------------------------------------------
# Run our python client container
#[user@virtual]

source "${HOME:?}/chain.properties"

pushd  "${HOME}/"

    docker-compose --file "tap-deployer.yml" run firethorn-py



source "${HOME:?}/chain.properties"
export datahost
export datauser
export datapass

# -----------------------------------------------------
# Run python3
#[user@virtual]


import firethorn

fe = firethorn.FirethornEngine(endpoint=firethorn.config.endpoint)
fe.login(firethorn.config.adminuser, firethorn.config.adminpass, firethorn.config.admingroup)
ft.load_resources("https://raw.githubusercontent.com/stvoutsin/firethorn.py/dev/firethorn/data/osa-tap.json")


