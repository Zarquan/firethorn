#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2014, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#




# -------------------------------------------------------------------------------------------
# Create new metadata and userdata database(s).
# (uses the test VM to run sqsh)
#[user@desktop]

    deploytype=test
    deploylist="${HOME:?}/firethorn/${deploytype:?}.machines"
    deployprop="${HOME:?}/firethorn/${deploytype:?}.properties"


    source "${deploylist:?}"
    ssh "${sqluser:?}@${sqlhost:?}"

        #
        # Set the new database name.
        dbuser=STV
        dbtype=TEST
        dbdate=$(date +%Y%m%d)

        metadataname="${dbtype:?}FirethornMetadata${dbuser:?}${dbdate:?}"
        userdataname="${dbtype:?}FirethornUserdata${dbuser:?}${dbdate:?}"

        #
        # Load the SQLServer properties
        sqshtype=test
        source "${HOME:?}/sqsh${sqshtype:?}.properties"

        #
        # Function to fill in the template values.
        sqlsed()
            {
            sed '
                s|{databasename}|'"${databasename}"'|g
                s|{databasepath}|'"${databasepath}"'|g
                s|{databaseuser}|'"${databaseuser}"'|g
                s|{databasepass}|'"${databasepass}"'|g
                s|{databaselogin}|'"${databaselogin}"'|g
                ' "${1:?}"
            }

        source "${HOME:?}/firethorn.settings"
        pushd "${FIRETHORN_CODE:?}"    

            hg pull
            hg update default
            
            pushd 'firethorn-sqlserver/src/sql'

                #
                # Set the template values
                databasehost="${sqshhost:?}"
                databaseport="1433"
                databasename="${metadataname:?}"
                databasepath="${sqshpath:?}"
                databaseuser="${databasename:?}User"
                databaselogin="${databasename:?}Login"
                databasepass="${databasename:?}$(pwgen -s 8 1)"

                databasefile="${HOME:?}/firethorn-$(date +%Y%m%d%H%M%S).properties"
                cat >> "${databasefile:?}" << EOF
#
# Metadata database
firethorn.meta.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.meta.user=${databaselogin:?}
firethorn.meta.pass=${databasepass:?}
EOF

                #
                # Delete our old metadata database.
                sqlsed 'delete-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Create our new metadata database.
                sqlsed 'create-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Set the template values
                databasehost="${sqshhost:?}"
                databaseport="1433"
                databasename="${userdataname:?}"
                databasepath="${sqshpath:?}"
                databaseuser="${databasename:?}User"
                databaselogin="${databasename:?}Login"
                databasepass="${databasename:?}$(pwgen -s 8 1)"

                cat >> "${databasefile:?}" << EOF
#
# Userdata database
firethorn.user.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.user.user=${databaselogin:?}
firethorn.user.pass=${databasepass:?}
EOF

                #
                # Delete our old userdata database.
                sqlsed 'delete-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Create our new userdata database (including empty table).
                sqlsed 'create-database.sql'   | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-login.sql'      | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-user.sql'       | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-emptytable.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

echo "Config [${databasefile:?}]"
cat  "${databasefile:?}"

            popd
        popd
    exit



# -----------------------------------------
# Login to shep
#[user@shep]

    ssh shep

# -----------------------------------------
# Create a new VM
#[user@shep]

    createvm

        INFO : Node name [hebenu]
        INFO : Base name [fedora-21-16G-20150407.qcow]
        INFO : Base path [/home/dave/projects/libvirt/base/fedora-21-16G-20150407.qcow]
        INFO : Disc name [hebenu.qcow]
        INFO : Disc size [16GiB]

# -----------------------------------------
# Login to the the VM
#[user@shep]

    ssh hebenu

# -----------------------------------------
# Install admin tools.
#[root@virtual]

    yum -y install htop
    yum -y install pwgen
    
# -----------------------------------------------------
# Install and start the HAVEGE entropy generator.
# http://redmine.roe.ac.uk/issues/828
# http://blog-ftweedal.rhcloud.com/2014/05/more-entropy-with-haveged/
# http://stackoverflow.com/questions/26021181/not-enough-entropy-to-support-dev-random-in-docker-containers-running-in-boot2d/
#[root@virtual]

    yum install -y haveged
    systemctl start haveged.service

# -----------------------------------------------------
# Install and start Docker.
#[root@virtual]

    yum -y install docker-io

    systemctl enable docker.service
    systemctl start  docker.service
    systemctl status docker.service

# -----------------------------------------------------
# Create our secret function.
#[root@virtual]

    secrethost='stv@shepseskaf.roe.ac.uk'
    secretfile='${HOME:?}/secret.store'

    secret()
        {
        local key=${1:?}
        ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
        }

    secret 'firethorn.user.host'

# -----------------------------------------------------
# Set our target version.
#[root@virtual]

    branch=1.13.17-stv-bug-testing
    version=1.13.17

# -----------------------------------------------------
# Create our projects directory.
#[root@virtual]

    if [ ! -e /var/local/projects ]
    then
        mkdir -p /var/local/projects
        chgrp -R users /var/local/projects
        chmod -R g+rwx /var/local/projects
    fi

# -----------------------------------------------------
# Create our cache directory.
#[root@virtual]

    if [ ! -e /var/local/cache ]
    then
        mkdir -p /var/local/cache
        chgrp -R users /var/local/cache
        chmod -R g+rwx /var/local/cache
    fi

# -----------------------------------------------------
# Allow access to Docker containers.
#[root@virtual]

    chcon -t svirt_sandbox_file_t "/var/local/projects" 
    chcon -t svirt_sandbox_file_t "/var/local/cache" 

# -----------------------------------------------------
# Install the selinux-dockersock SELinux policy.
# https://github.com/dpw/selinux-dockersock
#[root@virtual]

    # Test if present
    # semodule -l | grep dockersock

    yum install -y git
    yum install -y make
    yum install -y checkpolicy
    yum install -y policycoreutils policycoreutils-python
    
    pushd /var/local/projects

        git clone https://github.com/dpw/selinux-dockersock

        pushd selinux-dockersock

            make dockersock.pp

            semodule -i dockersock.pp

        popd
    popd

# -----------------------------------------------------
# Run our build container.
#[root@virtual]

    docker run \
        -it \
        --name builder \
        --env "branch=${branch:?}" \
        --env "version=${version:?}" \
        --volume /var/local/cache:/cache \
        --volume /var/local/projects:/projects \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/builder:1 \
        bash

# -----------------------------------------------------
# Update our path.
#[root@builder]

    # ** this should be in the container **
    source /etc/bashrc

# -----------------------------------------------------
# Checkout a copy of our source code.
#[root@builder]

    #
    # Set the project path.
    if [ ! -e "${HOME:?}/firethorn.settings" ]
    then
        cat > "${HOME:?}/firethorn.settings" << EOF
FIRETHORN_CODE=/projects/firethorn
EOF
    fi

    #
    # Clone our repository.
    source "${HOME:?}/firethorn.settings"
    if [ ! -e "${FIRETHORN_CODE:?}" ]
    then
        pushd "$(dirname ${FIRETHORN_CODE:?})"

            hg clone 'http://wfau.metagrid.co.uk/code/firethorn'

        popd
    fi

    #
    # Pull and update from branch.
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        hg pull
        hg update "${branch:?}"
        hg branch
    
    popd

# -----------------------------------------------------
# Build our toolkit containers.
#[root@builder]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        docker build \
            --tag firethorn/fedora:21 \
            docker/fedora/21

        docker build \
            --tag firethorn/java:8 \
            docker/java/8

        docker build \
            --tag firethorn/tomcat:8 \
            docker/tomcat/8

        docker build \
            --tag firethorn/postgres:9 \
            docker/postgres/9

        docker build \
            --tag firethorn/builder:1 \
            docker/builder

        docker build \
            --tag firethorn/docker-proxy:1 \
            docker/docker-proxy

        docker build \
            --tag firethorn/sql-proxy:1 \
            docker/sql-proxy

        docker build \
            --tag firethorn/sql-tunnel:1 \
            docker/sql-tunnel

        docker build \
            --tag firethorn/ssh-client:1 \
            docker/ssh-client

    popd

# -----------------------------------------------------
# Start our docker-proxy container.
#[root@builder]

    docker run \
        --detach \
        --name "docker-proxy" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        firethorn/docker-proxy:1

    dockerip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' docker-proxy)

    echo "${dockerip:?}"
    curl "http://${dockerip:?}:2375/version"

# -----------------------------------------------------
# Build our webapp services.
#[root@builder]

    #
    # Build our webapp services.
    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our webapp containers.
#[root@builder]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        pushd firethorn-ogsadai/webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd
        
        pushd firethorn-webapp
            mvn -D "docker.host=http://${dockerip:?}:2375" docker:package
        popd

    popd

# -----------------------------------------------------
# Build our tester container.
#[root@builder]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        source "bin/util.sh"

        docker build \
            --tag firethorn/tester:$(getversion) \
            integration/tester

    popd

# -----------------------------------------------------
# Exit our builder.
#[root@builder]

    exit

# -----------------------------------------------------
# Create our secret function.
#[root@virtual]

    secrethost='stv@shepseskaf.roe.ac.uk'
    secretfile='${HOME:?}/secret.store'

    secret()
        {
        local key=${1:?}
        ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
        }

    secret 'firethorn.user.host'

# -----------------------------------------------------
# Configure our docker chain.
#[root@virtual]

    version=1.13.17

    cat > /tmp/chain.properties << EOF

    version=${version:?}

    metaname=bethany
    username=patricia
    dataname=elayne
    ogsaname=jarmila
    firename=gillian
    pyroname=pyrothorn
    storedqueriesname=maria
    pyrosqlname=mikaela

    metalink=albert
    userlink=edward
    datalink=sebastien
    ogsalink=timothy
    firelink=peter
    storedquerieslink=john
    pyrosqllink=mike

    metatype=mssql
    metadata=$(secret 'firethorn.meta.data')
    metauser=$(secret 'firethorn.meta.user')
    metapass=$(secret 'firethorn.meta.pass')
    metaport=1433
    metadriver=net.sourceforge.jtds.jdbc.Driver

    usertype=mssql
    userhost=$(secret 'firethorn.user.host')
    userdata=$(secret 'firethorn.user.data')
    useruser=$(secret 'firethorn.user.user')
    userpass=$(secret 'firethorn.user.pass')
    userdriver=net.sourceforge.jtds.jdbc.Driver

    datatype=mssql
    datahost=$(secret 'firethorn.data.host')
    datadata=$(secret 'firethorn.data.data')
    datauser=$(secret 'firethorn.data.user')
    datapass=$(secret 'firethorn.data.pass')
    datadriver=net.sourceforge.jtds.jdbc.Driver
    dataport=1433

    pyrosqlport=3306
    
    storedqueriesport=1433
    storedquerieshost=$(secret 'pyrothorn.storedqueries.host')
    storedqueriesuser=$(secret 'pyrothorn.storedqueries.user')
    storedqueriespass=$(secret 'pyrothorn.storedqueries.pass')
    
    testrundatabase=$(secret 'firethorn.data.data')
    testrun_ogsadai_resource=$(secret 'firethorn.data.data')

    tunneluser=$(secret 'ssh.tunnel.user')
    tunnelhost=$(secret 'ssh.tunnel.host')

EOF

    source /tmp/chain.properties

# -----------------------------------------------------
# Run our userdata ambassador.
#[root@virtual]

    source /tmp/chain.properties

    docker run \
        --detach \
        --name "${username:?}" \
        --env  "target=${userhost:?}" \
        firethorn/sql-proxy:1

# -----------------------------------------------------
# Run our science data ambassador.
#[root@virtual]

    source /tmp/chain.properties

    docker run \
        --detach \
        --name "${dataname:?}" \
        --env  "target=${datahost:?}" \
        firethorn/sql-proxy:1

# -----------------------------------------------------
# Start our PostgreSQL metadata container.
#[root@virtual]

#    source /tmp/chain.properties

#    docker run \
#        --detach \
#        --name "${metaname:?}" \
#        --env "POSTGRES_USER=${metauser:?}" \
#        --env "POSTGRES_PASSWORD=${metapass:?}" \
#       postgres

# -----------------------------------------------------
# Create our directory function.
#[root@virtual]

    directory()
        {
        local target=${1:?}

        mkdir --parents "${target:?}"

        chown 995:994 "${target:?}"
        chmod u=rwxs  "${target:?}"
        chmod g=rwxs  "${target:?}"

        chcon -t svirt_sandbox_file_t "${target:?}"

        }

# -----------------------------------------------------
# Start our OGSA-DAI container.
#[root@virtual]

    source /tmp/chain.properties

    ogsatemp="/var/temp/${ogsaname:?}"
    ogsalogs="/var/logs/${ogsaname:?}"

    directory "${ogsatemp:?}"
    directory "${ogsalogs:?}"

    docker run \
        --detach \
        --publish 8081:8080 \
        --name "${ogsaname:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume "${ogsatemp:?}:/temp" \
        --volume "${ogsalogs:?}:/var/tomcat/logs" \
        firethorn/ogsadai

# -----------------------------------------------------
# Create our FireThorn config.
#[root@virtual]

    source /tmp/chain.properties


properties=$(mktemp)
cat > "${properties:?}" << EOF

        firethorn.ogsadai.endpoint=http://${ogsalink:?}:8080/ogsadai/services

        firethorn.meta.url=jdbc:jtds:sqlserver://${userlink:?}/${metadata:?}
        firethorn.meta.user=${metauser:?}
        firethorn.meta.pass=${metapass:?}
        firethorn.meta.driver=net.sourceforge.jtds.jdbc.Driver
        firethorn.meta.type=mssql

        firethorn.user.url=jdbc:jtds:sqlserver://${userlink:?}/${userdata:?}
        firethorn.user.user=${useruser:?}
        firethorn.user.pass=${userpass:?}
        firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver
        firethorn.user.type=mssql

EOF

    chmod a+r "${properties:?}" 
    chcon -t svirt_sandbox_file_t "${properties:?}" 


# -----------------------------------------------------
# Create our Tomcat setenv script.
#[root@virtual]

    source /tmp/chain.properties

    setenv=$(mktemp)
    cat > "${setenv:?}" << 'EOF'
CATALINA_OPTS="${CATALINA_OPTS} -Dcom.sun.management.jmxremote"
CATALINA_OPTS="${CATALINA_OPTS} -Dcom.sun.management.jmxremote.port=8085"
CATALINA_OPTS="${CATALINA_OPTS} -Dcom.sun.management.jmxremote.rmi.port=8085"
CATALINA_OPTS="${CATALINA_OPTS} -Dcom.sun.management.jmxremote.ssl=false"
CATALINA_OPTS="${CATALINA_OPTS} -Dcom.sun.management.jmxremote.authenticate=false"
CATALINA_OPTS="${CATALINA_OPTS} -Dcom.sun.management.jmxremote.local.only=false"
CATALINA_OPTS="${CATALINA_OPTS} -Djava.rmi.server.hostname=192.168.122.13"
CATALINA_OPTS="${CATALINA_OPTS} -Djava.rmi.activation.port=8086"
EOF

    chmod a+r "${setenv:?}" 
    chcon -t svirt_sandbox_file_t "${setenv:?}" 

# -----------------------------------------------------
# Start our FireThorn container.
#[root@virtual]

    source /tmp/chain.properties

    firetemp="/var/temp/${firename:?}"
    firelogs="/var/logs/${firename:?}"

    directory "${firetemp:?}"
    directory "${firelogs:?}"

    docker run \
        --detach \
        --publish 8080:8080 \
        --publish 8085:8085 \
        --name "${firename:?}" \
        --memory 512M \
        --link "${ogsaname:?}:${ogsalink:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume "${firetemp:?}:/temp" \
        --volume "${firelogs:?}:/var/local/tomcat/logs" \
        --volume "${properties:?}:/etc/firethorn.properties" \
        --volume "${setenv:?}:/var/local/tomcat/bin/setenv.sh" \
        "firethorn/firethorn"


    docker run \
        --detach \
        --name "${storedqueriesname?}" \
        --env  "target=${storedquerieshost:?}" \
        firethorn/sql-proxy:1


    docker run -d -t --name ${pyrosqlname:?} -p 3306:3306 firethorn/pyrosql


pyroproperties=$(mktemp)
cat > "${pyroproperties:?}" << EOF
import os

#------------------------- General Configurations -----------------------#

### Unit test specific configuration ###
use_preset_params = False # Use the preset firethorn resource parameters at the end of this config file
use_cached_firethorn_env = False #Use cached firethorn environment, stored in (testing/conf/pyrothorn-stored.js)
firethorn_version =  "${version:?}" 
include_neighbour_import = False # Choose whether to import all neighbour tables for a catalogue or not
test_is_continuation = False # Test is continued from prev run or not (If true, duplicate queries that have been run previously will not be run)

### Directory and URL Information ###
firethorn_host = "${firelink:?}" 
firethorn_port = "8080" 
full_firethorn_host = firethorn_host if firethorn_port=='' else firethorn_host + ':' + firethorn_port
base_location = os.getcwd()

### Email ###
test_email = "test@test.roe.ac.uk" 

### Queries ###
sample_query="Select top 10 * from Filter" 
sample_query_expected_rows=10
limit_query = None
sql_rowlimit = 1000
sql_timeout = 1000
firethorn_timeout = 1000
query_mode = "AUTO" 

#------------------- Test Configurations ----------------------------------#

### SQL Database Configuration ###

test_dbserver= "${datalink:?}" 
test_dbserver_username = "${datauser:?}" 
test_dbserver_password = "${datapass:?}" 
test_dbserver_port = "${dataport:?}" 
test_database = "${testrundatabase:?}" 
neighbours_query = """ 
        SELECT DISTINCT
            ExternalSurvey.databaseName
        FROM
            RequiredNeighbours
        JOIN
            ExternalSurvey
        ON
            RequiredNeighbours.surveyID = ExternalSurvey.surveyID
        JOIN
            ExternalSurveyTable
        ON
            RequiredNeighbours.surveyID = ExternalSurveyTable.surveyID
        AND
            RequiredNeighbours.extTableID = ExternalSurveyTable.extTableID
        WHERE 
            ExternalSurvey.databaseName!='NONE'
        ORDER BY
            ExternalSurvey.databaseName
            """ 

### Reporting Database Configuration ###

reporting_dbserver= "${pyrosqllink:?}" 
reporting_dbserver_username = "root" 
reporting_dbserver_password = "" 
reporting_dbserver_port = "${pyrosqlport:?}" 
reporting_database = "pyrothorn_testing" 

### Logged Queries Configuration ###

stored_queries_dbserver= "${storedquerieslink:?}" 
stored_queries_dbserver_username = "${storedqueriesuser:?}" 
stored_queries_dbserver_password = "${storedqueriespass:?}" 
stored_queries_dbserver_port = "${storedqueriesport:?}" 
stored_queries_database = "userinterface" 
stored_queries_query = "select * from webqueries where dbname like 'ATLAS%' and query not like '%dr%' and query not like '%best%'" 
logged_queries_txt_file = "testing/query_logs/integration_list.txt" 

### Firethorn Live test Configuration ###

adql_copy_depth = "THIN" 
resourcename = '${testrundatabase:?} JDBC conection' 
resourceuri = "jdbc:jtds:sqlserver://${datalink:?}/${testrundatabase:?}" 
adqlspacename = '${testrundatabase:?} Workspace'
catalogname = '*'
driver = '${datadriver:?}'
ogsadainame = '${testrun_ogsadai_resource:?}'
jdbccatalogname = '${testrundatabase:?}'
jdbcschemaname = 'dbo'
jdbc_resource_user = '${datauser:?}'
jdbc_resource_pass = '${datapass:?}'
metadocfile = "testing/metadocs/${testrundatabase:?}_TablesSchema.xml" 
metadocdirectory = "testing/metadocs/" 
stored_env_config = 'conf/pyrothorn-stored.js'

### Firethorn Predefined test Configuration ###

jdbcspace = "" 
adqlspace = "" 
adqlschema = "" 
query_schema = "" 
schema_name = "${testrundatabase:?}" 
schema_alias = "${testrundatabase:?}" 

EOF


chmod a+r "${pyroproperties:?}" 
chcon -t svirt_sandbox_file_t "${pyroproperties:?}" 

mkdir -p /var/logs/${pyroname:?}

docker run -i -t \
    --name ${pyroname:?} \
    --volume "${pyroproperties:?}:/home/pyrothorn/config.py" \
    --link "${firename:?}:${firelink:?}" \
    --link "${pyrosqlname:?}:${pyrosqllink:?}" \
    --link "${storedqueriesname:?}:${storedquerieslink:?}" \
    --link "${ogsaname:?}:${ogsalink:?}" \
    --link "${dataname:?}:${datalink:?}" \
    --link "${username:?}:${userlink:?}" \
       firethorn/pyrothorn bash


cd /home/pyrothorn/

# Run test
python testing/test_firethorn_logged_txt.py

nohup python -u src/helper_functions/check_ogsa_resources.py ogsadai-32813351-a4ba-4900-907a-d97f8e747a05 > ogsa-log.txt 2>&1 </dev/null &

# Run test as background task (Closing terminal will not cancel run)
nohup python testing/test_firethorn_logged_txt.py > logfile.txt 2>&1 </dev/null &




# -----------------------------------------------------
# Create a ssh socks tunnel for JConsole.
# http://stackoverflow.com/questions/151238/has-anyone-ever-got-a-remote-jmx-jconsole-to-work
# http://simplygenius.com/2010/08/jconsole-via-socks-ssh-tunnel.html
#[user@laptop]

#    cat > /tmp/jmx.properties << EOF

#    jmxremoteport=8085
#    jmxremotehost=192.168.122.13

#    jxmproxyhost=stv@shepseskaf.roe.ac.uk
#    jxmproxyport=9090

#EOF

#    source /tmp/jmx.properties

#   ssh -v -v -D "${jxmproxyport}" "${jxmproxyhost}"

# -----------------------------------------------------
# Run JConsole connected to the tunneled ports.
# http://stackoverflow.com/questions/151238/has-anyone-ever-got-a-remote-jmx-jconsole-to-work
# http://simplygenius.com/2010/08/jconsole-via-socks-ssh-tunnel.html
#[user@laptop]

#    source /tmp/jmx.properties

#    jconsole -J-DsocksProxyHost=localhost -J-DsocksProxyPort="${jxmproxyport}" \
#       service:jmx:rmi:///jndi/rmi://${jmxremotehost:?}:${jmxremoteport:?}/jmxrmi
    


