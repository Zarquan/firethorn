#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


## ------------------------------------------------------------------------------------------
## Create Master VM 
## ------------------------------------------------------------------------------------------


createvm Froeseth (master)
..
Domain Froeseth started

ssh Stevedore@Froeseth



## ------------------------------------------------------------------------------------------
## Initialize Swarm with VM's address
## ------------------------------------------------------------------------------------------

[Stevedore@Froeseth ~]$ ifconfig

       ..  192.168.201.12  ..


docker swarm init --advertise-addr 192.168.201.12 


		Swarm initialized: current node (5zrs2po0x1teeyzigf09mw5vi) is now a manager.

		To add a worker to this swarm, run the following command:

		    docker swarm join --token SWMTKN-1-04u77kiexc4jjh40ncaov4kxvez0pszz8gjoake56i9liplcfb-cnbjy5d7ul9qdd9r307rt9zbv 192.168.201.11:2377

		To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.


## ------------------------------------------------------------------------------------------
## Create Spark-net network
## ------------------------------------------------------------------------------------------
## docker network create --driver overlay firethorn-net


    ## Fix Firewall issue
    sudo su
	    firewall-cmd --add-port=2377/tcp --permanent
	    firewall-cmd --add-port=2377/tcp --permanent
	    firewall-cmd --add-port=7946/tcp --permanent
	    firewall-cmd --add-port=4789/tcp --permanent
	    firewall-cmd --add-port=4789/udp --permanent
	    iptables -A INPUT -p 50 -j ACCEPT    
	    firewall-cmd --reload
    exit


## -------------------------------------------------------------------------------------------
## Add secret function.
## -------------------------------------------------------------------------------------------

    secrethost='stv@shepseskaf.roe.ac.uk'
    secretfile='${HOME:?}/secret.store...'

    secret()
    {
        local key=${1:?}
        ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
    }

    secret 'firethorn.ssh.keys' >> "${HOME}/.ssh/authorized_keys"



## -------------------------------------------------------------------------------------------
## Set the target branch and builtag
## -------------------------------------------------------------------------------------------


    export buildtag=2.1.33-stv-tap-swarm
    export branch=2.1.33-stv-tap-swarm



## -------------------------------------------------------------------------------------------
## Create our chain.properties file
## -------------------------------------------------------------------------------------------

cat > "${HOME:?}/chain.properties" << EOF

metadata=postgres
metauser=$(pwgen 20 1)
metapass=$(pwgen 20 1) 

userhost=$(secret 'firethorn.user.host')
userdata=$(secret 'firethorn.user.data')
useruser=$(secret 'firethorn.user.user')
userpass=$(secret 'firethorn.user.pass')
usertype=mssql

datahost=$(secret 'firethorn.data.host')
datadata=$(secret 'firethorn.data.data')
datacatalog=$(secret 'firethorn.data.catalog')
datatype=$(secret 'firethorn.data.type')
datauser=$(secret 'firethorn.data.user')
datapass=$(secret 'firethorn.data.pass')

tapschemadata=$(secret 'firethorn.tapschema.database.name')
tapschemauser=$(secret 'firethorn.tapschema.database.user')
tapschemapass=$(secret 'firethorn.tapschema.database.pass')
tapschemahost=$(secret 'firethorn.tapschema.database.host')
tapschemaport=$(secret 'firethorn.tapschema.database.port')
tapschematype=$(secret 'firethorn.tapschema.database.type')
tapschemajdbc=$(secret 'firethorn.tapschema.jdbc.name')

tunneluser=$(secret 'ssh.tunnel.user')
tunnelhost=$(secret 'ssh.tunnel.host')

admingroup=$(pwgen 20 1)	
adminuser=$(pwgen 20 1)
adminpass=$(pwgen 20 1)

adql_query_delay_first=$(secret 'adql.query.delay.first')
 
firethorn_limits_rows_absolute=$(secret 'firethorn.limits.rows.absolute')
firethorn_limits_rows_default=$(secret 'firethorn.limits.rows.default')

guestgroup=friends
endpoint=$(secret 'endpoint')

firethornhost=gillian

EOF



## -----------------------------------------------------
## Create our Firethorn properties.
## -----------------------------------------------------

source "${HOME:?}/chain.properties"
cat > "${HOME:?}/firethorn.properties" << EOF

firethorn.meta.type=pgsql
firethorn.meta.driver=org.postgresql.Driver
firethorn.meta.host=bethany
firethorn.meta.url=jdbc:postgresql://bethany/${metadata}
firethorn.meta.data=postgres
firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}

firethorn.user.type=mssql
firethorn.user.url=jdbc:jtds:sqlserver://${userhost:?}/${userdata:?}
firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver
firethorn.user.host=${userhost:?}
firethorn.user.data=${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}

firethorn.tapschema.resource.name=${tapschemajdbc}
firethorn.tapschema.database.name=${tapschemadata}
firethorn.tapschema.database.host=${tapschemahost}
firethorn.tapschema.database.port=${tapschemaport}
firethorn.tapschema.database.user=${tapschemauser}
firethorn.tapschema.database.pass=${tapschemapass}

firethorn.admin.community=${admingroup:?}
firethorn.admin.user.name=${adminuser:?}
firethorn.admin.user.pass=${adminpass:?}

firethorn.guest.community=${guestgroup:?}

adql.query.delay.first=${adql_query_delay_first:?}

firethorn.limits.rows.absolute=${firethorn_limits_rows_absolute:?}
firethorn.limits.rows.default=${firethorn_limits_rows_default:?}
	

EOF



## -------------------------------------------------------------------------------------------
## Create our compose env files.
## -------------------------------------------------------------------------------------------

source "${HOME:?}/chain.properties"
cat > "${HOME:?}/.env" << EOF

buildtag=${branch:?}
endpoint=${endpoint:?}


metadata=postgres
metauser=${metauser:?}
metapass=${metapass:?}
firethorn.meta.type=pgsql
firethorn.meta.driver=org.postgresql.Driver
firethorn.meta.host=bethany
firethorn.meta.url=jdbc:postgresql://bethany/postgres
firethorn.meta.data=postgres
firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}


datadata=${datadata:?}
datauser=${datauser:?}
datapass=${datapass:?}
datahost=${datahost:?}
datacatalog=${datacatalog:?}
datatype=mssql


tapschemadata=${tapschemadata:?}
tapschemauser=${tapschemauser:?}
tapschemapass=${tapschemapass:?}
tapschemahost=${tapschemahost}
tapschemaport=${tapschemaport:?}
tapschemajdbc=${tapschemajdbc:?}
tapschematype=${tapschematype:?}
firethorn.tapschema.resource.name=${tapschemajdbc:?}
firethorn.tapschema.database.name=${tapschemadata:?}
firethorn.tapschema.database.host=${tapschemahost:?}
firethorn.tapschema.database.port=5432
firethorn.tapschema.database.user=${tapschemauser:?}
firethorn.tapschema.database.pass=${tapschemapass:?}
firethorn.tapschema.database.type=pgsql

userhost=${userhost:?}
userdata=${userdata:?}
useruser=${useruser:?}
userpass=${userpass:?}
usertype=mssql
firethorn.user.type=mssql
firethorn.user.url=jdbc:jtds:sqlserver://${userhost:?}/${userdata:?}
firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver
firethorn.user.host=${userhost:?}
firethorn.user.data=${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}


admingroup=${admingroup:?}
adminuser=${adminuser:?}
adminpass=${adminpass:?}
guestgroup=${guestgroup:?}
firethorn.admin.community=${admingroup:?}
firethorn.admin.user.name=${adminuser:?}
firethorn.admin.user.pass=${adminpass:?}
firethorn.guest.community=${guestgroup:?}


adql_query_delay_first=${adql_query_delay_first:?}
adql.query.delay.first=${adql_query_delay_first:?}
firethorn_limits_rows_absolute=${firethorn_limits_rows_absolute:?}
firethorn_limits_rows_default=${firethorn_limits_rows_default:?}
firethorn.limits.rows.absolute=${firethorn_limits_rows_absolute:?}
firethorn.limits.rows.default=${firethorn_limits_rows_default:?}

firethorn.ogsadai.endpoint=http://jarmila:8080/ogsadai/services

firethornhost=gillian

EOF


source "${HOME:?}/chain.properties"
cat > "${HOME:?}/.tapschema_env" << EOF

POSTGRES_DB=${tapschemadatabase}
POSTGRES_USER=${tapschemauser}
POSTGRES_PASSWORD=${tapschemapass}

EOF


source "${HOME:?}/chain.properties"
cat > "${HOME:?}/.metadata_env" << EOF

POSTGRES_DB=${metadata}
POSTGRES_USER=${metauser}
POSTGRES_PASSWORD=${metapass}
         
EOF


## -------------------------------------------------------------------------------------------
## Fetch the TAP Deployer
## -------------------------------------------------------------------------------------------

wget https://raw.githubusercontent.com/stvoutsin/firethorn.py/master/docker/firethorn-compose-v3.yml -O  docker-compose.yml



## -------------------------------------------------------------------------------------------
## Build from Firethorn Source (2.1.33-stv-tap-swarm branch)
## -------------------------------------------------------------------------------------------

sudo yum -y install maven

hg clone http://wfau.metagrid.co.uk/code/firethorn hg



cat > "${HOME:?}/firethorn.settings" << EOF
FIRETHORN_NAME=hg
FIRETHORN_BASE=/home/Stevedore/hg
FIRETHORN_CODE=/home/Stevedore/hg
FIRETHORN_CONF=/home/Stevedore/hg
EOF



pushd ${HOME:?}/hg

    hg update -C 2.1.33-stv-tap-swarm

popd



## -----------------------------------------------------
## Build our Docker images.
## -----------------------------------------------------

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)

        docker-compose \
            --file docker/compose/images.yml \
            build

    popd




##---------------------------------------------------------------------
## Compile our Java code.
##---------------------------------------------------------------------

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd


##---------------------------------------------------------------------
## Build our Java containers.
##---------------------------------------------------------------------

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)
        pushd firethorn-ogsadai/webapp
            mvn docker:package
        popd

        export buildtag=$(hg branch)
        pushd firethorn-webapp
            mvn docker:package
        popd

    popd



## ------------------------------------------------------------------------
## Deploy Swarm stack
## ------------------------------------------------------------------------

docker stack deploy -c docker-compose.yml ft
        .. 
	Creating service ft_bethany
	Creating service ft_carolina
	Creating service ft_jarmila
	Creating service ft_gillian
	Creating service ft_firethorn-py
     


[Stevedore@Froeseth ~]$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE                                         PORTS
su0iy3uspkya        ft_bethany          replicated          1/1                 firethorn/postgres:2.1.33-stv-tap-swarm       
rve9iiumjoj4        ft_carolina         replicated          1/1                 firethorn/postgres:2.1.33-stv-tap-swarm       
7fswcw9btvct        ft_firethorn-py     replicated          0/1                 firethorn/firethorn-py:2.1.33-stv-tap-swarm   
l52nhtsaj5qy        ft_gillian          replicated          1/1                 firethorn/firethorn:2.1.33-stv-tap-swarm      *:8080->8080/tcp
2ubzla3luwe9        ft_jarmila          replicated          1/1                 firethorn/ogsadai:2.1.33-stv-tap-swarm 

## ------------------------------------------------------------------------
## To remove all docker services 
## ------------------------------------------------------------------------

## docker service rm $(docker service ls -q)



## ------------------------------------------------------------------------
## Create TAP service with firethorn-utils
## ------------------------------------------------------------------------

docker start ft_firethorn-py.1.txmiebaz5mohrlqo632ngb0x6
docker exec -it ft_firethorn-py.1.txmiebaz5mohrlqo632ngb0x6 bash

root@firethorn-py:/home# python3


import firethorn
import firethorn_utils.configurator as configur
ft = firethorn.Firethorn(endpoint="http://gillian:8080/firethorn")
ft.login(firethorn.config.adminuser, firethorn.config.adminpass, firethorn.config.admingroup)
configurator =  configur.Configurator(ft)
configurator.load_resources("/home/firethorn.py/firethorn/data/osa-tap.json")

Importing JDBC Schema: ATLASDR1
Importing JDBC Schema: ATLASDR2
Importing JDBC Schema: ATLASDR3
Importing JDBC Schema: 2MASS
Importing JDBC Schema: 2XMM
Importing JDBC Schema: WISE
Importing JDBC Schema: VIKINGDR3
Importing JDBC Schema: VHSDR1
Importing JDBC Schema: MGC
Importing JDBC Schema: GLIMPSE
Importing JDBC Schema: FIRST
Importing JDBC Schema: DENIS
TAP Service available at: http://gillian:8080/firethorn/tap/54/



	## ------------------------------------------------------------------------
## Update Apache Proxy 
## ------------------------------------------------------------------------

[Stevedore@Gworewia ~]$ docker exec -it apache bash

nano /etc/httpd/conf.d/tap.metagrid.xyz.conf

    ProxyPassMatch    ^/osa\/(.*)$  http://froeseth:8080/firethorn/tap/54/$1
    ProxyPassReverse  ^/osa\/(.*)$  http://froeseth:8080/firethorn/tap/54/$1

[Stevedore@Gworewia ~]$ docker kill --signal 'USR1' 'apache'



## ------------------------------------------------------------------------
## Setup Local tunnel to Gworewia (Proxy)
## ------------------------------------------------------------------------

## From local machine
ssh -L '*:8081:Gworewia:80' Stevedore@Gworewia 




## From local machine


cat parallel.py


import os                                                                       
from multiprocessing import Pool                                                

process_list = range(100)
	
def run_process(process_counter):                                                             
    print ("Starting RUN # " + str(process_counter))
    os.system('python3.5 -c "import firethorn_utils.tap_validator as validator;validator.main()" -ft=http://localhost:8081/firethorn -r=54 -u= -p= -g= -v=True -m=sync')
    print ("Ended RUN # " + str(process_counter))


pool = Pool(processes=20)                                                        
pool.map(run_process, process_list)   



.. 



python3 parallel.py


..

## After running this for about an hour, queries start failing, and firethorn stops responding

[Stevedore@Froeseth ~]$ docker ps
CONTAINER ID        IMAGE                                      COMMAND                  CREATED             STATUS                             PORTS               NAMES
7619b2240e8c        firethorn/ogsadai:2.1.33-stv-tap-swarm     "/bin/sh -c '/var/lo…"   52 seconds ago      Up 47 seconds (health: starting)   8080/tcp            ft_jarmila.1.wlbqvl76nso5rqfhjv3bz45sj
be6c8a6c033f        firethorn/firethorn:2.1.33-stv-tap-swarm   "/bin/sh -c '/var/lo…"   4 minutes ago       Up 3 minutes (unhealthy)           8080/tcp            ft_gillian.1.agyapxmtenrr8harqboqheu7c
698232c0b83f        firethorn/postgres:2.1.33-stv-tap-swarm    "docker-entrypoint.s…"   23 hours ago        Up 23 hours                        5432/tcp            ft_carolina.1.zfi7dbj2wn5v14ew8dq02xr4c
54d97f68dda2        firethorn/postgres:2.1.33-stv-tap-swarm    "docker-entrypoint.s…"   23 hours ago        Up 23 hours                        5432/tcp            ft_bethany.1.4gdjm36l81crue5xykbrrm4gt
59b0ce098117        firethorn/firethorn-py:latest              "python3"                23 hours ago        Up 23 hours                                            ft_firethorn-py.1.nhjlot9nvyoitf5onbde0l8gj




## Healthchecker is triggered and both Firethorn and Ogsadai recover with a "healthy" status


[Stevedore@Froeseth ~]$ docker ps
CONTAINER ID        IMAGE                                      COMMAND                  CREATED             STATUS                   PORTS               NAMES
5406b10d7fd2        firethorn/firethorn:2.1.33-stv-tap-swarm   "/bin/sh -c '/var/lo…"   3 minutes ago       Up 3 minutes (healthy)   8080/tcp            ft_gillian.1.zfo4zd8q2kgisk49d73xki4qj
7619b2240e8c        firethorn/ogsadai:2.1.33-stv-tap-swarm     "/bin/sh -c '/var/lo…"   4 minutes ago       Up 4 minutes (healthy)   8080/tcp            ft_jarmila.1.wlbqvl76nso5rqfhjv3bz45sj
698232c0b83f        firethorn/postgres:2.1.33-stv-tap-swarm    "docker-entrypoint.s…"   23 hours ago        Up 23 hours              5432/tcp            ft_carolina.1.zfi7dbj2wn5v14ew8dq02xr4c
54d97f68dda2        firethorn/postgres:2.1.33-stv-tap-swarm    "docker-entrypoint.s…"   23 hours ago        Up 23 hours              5432/tcp            ft_bethany.1.4gdjm36l81crue5xykbrrm4gt
59b0ce098117        firethorn/firethorn-py:latest              "python3"                23 hours ago        Up 23 hours                                  ft_firethorn-py.1.nhjlot9nvyoitf5onbde0l8gj



## Queries start working again..
