
#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2014, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


newrelease=2.0.5
newversion=2.0.5

# -------------------------------------------------------------------------------------------
# Create new metadata and userdata database(s).
# (uses the test VM to run sqsh)
#[user@desktop]

  source "${deploylist:?}"
    ssh "${sqluser:?}@${sqlhost:?}"

        #
        # Set the new database name.
        dbuser=SHEP
        dbtype=LIVE
        dbdate=$(date +%Y%m%d)

        metadataname="${dbtype:?}FirethornMetadata${dbuser:?}${dbdate:?}"
        userdataname="${dbtype:?}FirethornUserdata${dbuser:?}${dbdate:?}"

        #
        # Load the SQLServer properties
        sqshtype=live
        source "${HOME:?}/sqsh${sqshtype:?}.properties"

        #
        # Function to fill in the template values.
        sqlsed()
            {
            sed '
                s|{databasename}|'"${databasename}"'|g
                s|{databasepath}|'"${databasepath}"'|g
                s|{databaseuser}|'"${databaseuser}"'|g
                s|{databasepass}|'"${databasepass}"'|g
                s|{databaselogin}|'"${databaselogin}"'|g
                ' "${1:?}"
            }

        source "${HOME:?}/firethorn.settings"
        pushd "${FIRETHORN_CODE:?}"    

            hg pull
            hg update default
            
            pushd 'firethorn-sqlserver/src/sql'

                #
                # Set the template values
                databasehost="${sqshhost:?}"
                databaseport="1433"
                databasename="${metadataname:?}"
                databasepath="${sqshpath:?}"
                databaseuser="${databasename:?}User"
                databaselogin="${databasename:?}Login"
                databasepass="${databasename:?}$(pwgen -s 8 1)"

                databasefile="${HOME:?}/firethorn-$(date +%Y%m%d%H%M%S).properties"
                cat >> "${databasefile:?}" << EOF
#
# Metadata database
firethorn.meta.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.meta.user=${databaselogin:?}
firethorn.meta.pass=${databasepass:?}
EOF

                #
                # Delete our old metadata database.
                sqlsed 'delete-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Create our new metadata database.
                sqlsed 'create-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Set the template values
                databasehost="${sqshhost:?}"
                databaseport="1433"
                databasename="${userdataname:?}"
                databasepath="${sqshpath:?}"
                databaseuser="${databasename:?}User"
                databaselogin="${databasename:?}Login"
                databasepass="${databasename:?}$(pwgen -s 8 1)"

                cat >> "${databasefile:?}" << EOF
#
# Userdata database
firethorn.user.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.user.user=${databaselogin:?}
firethorn.user.pass=${databasepass:?}
EOF

                #
                # Delete our old userdata database.
                sqlsed 'delete-user.sql'     | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-login.sql'    | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'delete-database.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

                #
                # Create our new userdata database (including empty table).
                sqlsed 'create-database.sql'   | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-login.sql'      | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-user.sql'       | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"
                sqlsed 'create-emptytable.sql' | sqsh -S "${sqshhost:?}" -U "${sqshuser:?}" -P "${sqshpass:?}" -D "${sqshdata:?}"

echo "Config [${databasefile:?}]"
cat  "${databasefile:?}"

            popd
        popd
    exit
# -----------------------------------------------------------------------------------
# Update our shep secret store settings



    createvm

        INFO : Node name [zawty]
        INFO : Base name [fedora-21-16G-20150407.qcow]
        INFO : Base path [/home/dave/projects/libvirt/base/fedora-21-16G-20150407.qcow]
        INFO : Disc name [zawty.qcow]
        INFO : Disc size [16GiB]

   exit


# -----------------------------------------
# Copy scripts from local to VM
#
   source "${HOME:?}/firethorn.settings"
   pushd "${FIRETHORN_CODE:?}"

       scp -r integration/005/scripts/* root@hebenu:/root/

   popd

# -----------------------------------------
# Login to the the VM
#[stv@shep]

    ssh zawty


# -----------------------------------------------------
# Create our secret function.
#[root@hebenu]

    secrethost='stv@shepseskaf.roe.ac.uk'
    secretfile='${HOME:?}/secret.store'

    secret()
        {
        local key=${1:?}
        ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
        }

    secret 'firethorn.user.host'
   
    source run.sh 05 2.0.5
 

   docker exec -it jarmila bash



        pushd "webapps/ogsadai//WEB-INF/etc/dai"

cat > resources/gaia-tap << EOF
id=gaia-tap
type=uk.org.ogsadai.DATA_RESOURCE
creationTime=null
terminationTime=null
PROPERTIES
END
CONFIG
dai.astro.tapurl=http://geadev.esac.esa.int/tap-server/tap/
END
ACTIVITIES
uk.org.ogsadai.SQLQuery=uk.org.ogsadai.ADQLQuery
END
dataResourceClass=uk.org.ogsadai.resource.generic.GenericResource
EOF

cat > resources/gavo-tap << EOF
id=gavo-tap
type=uk.org.ogsadai.DATA_RESOURCE
creationTime=null
terminationTime=null
PROPERTIES
END
CONFIG
dai.astro.tapurl=http://dc.zah.uni-heidelberg.de/__system__/tap/run/tap/
END
ACTIVITIES
uk.org.ogsadai.SQLQuery=uk.org.ogsadai.ADQLQuery
END
dataResourceClass=uk.org.ogsadai.resource.generic.GenericResource
EOF

cat > resources/vizier-tap << EOF
id=vizier-tap
type=uk.org.ogsadai.DATA_RESOURCE
creationTime=null
terminationTime=null
PROPERTIES
END
CONFIG
dai.astro.tapurl=http://tapvizier.u-strasbg.fr/TAPVizieR/tap/
END
ACTIVITIES
uk.org.ogsadai.SQLQuery=uk.org.ogsadai.ADQLQuery
END
dataResourceClass=uk.org.ogsadai.resource.generic.GenericResource 
EOF

        popd
    exit

    source ${HOME:?}/chain.properties

    docker rm -f builder


properties=$(mktemp)
cat > "${properties:?}" << EOF

        firethorn.ogsadai.endpoint=http://${ogsalink:?}:8080/ogsadai/services

        firethorn.meta.url=jdbc:jtds:sqlserver://${userlink:?}/${metadata:?}
        firethorn.meta.user=${metauser:?}
        firethorn.meta.pass=${metapass:?}
        firethorn.meta.driver=net.sourceforge.jtds.jdbc.Driver
        firethorn.meta.type=mssql

        firethorn.user.url=jdbc:jtds:sqlserver://${userlink:?}/${userdata:?}
        firethorn.user.user=${useruser:?}
        firethorn.user.pass=${userpass:?}
        firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver
        firethorn.user.type=mssql

EOF
chmod a+r "${properties:?}" 
chcon -t svirt_sandbox_file_t "${properties:?}" 

    docker run \
        -it \
        --name builder \
        --env "branch=${branch:?}" \
        --env "version=${version:?}" \
        --link "${dataname:?}:${datalink:?}" \
        --link "${username:?}:${userlink:?}" \
        --volume /var/local/cache:/cache \
        --volume /var/local/projects:/projects \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        --volume ${HOME:?}/setup/build.sh:/build.sh \
        --volume "${properties:?}:/root/firethorn.properties" \
        firethorn/builder:1 \
        bash 
# -----------------------------------------------------
# Manually load the IVOA vosi data.
#[user@desktop]

     yum install -y maven 

     cd /projects/firethorn/

            hg pull
            hg update default

            pushd firethorn-core

                mvn -D skipTests=false -D test=IvoaResourceLoaderTestCase test

         
    exit
    
# -----------------------------------------------------
# IvoaResourceLoader results.
#

....



Schema [public][1802245] 
Schema [icecube][1802268]


....


    source ${HOME:?}/chain.properties
    docker rm -f tester
    testname=tester

    docker run \
	-it \
        --name "${testname:?}" \
        --env "datalink=${datalink:?}" \
        --env "datauser=${datauser:?}" \
        --env "datapass=${datapass:?}" \
        --env "datadriver=${datadriver:?}" \
        --env "endpointurl=http://${firelink:?}:8080/firethorn" \
        --link "${firename:?}:${firelink:?}" \
        "firethorn/tester:${version:?}" \
        bash  
# -----------------------------------------------------
# Import the table metadata.
#[user@desktop]

	mkdir logs

	identity=${identity:-$(date '+%H:%M:%S')}
	community=${community:-$(date '+%A %-d %B %Y')}

	source "bin/01-01-init-rest.sh" 

	database=ATLASDR1

	source "bin/02-02-create-jdbc-space.sh" \
	    'Atlas JDBC conection' \
	    "jdbc:jtds:sqlserver://${datalink:?}/${database:?}" \
	    "${datauser:?}" \
	    "${datapass:?}" \
	    "${datadriver:?}" \
	    '*'
	atlasjdbc=${jdbcspace:?}

	source "bin/03-01-create-adql-space.sh" 'Atlas ADQL workspace'
	atlasadql=${adqlspace:?}

	source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'ATLASDR1' 'dbo' "meta/ATLASDR1_TablesSchema.xml" 
	atlasschema=${adqlschema:?}

	source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'TWOMASS' 'dbo' "meta/TWOMASS_TablesSchema.xml" 
	source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'VHSDR1' 'dbo' "meta/VHSDR1_TablesSchema.xml" 
	source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'SDSSDR9' 'dbo' "meta/SDSSDR9_TablesSchema.xml" 
	source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'VIKINGDR3' 'dbo' "meta/VIKINGDR3_TablesSchema.xml" 
	source "bin/03-04-import-jdbc-metadoc.sh" "${atlasjdbc:?}" "${atlasadql:?}" 'WISE' 'dbo' "meta/WISE_TablesSchema.xml" 


        ivoaname=GACS
        ivoaschema=/ivoa/schema/1802245

	curl  \
	--header "firethorn.auth.identity:${identity:?}" \
	--header "firethorn.auth.community:${community:?}" \
	--data   "urn:adql.copy.depth=${adqlcopydepth:-THIN}" \
	--data   "adql.resource.schema.import.name=${ivoaname:?}" \
	--data   "adql.resource.schema.import.base=${ivoaschema:?}" \
	"${endpointurl:?}${atlasadql:?}/schemas/import" 

	ivoaname=ICECUBE
	ivoaschema=/ivoa/schema/1802268

	curl  \
	--header "firethorn.auth.identity:${identity:?}" \
	--header "firethorn.auth.community:${community:?}" \
	--data   "urn:adql.copy.depth=${adqlcopydepth:-THIN}" \
	--data   "adql.resource.schema.import.name=${ivoaname:?}" \
	--data   "adql.resource.schema.import.base=${ivoaschema:?}" \
	"${endpointurl:?}${atlasadql:?}/schemas/import" 


        ln -s -f "${HOME:?}/firethorn.spaces.${datetime:?}" "${HOME:?}/firethorn.spaces"
        cat "${HOME:?}/firethorn.spaces"


	gaiapublic=http://peter:8080/firethorn/adql/schema/1638685
	adqlresource=http://peter:8080/firethorn/adql/resource/1605644




# -----------------------------------------------------
# Run test queries.
#[user@laptop]

       source "bin/04-01-create-query-space.sh" 'Test workspace'

        source "bin/04-03-import-query-schema.sh" "${adqlspace:?}" 'GACS'    'GACS'
        source "bin/04-03-import-query-schema.sh" "${adqlspace:?}" 'ICECUBE' 'ICECUBE'

        source "bin/04-03-create-query-schema.sh"

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                nualpha,
                nudelta
            FROM
                ICECUBE.nucand
            WHERE
                nualpha BETWEEN 263.0 AND 263.9
            AND
                nudelta BETWEEN 19.0 AND 19.9
            "

        source "bin/05-03-execute-query.sh" \
            "AUTO" \
            "
            SELECT
                count(*)
            FROM
                GACS.g10_lmc
            "
    exit



    exit





# -------------------------------------------------------------------------------------------
# Configure Python service.
# (need to be member of group 'users')
#[user@desktop]

    deploytype=live
    deploylist="${HOME:?}/${deploytype:?}.machines"
    deployprop="${HOME:?}/${deploytype:?}.properties"

    source "${deploylist:?}"
    ssh "${wepyuser}@${wepyhost:?}" 

        vi /var/www/osa/firethorn.ini

        ~   adqlspace=http://peter:8080/firethorn/adql/resource/32773
        ~   atlasschema=http://peter:8080/firethorn/adql/schema/164023
        ~   atlasprivate=http://peter:8080/firethorn/adql/schema/164023
        ~   firethorn_base=http://peter:8080/firethorn

    exit

