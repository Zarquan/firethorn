#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

 sudo yum install maven

 hg clone http://wfau.metagrid.co.uk/code/firethorn hg


 nano firethorn.settings


FIRETHORN_NAME=hg
FIRETHORN_BASE=/home/stv/hg
FIRETHORN_CODE=${FIRETHORN_BASE?}
FIRETHORN_CONF=${FIRETHORN_BASE?}



# -----------------------------------------------------
# Build our Docker images.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)

        docker-compose \
            --file docker/compose/images.yml \
            build

    popd

#---------------------------------------------------------------------
# Compile our Java code.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our Java containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)
        pushd firethorn-ogsadai/webapp
            mvn docker:package
        popd

        export buildtag=$(hg branch)
        pushd firethorn-webapp
            mvn docker:package
        popd

    popd

# -----------------------------------------------------
# Fetch the current branch name.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)

    popd

# -----------------------------------------------------
# Create our chain properties.
#[user@virtual]

    source "${HOME:?}/"
    cat > "${HOME:?}/chain.properties" << EOF

metadata=postgres
metauser=$(pwgen 20 1)
metapass=$(pwgen 20 1)

userhost=$(secret 'firethorn.user.host')
userdata=$(secret 'firethorn.user.data')
useruser=$(secret 'firethorn.user.user')
userpass=$(secret 'firethorn.user.pass')

datahost=$(secret 'firethorn.data.host')
datadata=$(secret 'firethorn.data.data')
datauser=$(secret 'firethorn.data.user')
datapass=$(secret 'firethorn.data.pass')

tunneluser=$(secret 'ssh.tunnel.user')
tunnelhost=$(secret 'ssh.tunnel.host')

admingroup=wombles
adminuser=orinoco
adminpass=$(pwgen 20 1)

guestgroup=friends

EOF

# -----------------------------------------------------
# Create our Firethorn properties.
#[user@virtual]

    source "${HOME:?}/chain.properties"
    cat > "${HOME:?}/firethorn.properties" << EOF

	firethorn.meta.type=pgsql
	firethorn.meta.driver=org.postgresql.Driver
	firethorn.meta.host=bethany
	firethorn.meta.url=jdbc:postgresql://bethany/${metadata}
	firethorn.meta.data=postgres
        firethorn.meta.user=${metauser:?}
        firethorn.meta.pass=${metapass:?}

        firethorn.user.data=${userdata:?}
        firethorn.user.user=${useruser:?}
        firethorn.user.pass=${userpass:?}

        firethorn.admin.community=${admingroup:?}
        firethorn.admin.user.name=${adminuser:?}
        firethorn.admin.user.pass=${adminpass:?}

        firethorn.guest.community=${guestgroup:?}

EOF

    chmod a+r "${HOME:?}/firethorn.properties"
    chcon -t svirt_sandbox_file_t "${HOME:?}/firethorn.properties"

# -----------------------------------------------------
# Create our tester properties.
#[user@virtual]

    source "${HOME:?}/chain.properties"
    cat > "${HOME:?}/tester.properties" << EOF

        datadata=${datadata:?}
        datauser=${datauser:?}
        datapass=${datapass:?}
        metadata=${metadata:?}
        metauser=${metauser:?}
        metapass=${metapass:?}

        admingroup=${admingroup:?}
        adminuser=${adminuser:?}
        adminpass=${adminpass:?}

        guestgroup=${guestgroup:?}

EOF

    chmod a+r "${HOME:?}/tester.properties"
    chcon -t svirt_sandbox_file_t "${HOME:?}/tester.properties"

# -----------------------------------------------------
# Create our compose env file.
#[user@virtual]

    source "${HOME:?}/chain.properties"
    cat > "${HOME:?}/.env" << EOF

        buildtag=${buildtag:?}

        metadata=${metadata:?}
        metauser=${metauser:?}
        metapass=${metapass:?}

        userhost=${userhost:?}
        userdata=${userdata:?}
	useruser=${useruser:?}
	userpass=${userpass:?}

        datahost=${datahost:?}
        datadata=${datahost:?}

        guestgroup={guestgroup:?}
        adminuser={adminuser:?}
        adminpass={adminpass:?}
        admingroup={admingroup:?}
        tunneluser=${tunneluser:?}
        tunnelhost=${tunnelhost:?}

EOF

# -----------------------------------------------------
# Set the compose file path.
#[user@virtual]
    source "${HOME:?}/firethorn.settings"
    compose="${FIRETHORN_CODE:?}/docker/compose"

# -----------------------------------------------------
# Run our tester.
#[user@virtual]

    docker-compose \
        --file "${compose:?}/tester.yml" \
        run \
            tester

# -----------------------------------------------------
# -----------------------------------------------------
# Load our configuration.
#[root@tester]


### Create meta/ATLASDR1_TablesSchema.xml
	
	source /etc/tester.properties

        mkdir meta
        pushd meta
            wget https://raw.githubusercontent.com/stvoutsin/firethorn.py/master/firethorn/meta/ATLASDR1_TablesSchema.xml
        popd 

        skip-headers()
            {
            sed '
                /^HTTP\/1.1 100/,/^\r$/ {
                    d
                    }
                '
            }

        split-headers()
            {
            sed '
                /^HTTP\/1.1 [0-9]\{3\}/,/^\r$/ {
                    /^\r$/ !{
                        w /tmp/response-headers.txt
                        d
                        }
                    }
                '
            }

        get-httpcode()
            {
            sed -n '
                s/\(^HTTP.*\) \r/\1/p
                ' /tmp/response-headers.txt
            }

        get-username()
            {
            sed -n '
                s/^firethorn.auth.username: \(.*\)\r/\1/p
                ' /tmp/response-headers.txt
            }

        get-group()
            {
            sed -n '
                s/^firethorn.auth.community: \(.*\)\r/\1/p
                ' /tmp/response-headers.txt
            }

        print-headers()
            {
            echo "----"
            echo "HTTP code [$(get-httpcode)]"
            echo "Community [$(get-group)]"
            echo "Username  [$(get-username)]"
            echo "----"
            }

        print-link()
            {
            local link=${1:?}
            local text=${2:?}
            echo
            echo "----"
            echo "${text} [${link}]"
            echo "----"
            echo
            }

# -----------------------------------------------------
# Make a HEAD request to check admin account works.
#[root@deployer]

        curl \
            --head \
            --silent \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --header "firethorn.auth.community:${admingroup:?}" \
            "${endpointurl:?}/system/info" \
            | split-headers

        print-headers

# -----------------------------------------------------
# Make a HEAD request to get a guest username.
#[root@deployer]

        curl \
            --head \
            --silent \
            "${endpointurl:?}/system/info" \
            | split-headers

        guestuser=$(get-username)

        print-headers

# -----------------------------------------------------
# Make a HEAD request to choose our test username.
#[root@deployer]

        testuser=albert.augustus@example.com
        testpass=$(pwgen 20 1)

        curl \
            --head \
            --silent \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            "${endpointurl:?}/system/info" \
            | split-headers

        testgroup=$(get-group)

        print-headers

# -----------------------------------------------------
# Get the system status.
#[root@deployer]

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${testuser:?}" \
            --header "firethorn.auth.password:${testpass:?}" \
            "${endpointurl:?}/system/info" \
            | split-headers \
            | jq '.' | tee /tmp/system-info.json

        print-headers

# -----------------------------------------------------
# Create the Atlas JdbcResource as admin user.
#[root@deployer]

        jdbcname="ATLAS JDBC resource"

        catalog="ATLASDR1"

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --header "firethorn.auth.community:${admingroup:?}" \
            --data   "jdbc.resource.name=${jdbcname:?}" \
            --data   "jdbc.resource.connection.database=${datadata:?}" \
            --data   "jdbc.resource.connection.catalog=${catalog:?}" \
            --data   "jdbc.resource.connection.type=${datatype:?}" \
            --data   "jdbc.resource.connection.host=${datahost:?}" \
            --data   "jdbc.resource.connection.user=${datauser:?}" \
            --data   "jdbc.resource.connection.pass=${datapass:?}" \
            "${endpointurl:?}/jdbc/resource/create" \
            | split-headers \
            | jq '.' | tee /tmp/atlas-jdbc.json

        print-headers

# -----------------------------------------------------
# Extract the JdbcResource URL.
#[root@deployer]

        atlasjdbc=$(
            jq -r '.self' /tmp/atlas-jdbc.json
            )

        print-link "${atlasjdbc:?}" 'Atlas JDBC'


# -----------------------------------------------------
# Create an empty AdqlResource to represent the local JDBC database.
#[root@deployer]

        adqlname="ATLAS ADQL resource"

        curl \
            --silent \
            --include \
            --header "firethorn.auth.community:${admingroup:?}" \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --data   "adql.resource.name=${adqlname:?}" \
            "${endpointurl:?}/adql/resource/create" \
            | split-headers \
            | jq '.' | tee /tmp/atlas-adql.json

        print-headers

# -----------------------------------------------------
# Extract the AdqlResource URL.
#[root@deployer]

        atlasadql=$(
            jq -r '.self' /tmp/atlas-adql.json
            )

        print-link "${atlasadql:?}" 'Atlas ADQL'

# -----------------------------------------------------
# Locate the JdbcSchema based on catalog and schema name.
#[root@deployer]

        catalog="ATLASDR1"
        schema="dbo"
        
        curl \
            --silent \
            --include \
            --header "firethorn.auth.community:${admingroup:?}" \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --data   "jdbc.schema.catalog=${catalog:?}" \
            --data   "jdbc.schema.schema=${schema:?}" \
            "${atlasjdbc:?}/schemas/select" \
            | split-headers \
            | jq '.' | tee /tmp/jdbc-schema.json

        print-headers

# -----------------------------------------------------
# Extract the JdbcSchema URL.
#[root@deployer]

        jdbcschema=$(
            jq -r '.self' /tmp/jdbc-schema.json
            )

        print-link "${jdbcschema:?}" 'JDBC schema'

# -----------------------------------------------------
# Import the mapping between JDBC and ADQL tables.
#[root@deployer]

        metadoc="meta/ATLASDR1_TablesSchema.xml"

        curl \
            --silent \
            --include \
            --header "firethorn.auth.community:${admingroup:?}" \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --form   "metadoc.base=${jdbcschema:?}" \
            --form   "metadoc.file=@${metadoc:?}" \
            "${atlasadql:?}/metadoc/import" \
            | skip-headers | split-headers \
            | jq '.' | tee /tmp/adql-schema.json

# -----------------------------------------------------
# Extract the AdqlSchema URL.
#[root@deployer]

        adqlschema=$(
            jq -r '.[].self' /tmp/adql-schema.json
            )

        print-link "${adqlschema:?}" 'ADQL schema'


# -----------------------------------------------------
# Query the Atlas database.
#[root@tester]

cat > /tmp/atlas-query.adql << EOF

        SELECT
            COUNT(sourceID),
            (ROUND( ra/10, 0) * 10) AS rablock,
            (ROUND(dec/10, 0) * 10) AS decblock
        FROM
            ATLASDR1.atlasSource
        WHERE
            sourceID <> 0
        GROUP BY
            (ROUND( ra/10, 0) * 10),
            (ROUND(dec/10, 0) * 10)
        ORDER BY
            rablock,
            decblock

EOF

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --header "firethorn.auth.community:${admingroup:?}" \
            --data-urlencode "adql.query.input@/tmp/atlas-query.adql" \
            --data "adql.query.status.next=COMPLETED" \
            --data "adql.query.wait.time=600000" \
            "${atlasadql:?}/queries/create" \
            | split-headers \
            | jq '.' | tee /tmp/atlas-query.json

        print-headers

# -----------------------------------------------------
# Get the results as a VOTable.
#[root@tester]

        votableurl=$(
            jq -r '.results.formats.votable' "/tmp/atlas-query.json"
            )

        curl \
            --silent \
            ${votableurl:?} \
            | xmllint --format - \
            | tee /tmp/atlas-query.vot



	# -----------------------------------------------------
	# Testing TAP

	resourceid=$(basename ${atlasadql:?}) 
	format=VOTABLE
	lang=ADQL
	request=doQuery
	

        identity=${identity:-$(date '+%H:%M:%S')}
        community=${community:-$(date '+%A %-d %B %Y')}

        source "bin/01-01-init-rest.sh"


        # Get VOSI
	curl ${endpointurl:?}/tap/${resourceid:?}/tables


	# ----------------------TAP_SCHEMA generating-------------------------------

	tap_schema_user=${metauser:?}
	tap_schema_pass=${metapass:?}
	tap_schema_driver=org.postgresql.Driver
	tap_schema_db=${metadata?}
        tap_schema_host=bethany
        tap_schema_type=pgsql
        tap_schema_port=5432


        # Generate TAP_SCHEMA
	curl --header "firethorn.auth.username:${adminuser:?}" \
             --header "firethorn.auth.password:${adminpass:?}" \
             --header "firethorn.auth.community:${admingroup:?}" \
             --data "user=${tap_schema_user:?}&pass=${tap_schema_pass:?}&driver=${tap_schema_driver:?}&catalog=${tap_schema_db:?}&database=${tap_schema_db:?}&host=${tap_schema_host:?}&type=${tap_schema_type:?}&port=${tap_schema_port:?}" ${endpointurl:?}/tap/${resourceid:?}/generateTapSchema



cat > /tmp/atlas-query.adql << EOF

    SELECT TOP 10 * FROM TAP_SCHEMA.schemas

EOF

        curl \
            --silent \
            --include \
            --header "firethorn.auth.username:${adminuser:?}" \
            --header "firethorn.auth.password:${adminpass:?}" \
            --header "firethorn.auth.community:${admingroup:?}" \
            --data-urlencode "adql.query.input@/tmp/atlas-query.adql" \
            --data "adql.query.status.next=COMPLETED" \
            --data "adql.query.wait.time=600000" \
            "${atlasadql:?}/queries/create" \
            | split-headers \
            | jq '.' | tee /tmp/atlas-query.json

        print-headers
