#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

##########################################################
##### Notes on Deploying WFAU TAP Services on trop02 #####
##########################################################


# -----------------------------------------------------
# Create Virtual Machine (Ulov)
# -----------------------------------------------------

stv@trop02:~$ createvm

INFO : Base pool  [base]
INFO : Live pool  [live]
INFO : Connection [qemu:///system]

INFO : Data path  [/var/local/projects/ischnura/github/src/dat]

INFO : Machines   [/var/local/projects/ischnura/github/src/dat/tropo-machines.txt]
INFO : Template   [/var/local/projects/ischnura/github/src/dat/tropo-template.xml]

[1] Araybwyn
[2] Lothigometh
[3] Ulov
[4] Dwiema
[5] Ibalehar
[6] Eterathiel
[7] Siamond
[8] Acilamwen
Select machine name (1) 3
setlocale: No such file or directory

[1] fedora-27-docker-base-20180129.qcow
[2] fedora-25-docker-16G-20170713.qcow
Select base image (1) 1
setlocale: No such file or directory

INFO : Node name [Ulov]
INFO : Base name [fedora-27-docker-base-20180129.qcow]
INFO : Base path [/var/lib/libvirt/images/base/fedora-27-docker-base-20180129.qcow]
INFO : Disc name [Ulov.qcow]
INFO : Disc size [16GiB]

INFO : MAC  [52:54:00:02:02:0A]
INFO : IPv4 [192.168.202.10]
INFO : IPv6 []

Create virtual machine (Y/n)Y

Found existing virtual machine [Ulov]
Delete existing virtual machine (Y/n)Y
setlocale: No such file or directory
Stopping virtual machine [Ulov]
setlocale: No such file or directory
Domain bbf3837c-10e7-46d1-abd5-31f4748c2dd0 destroyed
Delete associated storage (Y/n)Y
Deleting virtual machine [Ulov]
setlocale: No such file or directory
Domain bbf3837c-10e7-46d1-abd5-31f4748c2dd0 has been undefined
Volume 'vda'(/libvirt/storage/live/Ulov.qcow) removed.
Volume 'vdb'(/var/lib/libvirt/images/init/Ulov.iso) removed.

Creating new volume [Ulov.qcow]
setlocale: No such file or directory
Vol Ulov.qcow created
setlocale: No such file or directory
Name:           Ulov.qcow
Type:           file
Capacity:       16.00 GiB
Allocation:     196.00 KiB

setlocale: No such file or directory
Vol Ulov.iso created
setlocale: No such file or directory
setlocale: No such file or directory
setlocale: No such file or directory
Creating new virtual machine [Ulov]
setlocale: No such file or directory
Domain Ulov defined from /tmp/tmp.LUqbc9KpQY
Starting new virtual machine [Ulov]
setlocale: No such file or directory
Domain Ulov started



# -----------------------------------------------------
# Login as Stevedore
# -----------------------------------------------------


ssh Stevedore@Ulov


# -----------------------------------------------------
# Add secret function.
# -----------------------------------------------------

    secrethost='stv@shepseskaf.roe.ac.uk'
    secretfile='${HOME:?}/secret.store'

    secret()
    {
        local key=${1:?}
        ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
    }

    secret 'firethorn.user.host'


# -----------------------------------------------------
# Set the target branch and builtag
# -----------------------------------------------------


    export buildtag=2.1.23
    export branch=default


# -----------------------------------------------------
# Remove existing containers.
# -----------------------------------------------------

    docker rm -vf $(docker ps -aq)


# -----------------------------------------------------
# Remove existing images.
# -----------------------------------------------------

    docker rmi -f $(docker images -q)


# -----------------------------------------------------
# Create our chain.properties file
# -----------------------------------------------------

cat > "${HOME:?}/chain.properties" << EOF

metadata=postgres
metauser=$(pwgen 20 1)
metapass=$(pwgen 20 1)

userhost=$(secret 'firethorn.user.host')
userdata=$(secret 'firethorn.user.data')
useruser=$(secret 'firethorn.user.user')
userpass=$(secret 'firethorn.user.pass')

datahost=$(secret 'firethorn.data.host')
datadata=$(secret 'firethorn.data.data')
datacatalog=$(secret 'firethorn.data.catalog')
datatype=$(secret 'firethorn.data.type')
datauser=$(secret 'firethorn.data.user')
datapass=$(secret 'firethorn.data.pass')

tapschemadatabase=$(secret 'firethorn.tapschema.database.name')
tapschemauser=$(secret 'firethorn.tapschema.database.user')
tapschemapass=$(secret 'firethorn.tapschema.database.pass')
tapschemahost=$(secret 'firethorn.tapschema.database.host')
tapschemaport=$(secret 'firethorn.tapschema.database.port')
tapschematype=$(secret 'firethorn.tapschema.database.type')
tapschemajdbcname=$(secret 'firethorn.tapschema.jdbc.name')

tunneluser=$(secret 'ssh.tunnel.user')
tunnelhost=$(secret 'ssh.tunnel.host')

admingroup=$(secret 'admingroup')
adminuser=$(secret 'adminuser')
adminpass=$(secret 'adminpass')

adql_query_delay_first=$(secret 'adql.query.delay.first')
adql_query_delay_every=$(secret 'adql.query.delay.every')
 
firethorn_limits_rows_absolute=$(secret 'firethorn.limits.rows.absolute')
firethorn_limits_rows_default=$(secret 'firethorn.limits.rows.default')

guestgroup=friends
endpoint=$(secret 'endpoint')

EOF



# -----------------------------------------------------
# Create our Firethorn properties.
# -----------------------------------------------------

source "${HOME:?}/chain.properties"
cat > "${HOME:?}/firethorn.properties" << EOF

firethorn.meta.type=pgsql
firethorn.meta.driver=org.postgresql.Driver
firethorn.meta.host=bethany
firethorn.meta.url=jdbc:postgresql://bethany/${metadata}
firethorn.meta.data=postgres
firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}

firethorn.user.type=mssql
firethorn.user.url=jdbc:jtds:sqlserver://${userhost:?}/${userdata:?}
firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver
firethorn.user.host=${userhost:?}
firethorn.user.data=${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}

firethorn.tapschema.resource.name=${tapschemajdbcname}
firethorn.tapschema.database.name=${tapschemadatabase}
firethorn.tapschema.database.host=${tapschemahost}
firethorn.tapschema.database.port=${tapschemaport}
firethorn.tapschema.database.user=${tapschemauser}
firethorn.tapschema.database.pass=${tapschemapass}

firethorn.admin.community=${admingroup:?}
firethorn.admin.user.name=${adminuser:?}
firethorn.admin.user.pass=${adminpass:?}

firethorn.guest.community=${guestgroup:?}

adql.query.delay.first=${adql_query_delay_first:?}
adql.query.delay.every=${adql_query_delay_every:?}

firethorn.limits.rows.absolute=${firethorn_limits_rows_absolute:?}
firethorn.limits.rows.default=${firethorn_limits_rows_default:?}
	

EOF



# -----------------------------------------------------
# Create our compose env file.
# -----------------------------------------------------

source "${HOME:?}/chain.properties"
cat > "${HOME:?}/.env" << EOF

	buildtag=${branch:?}

	metadata=postgres
	metauser=${metauser:?}
	metapass=${metapass:?}

        datadata=${datadata:?}
        datauser=${datauser:?}
        datapass=${datapass:?}
	datahost=${datahost:?}
	datacatalog=${datacatalog:?}
	datatype=mssql

	tapschemadatabase=${tapschemadatabase:?}
	tapschemauser=${tapschemauser:?}
	tapschemapass=${tapschemapass:?}
	tapschemahost=${tapschemahost}
	tapschemaport=${tapschemaport:?}
	tapschemajdbcname=${tapschemajdbcname:?}
	tapschematype=${tapschematype:?}

	userhost=${userhost:?}
	userdata=${userdata:?}
	useruser=${useruser:?}
	userpass=${userpass:?}

	admingroup=${admingroup:?}
	adminuser=${adminuser:?}
	adminpass=${adminpass:?}
	guestgroup=${guestgroup:?}

	adql_query_delay_first=${adql_query_delay_first:?}
	adql_query_delay_every=${adql_query_delay_every:?}

	firethorn_limits_rows_absolute=${firethorn_limits_rows_absolute:?}
	firethorn_limits_rows_default=${firethorn_limits_rows_default:?}

	endpoint=${endpoint:?}
EOF



# -----------------------------------------------------
# Clone firethorn.py from github
# -----------------------------------------------------


pushd "${HOME:?}"

    git clone https://github.com/stvoutsin/firethorn.py.git

popd


# -----------------------------------------------------
# Build our python client image
# -----------------------------------------------------


pushd  "${HOME:?}/firethorn.py/docker"

   docker build --tag "firethorn-py" firethorn-py

popd


# -----------------------------------------------------
# Run our python deployer
# -----------------------------------------------------

source "${HOME:?}/chain.properties"

pushd  "${HOME}/"
    cp  firethorn.py/docker/tap-deployer.yml ~/tap-deployer.yml
    docker-compose --file "tap-deployer.yml" run firethorn-py
popd


# -----------------------------------------------------
# Run python3
# -----------------------------------------------------
python3

..


import firethorn

ft = firethorn.Firethorn(endpoint="http://gillian:8080/firethorn")
ft.login(firethorn.config.adminuser, firethorn.config.adminpass, firethorn.config.admingroup)

# Load WFAU TAP Service Configurations

ft.firethorn_engine.load_resources("https://raw.githubusercontent.com/stvoutsin/firethorn.py/master/firethorn/data/wsa-tap.json")
ft.firethorn_engine.load_resources("https://raw.githubusercontent.com/stvoutsin/firethorn.py/master/firethorn/data/vsa-tap.json")
ft.firethorn_engine.load_resources("https://raw.githubusercontent.com/stvoutsin/firethorn.py/master/firethorn/data/ssa-tap.json")
ft.firethorn_engine.load_resources("https://raw.githubusercontent.com/stvoutsin/firethorn.py/master/firethorn/data/osa-tap.json")


# For output refer to doc/notes/stv/20180612-Firethornpy-TAP-deploy-Output.txt

exit()

..

# -----------------------------------------------------
# Create Proxy VM
# -----------------------------------------------------
ssh trop02

stv@trop02:~$ createvm

INFO : Base pool  [base]
INFO : Live pool  [live]
INFO : Connection [qemu:///system]

INFO : Data path  [/var/local/projects/ischnura/github/src/dat]

INFO : Machines   [/var/local/projects/ischnura/github/src/dat/tropo-machines.txt]
INFO : Template   [/var/local/projects/ischnura/github/src/dat/tropo-template.xml]

[1] Araybwyn
[2] Lothigometh
[3] Ulov
[4] Dwiema
[5] Ibalehar
[6] Eterathiel
[7] Siamond
[8] Acilamwen
Select machine name (1) 2
setlocale: No such file or directory

[1] fedora-27-docker-base-20180129.qcow
[2] fedora-25-docker-16G-20170713.qcow
Select base image (1) 1
setlocale: No such file or directory

INFO : Node name [Lothigometh]
INFO : Base name [fedora-27-docker-base-20180129.qcow]
INFO : Base path [/var/lib/libvirt/images/base/fedora-27-docker-base-20180129.qcow]
INFO : Disc name [Lothigometh.qcow]
INFO : Disc size [16GiB]

INFO : MAC  [52:54:00:02:02:09]
INFO : IPv4 [192.168.202.9]
INFO : IPv6 []

Create virtual machine (Y/n)Y

Creating new volume [Lothigometh.qcow]
setlocale: No such file or directory
Vol Lothigometh.qcow created
setlocale: No such file or directory
Name:           Lothigometh.qcow
Type:           file
Capacity:       16.00 GiB
Allocation:     196.00 KiB

setlocale: No such file or directory
Vol Lothigometh.iso created
setlocale: No such file or directory
setlocale: No such file or directory
setlocale: No such file or directory
Creating new virtual machine [Lothigometh]
setlocale: No such file or directory
Domain Lothigometh defined from /tmp/tmp.SkURmpnvfl
Starting new virtual machine [Lothigometh]
setlocale: No such file or directory
Domain Lothigometh started


exit


ssh Stevedore@Lothigometh

# -----------------------------------------------------
# Setup proxy server
# -----------------------------------------------------

docker run -p 80:80 --name firepache  --memory 512M -d firethorn/apache:latest


[Stevedore@Lothigometh ~]$ docker ps
CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS              PORTS                NAMES
e744f34c58ee        firethorn/apache:latest   "/bin/sh -c '/usr/sb…"   26 seconds ago      Up 26 seconds       0.0.0.0:80->80/tcp   firepache



# -----------------------------------------------------
# TODO: Setup proxy server configurations 
# Add Proxy entries for each WFAU service
# -----------------------------------------------------


[Stevedore@Lothigometh ~]$ docker exec -it firepache bash	
[Stevedore@Lothigometh ~]$ nano /etc/apache2/sites-enabled/000-default.conf

# wsa: http://192.168.202.10:8080/firethorn/tap/54/
# vsa: http://192.168.202.10:8080/firethorn/tap/57/
# ssa: http://192.168.202.10:8080/firethorn/tap/60/
# osa: http://192.168.202.10:8080/firethorn/tap/63/
 ..

<VirtualHost *:80>
    ServerName tap.metagrid.xyz

    ProxyRequests Off
    ProxyPreserveHost On

    <Proxy *>
        Order deny,allow
        Allow from all
    </Proxy>

    ProxyPassMatch ^/osa\/(.*)$  http://192.168.202.10:8080/firethorn/tap/63/$1
    ProxyPassReverse  ^/osa\/(.*)$  http://192.168.202.10:8080/firethorn/tap/63/$1

    ProxyPassMatch ^/ssa\/(.*)$  http://192.168.202.10:8080/firethorn/tap/60/$1
    ProxyPassReverse  ^/ssa\/(.*)$  http://192.168.202.10:8080/firethorn/tap/60/$1

    ProxyPassMatch ^/vsa\/(.*)$  http://192.168.202.10:8080/firethorn/tap/57/$1
    ProxyPassReverse  ^/vsa\/(.*)$  http://192.168.202.10:8080/firethorn/tap/57/$1

    ProxyPassMatch ^/wsa\/(.*)$  http://192.168.202.10:8080/firethorn/tap/54/$1
    ProxyPassReverse  ^/wsa\/(.*)$  http://192.168.202.10:8080/firethorn/tap/54/$1


    ProxyPass ^/(.*)$          http://192.168.202.10:8080/
    ProxyPassMatch ^/(.*)$     http://192.168.202.10:8080/  retry=0 connectiontimeout=14400 timeout=14400
    ProxyPassReverse  ^/(.*)$  http://192.168.202.10:8080/

</VirtualHost>

..
