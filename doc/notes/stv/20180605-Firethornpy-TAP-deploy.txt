#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


# -----------------------------------------------------
# Create a new VM.
#[user@trop]

    createvm

        INFO : Node name [Gworewia]
        INFO : Base name [fedora-25-docker-16G-20170713.qcow]
        INFO : Base path [/var/lib/libvirt/images/base/fedora-25-docker-16G-20170713.qcow]
        INFO : Disc name [Gworewia.qcow]
        INFO : Disc size [16GiB]

        INFO : Node name [Lothigometh]
        INFO : Base name [fedora-25-docker-16G-20170713.qcow]
        INFO : Base path [/var/lib/libvirt/images/base/fedora-25-docker-16G-20170713.qcow]
        INFO : Disc name [Lothigometh.qcow]
        INFO : Disc size [16GiB]

# -----------------------------------------------------
# Login as normal user.
#[user@trop]

    ssh Gworewia


# -----------------------------------------------------
# Add our secret function.
#[user@virtual]

    vi "${HOME:?}/secret.sh"

        ....
        ....
        ....

    source "${HOME:?}/secret.sh"
    secret 'frog'

# -----------------------------------------------------
# Set the target branch
#[user@virtual]


export buildtag=2.1.22-stv-wfau-tap
export branch=2.1.22-stv-wfau-tap


# -----------------------------------------------------
# Remove existing containers.
#[user@desktop]

    docker rm -vf $(docker ps -aq)

# -----------------------------------------------------
# Remove existing images.
#[user@desktop]

    docker rmi -f $(docker images -q)



 sudo yum -y install maven

 hg clone http://wfau.metagrid.co.uk/code/firethorn hg


# nano firethorn.settings

..
	FIRETHORN_NAME=hg
	FIRETHORN_BASE=/home/stv/hg
	FIRETHORN_CODE=${FIRETHORN_BASE?}
	FIRETHORN_CONF=${FIRETHORN_BASE?}

...



# -----------------------------------------------------
# Build our Docker images.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)

        docker-compose \
            --file docker/compose/images.yml \
            build

    popd

#---------------------------------------------------------------------
# Compile our Java code.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        mvn clean install

    popd

# -----------------------------------------------------
# Build our Java containers.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)
        pushd firethorn-ogsadai/webapp
            mvn docker:package
        popd

        export buildtag=$(hg branch)
        pushd firethorn-webapp
            mvn docker:package
        popd

    popd

# -----------------------------------------------------
# Fetch the current branch name.
#[user@desktop]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"

        export buildtag=$(hg branch)

    popd

# -----------------------------------------------------
# Download our deployer compose file
#[user@virtual]



cat > "${HOME:?}/chain.properties" << EOF

metadata=postgres
metauser=$(pwgen 20 1)
metapass=$(pwgen 20 1)

userhost=$(secret 'firethorn.user.host')
userdata=$(secret 'firethorn.user.data')
useruser=$(secret 'firethorn.user.user')
userpass=$(secret 'firethorn.user.pass')

datahost=$(secret 'firethorn.data.host')
datadata=$(secret 'firethorn.data.data')
datacatalog=$(secret 'firethorn.data.data')
datatype=mssql
datauser=$(secret 'firethorn.data.user')
datapass=$(secret 'firethorn.data.pass')

tapschemadatabase=$(secret 'firethorn.tapschema.database.name')
tapschemauser=$(secret 'firethorn.tapschema.database.user')
tapschemapass=$(secret 'firethorn.tapschema.database.pass')
tapschemahost=$(secret 'firethorn.tapschema.database.host')
tapschemaport=$(secret 'firethorn.tapschema.database.port')
tapschemahost=carolina
tapschemajdbcname=$(secret 'firethorn.tapschema.resource.name')
tapschemadriver=$(secret 'firethorn.tapschema.database.driver')

tunneluser=$(secret 'ssh.tunnel.user')
tunnelhost=$(secret 'ssh.tunnel.host')

admingroup=
adminuser=
adminpass=

guestgroup=friends
endpoint=http://localhost:8080/firethorn

EOF



# -----------------------------------------------------
# Create our Firethorn properties.
#[user@virtual]

source "${HOME:?}/chain.properties"
cat > "${HOME:?}/firethorn.properties" << EOF

firethorn.meta.type=pgsql
firethorn.meta.driver=org.postgresql.Driver
firethorn.meta.host=bethany
firethorn.meta.url=jdbc:postgresql://bethany/${metadata}
firethorn.meta.data=postgres
firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}

firethorn.user.type=mssql
firethorn.user.url=jdbc:jtds:sqlserver://${userhost:?}/${userdata:?}
firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver

firethorn.user.host=${userhost:?}
firethorn.user.data=${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}

firethorn.tapschema.resource.name="${tapschemajdbcname}"
firethorn.tapschema.database.name="${tapschemadatabase}"
firethorn.tapschema.database.host="${tapschemahost}"
firethorn.tapschema.database.port="${tapschemaport}"
firethorn.tapschema.database.user="${tapschemauser}"
firethorn.tapschema.database.pass="${tapschemapass}"
firethorn.tapschema.database.driver="${tapschemadriver}"

firethorn.admin.community=${admingroup:?}
firethorn.admin.user.name=${adminuser:?}
firethorn.admin.user.pass=${adminpass:?}

firethorn.guest.community=${guestgroup:?}

EOF



# -----------------------------------------------------
# Create our compose env file.
#[user@virtual]

source "${HOME:?}/chain.properties"
cat > "${HOME:?}/.env" << EOF

	buildtag=${branch:?}

	metadata=postgres
	metauser=${metauser:?}
	metapass=${metapass:?}

        datadata=${datadata:?}
        datauser=${datauser:?}
        datapass=${datapass:?}
	datahost=${datahost:?}
	datacatalog=${datacatalog:?}
	datatype=mssql

	tapschemadatabase=${tapschemadatabase:?}
	tapschemauser=${tapschemauser:?}
	tapschemapass=${tapschemapass:?}
	tapschemahost=${tapschemahost}
	tapschemaport=${tapschemaport:?}
	tapschemajdbcname=${tapschemajdbcname:?}
	tapschematype=${tapschematype:?}

	userhost=${userhost:?}
	userdata=${userdata:?}
	useruser=${useruser:?}
	userpass=${userpass:?}

	admingroup=${admingroup:?}
	adminuser=${adminuser:?}
	adminpass=${adminpass:?}
	guestgroup=${guestgroup:?}


	endpoint=${endpoint:?}
EOF



# Run firethorn.py client

# -----------------------------------------------------
# Clone the firethorn.py project
#[user@virtual]

pushd "${HOME:?}"

    git clone https://github.com/stvoutsin/firethorn.py.git

popd


# -----------------------------------------------------
# Build our python client image
#[user@virtual]


pushd  "${HOME:?}/firethorn.py/docker"

   docker build --tag "firethorn-py" firethorn-py

popd

# -----------------------------------------------------
# Run our python client container
#[user@virtual]

source "${HOME:?}/chain.properties"


pushd  "${HOME}/"
    cp  firethorn.py/docker/tap-deployer.yml ~/tap-deployer.yml
    docker-compose --file "tap-deployer.yml" run firethorn-py
popd


# -----------------------------------------------------
# Run python3
#[user@virtual]

python3

..


>> import firethorn

>> ft = firethorn.Firethorn(endpoint="http://gworewia.metagrid.xyz/firethorn")
>> ft.login(firethorn.config.adminuser, firethorn.config.adminpass, firethorn.config.admingroup)
>> ft.firethorn_engine.load_resources("https://raw.githubusercontent.com/stvoutsin/firethorn.py/master/firethorn/data/vsa-tap.json")
  .. "TAP Service available at:  .. tap/67/"


# -----------------------------------------------------
# Connect to Proxy VM and Add Proxy entry for TAP service
#[user@virtual]

ssh root@Astoalith

docker exec -it firepache bash

root@a050cbd6960d:/# nano /etc/apache2/sites-enabled/000-default.conf 

<VirtualHost *:80>
    ServerName tap.roe.ac.uk

    ProxyRequests Off
    ProxyPreserveHost On

    <Proxy *>
        Order deny,allow
        Allow from all
    </Proxy>

    ProxyPassMatch ^/osa\/(.*)$  http://192.168.201.15:8080/firethorn/tap/59/$1
    ProxyPassReverse  ^/osa\/(.*)$  http://192.168.201.15:8080/firethorn/tap/59/$1

    ..

</VirtualHost>

