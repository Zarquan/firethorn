# Test VM ------------------------------------------

pi
    mac     52:54:00:00:00:11
    10.5.0.17
    ipv6    2001:08b0:be72:d4ea:5054:00ff:fe00:0011
    host    tyrosine
    base    ubuntu-12
    use     firethorn-hsqldb

xi
    mac     52:54:00:00:00:10
    ipv4    10.5.0.16
    ipv6    2001:08b0:be72:d4ea:5054:00ff:fe00:0010
    host    tyrosine
    base    ubuntu-12
    use     firethorn-tester

rho
    mac     52:54:00:00:00:12
    ipv4    10.5.0.18
    ipv6    2001:08b0:be72:d4ea:5054:00ff:fe00:0012
    host    tyrosine
    base    ubuntu-12
    use     firethorn-firethorn

tau
    mac     52:54:00:00:00:13
    ipv4    10.5.0.19
    ipv6    2001:08b0:be72:d4ea:5054:00ff:fe00:0013
    host    tyrosine
    base    ubuntu-12
    use     firethorn-ogsadai

#-----------------------------------------------------------------------------------
# Create new virtual machines ....
#[user@desktop]

    ssh root@tyrosine

#[root@kvm-server]

    pushd ${HOME:?}/kvm

        #
        # MAC address lookup table.
        dhcpmac()
            {
            sed -n '
                s/^'"${1:?}"' *\([^ ]*\)/\1/ p
                ' dhcp.dat
            }

        #
        # Set the vm params.
        vmname=xi
        vmname=pi
        vmname=rho
        vmname=tau
        vmbase=ubuntu-12
        memunit=MiB
        memsize=512

        #
        # Set the disc image params.
        volsize=8G
        volname=${vmname:?}.qcow
        volback=$(virsh vol-path --pool 'base' "${vmbase:?}-base.qcow")

        #
        # Delete existing volume.
        virsh destroy  "${vmname:?}"
        virsh undefine "${vmname:?}"
        virsh vol-delete --pool 'default' "${volname:?}"

        #
        # Create a managed volume.
        virsh vol-create-as \
            'default' \
            "${volname:?}" \
            "${volsize:?}" \
            --allocation 0 \
            --format 'qcow2' \
            --backing-vol "${volback:?}" \
            --backing-vol-format 'qcow2'

        virsh vol-dumpxml --pool 'default' "${volname:?}"
        virsh vol-info    --pool 'default' "${volname:?}"

        volpath=$(virsh vol-path --pool 'default' "${volname:?}")

        #
        # Create a new domain.
        sed '
            s|<name>.*</name>|<name>'"${vmname:?}"'</name>|
            s|<uuid>.*</uuid>|<uuid>'"$(uuidgen)"'</uuid>|
            s|<memory unit='\''.*'\''>.*</memory>|<memory unit='\'''"${memunit:?}"''\''>'"${memsize:?}"'</memory>|
            s|<source file='\''.*'\''/>|<source file='\'''"${volpath:?}"''\''/>|
            s|<mac address='\''.*'\''/>|<mac address='\'''"$(dhcpmac ${vmname:?})"''\''/>|
            ' simple-vm.xml > "${vmname:?}.xml"

        #
        # Define a new (managed) instance
        virsh define "${vmname:?}.xml"
        virsh start  "${vmname:?}"

    popd
    exit
    
# ------------------------------------------
# Update our local SSH fingerprint
#[user@desktop]

    name=xi
    name=pi
    name=rho
    name=tau

    host=${name:?}.virtual.metagrid.co.uk
    sed -i '/^'${host:?}'/d' ~/.ssh/known_hosts
    ssh-keyscan ${host:?} >> ~/.ssh/known_hosts

# ------------------------------------------
# Login as root
#[user@desktop]

    ssh root@${name:?}.virtual.metagrid.co.uk

# ----------------------------------------------------------
# Update APT database.
#[root@test-vm] 

    apt-get update

# ----------------------------------------------------------
# Install generic tools.
#[root@test-vm] 

    apt-get -y install htop

    apt-get -y install gzip

    apt-get -y install unzip

    apt-get -y install pwgen

# ----------------------------------------------------------
# Install Java 1.7
#[root@test-vm] 

    apt-get -y install openjdk-7-jre

    apt-get -y install openjdk-7-jdk

#
# Install Mercurial 
#[root@test-vm] 

    apt-get -y install mercurial

#
# Install Maven
#[root@test-vm] 

    apt-get -y install maven

#
# Install Perl and JSON tools
#[root@test-vm] 

    apt-get -y install perl

    apt-get -y install libjson-perl

# ------------------------------------------------------------
# Create test user
#[root@test-vm] 

    tester=$(pwgen 16 1)

    useradd --create-home --shell /bin/bash --groups users "${tester:?}"

# -----------------------------------------------------
# Create our ssh config.
#[root@test-vm] 

    if [ ! -e "/home/${tester:?}/.ssh" ]
    then
        mkdir "/home/${tester:?}/.ssh"
    fi

    pushd "/home/${tester:?}/.ssh"
    
        if [ ! -e dmr.roe.ac.uk.pub ]
        then    
            wget http://data.metagrid.co.uk/sshkeys/dmr.roe.ac.uk.pub
            cat dmr.roe.ac.uk.pub >> authorized_keys
        fi

        if [ ! -e stelios.roe.ac.uk.pub ]
        then    
            wget http://data.metagrid.co.uk/sshkeys/stelios.roe.ac.uk.pub
            cat stelios.roe.ac.uk.pub >> authorized_keys
        fi

        if [ ! -e ktn.roe.ac.uk.pub ]
        then    
            wget http://data.metagrid.co.uk/sshkeys/ktn.roe.ac.uk.pub
            cat ktn.roe.ac.uk.pub >> authorized_keys
        fi

    popd

    chown -R "${tester:?}"  "/home/${tester:?}/.ssh"
    chgrp -R "${tester:?}"  "/home/${tester:?}/.ssh"
    chmod g=,o=,u=rwx "/home/${tester:?}/.ssh"

# ------------------------------------------------------------
# Print test user
#[root@test-vm] 

    echo "User name [${tester:?}]"

    exit
    
# ------------------------------------------------------------
# Login as our test user
#[user@desktop]

cat > "${HOME:?}/test-settings.txt" << 'EOF'

hsqluser=iezaitohthogaing
hsqlhost=pi.virtual.metagrid.co.uk

fireuser=ushiluodaduotosh
firehost=rho.virtual.metagrid.co.uk

ogsauser=ooyohriethohshoh
ogsahost=tau.virtual.metagrid.co.uk

testuser=coongainohxeiwak
testhost=xi.virtual.metagrid.co.uk

EOF

    source "${HOME:?}/test-settings.txt"

    ssh "${hsqluser:?}@${hsqlhost:?}"
    ssh "${fireuser:?}@${firehost:?}"
    ssh "${ogsauser:?}@${ogsahost:?}"
    ssh "${testuser:?}@${testhost:?}"


# -----------------------------------------------------
# Create our firethorn settings.
#[user@test-vm] 

cat >  "${HOME:?}/firethorn.settings" << 'EOF'
FIRETHORN_BASE=${FIRETHORN_BASE:-${HOME:?}/firethorn}
FIRETHORN_CODE=${FIRETHORN_CODE:-${FIRETHORN_BASE:?}/clone}
EOF

# -----------------------------------------------------
# Get a clone of the source code.
#[user@test-vm] 

    source "${HOME:?}/firethorn.settings"

    codepath="$(dirname  ${FIRETHORN_CODE:?})"
    codename="$(basename ${FIRETHORN_CODE:?})"

    if [ ! -e "${codepath:?}" ]
    then
        mkdir "${codepath:?}"
    fi

    pushd "${codepath:?}"

        if [ ! -e "${codename:?}" ]
        then
#
# External services.
#hg clone 'http://wfau.metagrid.co.uk/code/firethorn/' "${codename:?}"

#
# Shortcut for internal use only.
hghost=threonine.metagrid.co.uk
hgport=22
hguser=Zarquan
hgpath=/var/local/projects/edinburgh/wfau/firethorn/devel
ssh-keyscan ${hghost:?} >> ~/.ssh/known_hosts
hg clone "ssh://${hguser:?}@${hghost:?}:${hgport:?}/${hgpath:?}" "${codename:?}"

        else
            pushd "${codename:?}"
                hg pull
                hg update
            popd
        fi
    popd

# -----------------------------------------------------
# Copy our firethorn properties.
#[user@test-vm] 

    cat "${FIRETHORN_CODE:?}/firethorn-core/src/conf/firethorn-ogsadai.properties" > "${HOME:?}/firethorn.properties"
    cat "${FIRETHORN_CODE:?}/firethorn-database/properties/hsqldb.properties" >> "${HOME:?}/firethorn.properties"
    cat "${FIRETHORN_CODE:?}/firethorn-database/properties/mssql.properties"  >> "${HOME:?}/firethorn.properties"

    vi "${HOME:?}/firethorn.properties"

# ****
# Fill in the details manually
# ****

    exit

# -----------------------------------------------------
# Copy of latest maven-build (20130507-maven-build.txt).
#[user@desktop]

    # TTY #1 ------------------------------------------------------------
    source "${HOME:?}/test-settings.txt"
    ssh "${fireuser:?}@${firehost:?}"
    ssh "${ogsauser:?}@${ogsahost:?}"

        username=xxxx
        hostname=fenrir.roe.ac.uk
        
        sed -i '/^'${hostname:?}'/d' ~/.ssh/known_hosts
        ssh-keyscan ${hostname:?} >> ~/.ssh/known_hosts

        ssh -L '1433:ramses5:1433' "${username:?}@${hostname:?}"

    # TTY #2,3 -----------------------------------------------------------
    source "${HOME:?}/test-settings.txt"
    ssh "${hsqluser:?}@${hsqlhost:?}"

        source ${HOME:?}/firethorn.settings
        pushd "${FIRETHORN_CODE:?}"

            mvn -P depends clean install

            pushd 'firethorn-hsqldb'

                export MAVEN_OPTS=-Xmx128m
                mvn clean exec:java


    # TTY #4,5,6 ----------------------------------------------------------
    source "${HOME:?}/test-settings.txt"
    ssh "${fireuser:?}@${firehost:?}"


        source ${HOME:?}/firethorn.settings
        pushd "${FIRETHORN_CODE:?}"

            mvn -P database install

            mvn clean install 

            pushd 'firethorn-webapp'

                export MAVEN_OPTS=-Xmx128m
                mvn tomcat7:run | tee /tmp/firethorn-tomcat.log


    # TTY #7 ------------------------------------------------------------
    source "${HOME:?}/test-settings.txt"
    ssh "${ogsauser:?}@${ogsahost:?}"

        source "${HOME:?}/firethorn.settings"
        pushd "${FIRETHORN_CODE:?}"
            pushd 'firethorn-ogsadai/webapp'

                mvn clean compile war:war

                source src/test/bin/jdbc-functions.sh

                jdbcconfig twomass  firethorn.twomass "${HOME:?}/firethorn.properties"
                jdbcconfig ukidss   firethorn.ukidss  "${HOME:?}/firethorn.properties"
                jdbcconfig atlas    firethorn.atlas   "${HOME:?}/firethorn.properties"
                jdbcconfig wfau     firethorn.wfau    "${HOME:?}/firethorn.properties"
                jdbcconfig userdata firethorn.user    "${HOME:?}/firethorn.properties"

                export MAVEN_OPTS=-Xmx128m
                mvn tomcat6:run | tee /tmp/ogsadai-tomcat.log
        

    # TTY #8 ------------------------------------------------------------
    source "${HOME:?}/test-settings.txt"
    ssh "${testuser:?}@${testhost:?}"

        source ${HOME:?}/firethorn.settings
        pushd "${FIRETHORN_CODE:?}"
            pushd 'firethorn-ogsadai/activity/client'
                mvn -D skipTests=false -D test=SingleQueryTestCase test 
            popd
        popd

        exit

# -----------------------------------------------------
# Copy/paste instructions from the latest atlas-example (20130524-atlas-example.txt).
#[user@test-vm] 

    # TTY #9 ------------------------------------------------------------
    source "${HOME:?}/test-settings.txt"
    ssh "${testuser:?}@${testhost:?}"

        source ${HOME:?}/firethorn.settings
        FIRETHORN_TEST=${FIRETHORN_CODE:?}/integration/003

        pushd $(mktemp --directory)

            source "${FIRETHORN_TEST:?}/00-init-rest.sh"

            source "${FIRETHORN_TEST:?}/01-init-user.sh"
            source "${FIRETHORN_TEST:?}/02-00-create-jdbc-space.sh" 'spring:RoeATLAS' '*' 'atlas'

            source "${FIRETHORN_TEST:?}/03-00-create-adql-space.sh"

            source "${FIRETHORN_TEST:?}/03-01-import-jdbc-schema.sh" 'TWOXMM.dbo'         'twoxmm'
            source "${FIRETHORN_TEST:?}/03-01-import-jdbc-schema.sh" 'TWOMASS.dbo'        'twomass'
            source "${FIRETHORN_TEST:?}/03-01-import-jdbc-schema.sh" 'UKIDSSDR5PLUS.dbo'  'ukidssdr5'
            source "${FIRETHORN_TEST:?}/03-01-import-jdbc-schema.sh" 'ATLASv20130304.dbo' 'atlas'

            source "${FIRETHORN_TEST:?}/04-00-create-query-space.sh"
            source "${FIRETHORN_TEST:?}/04-01-create-query-schema.sh" 'query'
            source "${FIRETHORN_TEST:?}/04-02-import-query-schema.sh" 'atlas'   'atlas'
            source "${FIRETHORN_TEST:?}/04-02-import-query-schema.sh" 'twomass' 'twomass'

            source "${FIRETHORN_TEST:?}/04-01-create-query-schema.sh" 'ukidss'
            source "${FIRETHORN_TEST:?}/04-02-import-query-table.sh"  'ukidssdr5' 'gcsPointSource'        'ukidss' 'gcsPointSource5'
            source "${FIRETHORN_TEST:?}/04-02-import-query-table.sh"  'ukidssdr5' 'gcsSourceXtwomass_psc' 'ukidss' 'gcsSourceXtwomass_psc'

            time source "${FIRETHORN_TEST:?}/05-query-atlas.sh"

        popd

