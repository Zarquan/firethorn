
# ------------------------------------------------------------
# Install Java, Subversion, Mercurial, Ant and Maven

    # ------------------
    # Ubuntu 12

        apt-get -y update
        apt-get -y upgrade

        apt-get -y install subversion
        apt-get -y install mercurial

        apt-get -y install openjdk-6-jdk
        apt-get -y install maven2
        apt-get -y install ant

    # ------------------
    # Fedora 

        yum -y update

        yum -y install subversion
        yum -y install mercurial

        yum -y install java-1.7.0-openjdk
        yum -y install java-1.7.0-openjdk-devel
        yum -y install maven
        yum -y install ant

    # ------------------
    # RedHat EL

        yum -y update

        yum -y install subversion
        yum -y install mercurial

        yum -y install java-1.6.0-openjdk
        yum -y install java-1.6.0-openjdk-devel

        yum -y install ant

        # Manual install of Apache Maven.
        # http://maven.apache.org/download.html

        if [ ! -e '/var/local/toolkits' ]
        then
            mkdir '/var/local/toolkits'
        fi

        if [ ! -e '/var/local/toolkits/maven' ]
        then
            mkdir '/var/local/toolkits/maven'
            pushd '/var/local/toolkits/maven'

                if [ ! -e 'downloads' ]
                then 
                    mkdir 'downloads'
                fi
                pushd downloads

                    wget http://www.mirrorservice.org/sites/ftp.apache.org/maven/maven-3/3.0.4/binaries/apache-maven-3.0.4-bin.tar.gz

                popd

                tar xvf downloads/apache-maven-3.0.4-bin.tar.gz 
                ln -s apache-maven-3.0.4 current

            popd
        fi
            
        cat > /etc/profile.d/maven.sh << 'EOF'
        # /etc/profile.d/maven.sh
        #
        # Manual install of Apache Maven.
        # http://maven.apache.org/download.html
        export M2_HOME=${M2_HOME:-/var/local/toolkits/maven/current}
        export PATH=${M2_HOME}/bin:${PATH} 
        EOF

# ------------------------------------------------------------
# Login as test user

    su - Fabulous

# ------------------------------------------------------------
# Configuration settings.
#

cat > ${HOME?}/firethorn.settings << 'EOF'
FIRETHORN_BASE=${FIRETHORN_BASE:-${HOME?}/firethorn}
FIRETHORN_NAME=${FIRETHORN_NAME:-code}
FIRETHORN_CODE=${FIRETHORN_CODE:-${FIRETHORN_BASE?}/${FIRETHORN_NAME?}}
EOF

cat > ${HOME?}/ogsadai.settings << 'EOF'
OGSADAI_REV=${OGSADAI_REV:-HEAD}
OGSADAI_SVN=${OGSADAI_SVN:-http://svn.code.sf.net/p/ogsa-dai/code}
OGSADAI_BASE=${OGSADAI_BASE:-${HOME?}/ogsa-dai}
OGSADAI_NAME=${OGSADAI_NAME:-code}
OGSADAI_CODE=${OGSADAI_CODE:-${OGSADAI_BASE?}/${OGSADAI_NAME}}
EOF

# ------------------------------------------------------------
# Clone specific revision of the FireThorn source code.
#

    FIRETHORN_REV=481

    source "${HOME?}/firethorn.settings"

    if [ ! -e "$(dirname ${FIRETHORN_CODE?})" ]
    then
        mkdir --parents "$(dirname ${FIRETHORN_CODE?})"
    fi

    if [ ! -e "${FIRETHORN_CODE?}" ]
    then
        hg clone --rev "${FIRETHORN_REV?}" 'http://wfau.metagrid.co.uk/code/firethorn/' "${FIRETHORN_CODE?}"
    else
        pushd "${FIRETHORN_CODE?}"
            hg fetch
            hg update --rev "${FIRETHORN_REV?}"
        popd
    fi

    pushd "${FIRETHORN_CODE?}"
        hg summary
    popd

# ------------------------------------------------------------
# Build the OGSA-DAI binary release.
#

    #OGSADAI_REV=HEAD
    OGSADAI_REV=2182
    OGSADAI_REV=2184

    source "${HOME?}/ogsadai.settings"
    source "${FIRETHORN_CODE?}/firethorn-ogsadai/ogsadai/bin/ogsadai-build.sh"

    
# TTY #1 ------------------------------------------------------------
# Build and deploy the OGSA-DAI webapp. 
#

    source ${HOME?}/firethorn.settings

    #
    # Tweak the target OGSA-DAI version.
    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai"

        OGSADAI_VER=$(svn info "${OGSADAI_CODE?}/ogsa-dai/trunk" | sed -n 's/Revision: \([:digit:]*\)/\1/p')

        sed -i '
            /<properties>/,/<\/properties>/ {
                s#<ogsadai.version>.*</ogsadai.version>#<ogsadai.version>4.2.'${OGSADAI_VER?}'</ogsadai.version>#
                }
            ' pom.xml
    popd

    #
    # Build everything 
    pushd "${FIRETHORN_CODE?}"

        mvn clean install
        
    popd

    #
    # Deploy the modified OGSA-DAI webapp.
    pushd ${FIRETHORN_CODE?}/firethorn-ogsadai/webapp

        #
        # Create a clean build.
        mvn clean compile war:war

        #
        # Deploy the webapp in Tomcat.
        mvn tomcat6:run | tee /tmp/ogsadai-tomcat.log
        
    popd

# TTY #2 ------------------------------------------------------------
# Run JUnit test.
#

    source ${HOME?}/firethorn.settings
    pushd ${FIRETHORN_CODE?}/firethorn-ogsadai/activity/client
    
        mvn -D skipTests=false -D test=MockDqpQueryTestCase test

    popd

# ------------------------------------------------------------
# Results.
#

        #
        # Built with OGSADAI_REV=2182
        2013-03-26 16:41:24,146 DEBUG mock.TableMappingServiceMock [pool-1-thread-2,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [table21]
        2013-03-26 16:41:24,149 DEBUG mock.TableMappingServiceMock [pool-1-thread-2,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [table22]
        2013-03-26 16:41:24,149 DEBUG mock.TableMappingServiceMock [pool-1-thread-2,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [table21]
        2013-03-26 16:41:24,150 DEBUG mock.TableMappingServiceMock [pool-1-thread-2,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [gcsPointSource]
FAIL >> java.lang.RuntimeException: uk.org.ogsadai.dqp.lqp.exceptions.TableNotFoundException: Table not found gcsPointSource


        #
        # Built with OGSADAI_REV=2184
        2013-03-26 17:01:31,711 DEBUG mock.TableMappingServiceMock [pool-1-thread-3,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [table21]
        2013-03-26 17:01:31,712 DEBUG mock.TableMappingServiceMock [pool-1-thread-3,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [table22]
        2013-03-26 17:01:31,712 DEBUG mock.TableMappingServiceMock [pool-1-thread-3,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [table21]
PASS >> 2013-03-26 17:01:31,714 DEBUG mock.TableMappingServiceMock [pool-1-thread-3,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [table20]
        2013-03-26 17:01:31,714 DEBUG mock.AttributeServiceMock [pool-1-thread-3,get:104] get(String) [table20]
        2013-03-26 17:01:31,731 DEBUG partition.LocalPartition [pool-1-thread-3,debug:84] PipelineWorkflow {
        ....

        #
        # The query fails with a database login error, which is expected.
        #

