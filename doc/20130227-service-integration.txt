# ------------------------------------------------------------
# Project paths
#

FIRETHORN_BASE=${FIRETHORN_BASE:-/var/local/projects/edinburgh/wfau/firethorn}
FIRETHORN_NAME=devel
FIRETHORN_CODE=${FIRETHORN_BASE?}/${FIRETHORN_NAME?}

# ------------------------------------------------------------
# Build our metadata service components. 
#

    pushd "${FIRETHORN_CODE?}/firethorn-tap"

        mvn clean install
        
    popd

    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/metadata/common"

        mvn clean install
        
    popd

    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/metadata/server"

        mvn clean install
        
    popd

#
# Client tests need a live service.
#   pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/metadata/client"
#
#       mvn clean install
#        
#   popd

# ------------------------------------------------------------
# Build and run the firethorn webapp 
#

    pushd "${FIRETHORN_CODE?}/firethorn-war"

        #
        # Update the tap libraries.
        # pushd "${FIRETHORN_CODE?}/firethorn-tap" ; mvn clean install ; popd

        mvn clean tomcat7:run | tee /tmp/firethorn-tomcat.log
        
    popd



# ------------------------------------------------------------
# Initialise our test metadata 
#

    base=$(mktemp --directory)
    pushd ${base?}

        #
        # Install the 'resty' wrapper for curl.
        curl -# -L http://github.com/micha/resty/raw/master/resty > resty
        source resty

        #
        # Install the 'pp' pretty print script.
        curl -# -L http://github.com/micha/resty/raw/master/pp > pp
        chmod a+x pp

        #
        # Set the base URL and options.
        metahostname=localhost
        metahostport=8080
        metabasename="http://${metahostname?}:${metahostport?}/firethorn"
        
        #
        # Unique name generator 
        unique()
            {
            date '+%Y%m%d-%H%M%S%N'
            }

        #
        # Create a 'define' function for setting heredoc variables.
        # http://stackoverflow.com/questions/1167746/how-to-assign-a-heredoc-value-to-a-variable-in-bash
        define()
            {
            IFS='\n' read -r -d '' ${1} || true;
            }

        #
        # Initialise our REST client.
        resty "${metabasename?}" -H 'Accept: application/json'

        # -------- --------
        # JDBC ....

        #
        # Create our JDBC TWOMASS resource.
        POST "/jdbc/resource/create" \
            -d "jdbc.resource.create.url=spring:RoeTWOMASS" \
            -d "jdbc.resource.create.name=jdbc-twomass" \
            -d "jdbc.resource.create.ogsadai=twomass" \
            | ./pp

        #
        # Check the resouce properties.
        GET "/jdbc/resource/1" | ./pp

        #
        # Create our JDBC UKIDSS resource.
        POST "/jdbc/resource/create" \
            -d "jdbc.resource.create.url=spring:RoeUKIDSS" \
            -d "jdbc.resource.create.name=jdbc-ukidss" \
            -d "jdbc.resource.create.ogsadai=ukidss" \
            | ./pp

        #
        # Check the resouce properties.
        GET "/jdbc/resource/2" | ./pp

        #
        # List the JDBC TWOMASS schema.
        GET "/jdbc/resource/1/schemas/select" | ./pp

        #
        # List the JDBC UKIDSS schema.
        GET "/jdbc/resource/2/schemas/select" | ./pp

        #
        # List the JDBC TWOMASS tables.
        GET "/jdbc/schema/1/tables/select" | ./pp

        #
        # List the JDBC UKIDSS tables.
        GET "/jdbc/schema/2/tables/select" | ./pp

        #
        # Get the details for the twomass_psc table.
        # http://localhost:8080/firethorn/jdbc/table/5
        GET "/jdbc/schema/1/tables/select" \
            -q "jdbc.schema.table.select.name=twomass_psc" \
            | ./pp

        #
        # Get the details for the gcsPointSource table.
        # http://localhost:8080/firethorn/jdbc/table/120
        GET "/jdbc/schema/2/tables/select" \
            -q "jdbc.schema.table.select.name=gcsPointSource" \
            | ./pp

        #
        # Get the details for the gcsSourceXtwomass_psc table.
        # http://localhost:8080/firethorn/jdbc/table/41
        GET "/jdbc/schema/2/tables/select" \
            -q "jdbc.schema.table.select.name=gcsSourceXtwomass_psc" \
            | ./pp

        #
        # Get the details for the twomass_psc ra column.
        GET "/jdbc/table/5/columns/select" \
            -q "jdbc.table.column.select.name=ra" \
            | ./pp

        #
        # Get the details for the gcsPointSource ra column.
        GET "/jdbc/table/120/columns/select" \
            -q "jdbc.table.column.select.name=ra" \
            | ./pp

        # -------- --------
        # ADQL ....

        #
        # Create a new ADQL resource.
        POST "/adql/resource/create" \
            --data "adql.resource.create.name=adql-workspace" \
            | ./pp

        #
        # Create a new ADQL schema.
        POST "/adql/resource/3/schemas/create" \
            --data "adql.resource.schema.create.name=adql_schema" \
            | ./pp

        #
        # Import the twomass table into the ADQL schema.
        # http://localhost:8080/firethorn/adql/table/140
        POST "/adql/schema/3/tables/import" \
            --data "adql.schema.table.import.base=${metabasename?}/jdbc/table/5" \
            | ./pp

        #
        # Import the ukidss tables into the ADQL schema.
        # http://localhost:8080/firethorn/adql/table/141
        POST "/adql/schema/3/tables/import" \
            --data "adql.schema.table.import.base=${metabasename?}/jdbc/table/41" \
            | ./pp

        # http://localhost:8080/firethorn/adql/table/142
        POST "/adql/schema/3/tables/import" \
            --data "adql.schema.table.import.base=${metabasename?}/jdbc/table/120" \
            | ./pp

        #
        # Check the ADQL tables.
        GET "/adql/schema/3/tables/select" | ./pp

        #
        # Check the table mapping service.
        GET "/meta/table/JDBC_5" | ./pp

        #
        # Get the attribute list for the twomass table.
        GET "/meta/table/JDBC_5/columns"   | ./pp

        #
        # Get a named attribute for the twomass table.
        GET "/meta/table/JDBC_5/column/ra" | ./pp

        #
        # Get the attribute list for the ukidss table(s).
        GET "/meta/table/JDBC_141/columns"   | ./pp

        GET "/meta/table/JDBC_142/columns"   | ./pp

#
# Create our ADQL query.

define query << 'EOF'

    SELECT
        twomass.ra AS tmra,
        ukidss.ra  AS ukra,
        (twomass.ra - ukidss.ra) AS difra,
        twomass.dec AS tmdec,
        ukidss.dec  AS ukdec,
        (twomass.ra - ukidss.ra) AS difdec,
        neighbour.distanceMins AS dist
    FROM
        adql_schema.twomass_psc AS twomass,
        adql_schema.gcsPointSource AS ukidss,
        adql_schema.gcsSourceXtwomass_psc AS neighbour
    WHERE
        twomass.ra  >= '55.0'
    AND
        twomass.ra  <= '55.9'
    AND
        twomass.dec >= '20.0'
    AND
        twomass.dec <= '22.9'
    AND
        ukidss.ra  >= '55.0'
    AND
        ukidss.ra  <= '55.9'
    AND
        ukidss.dec >= '20.0'
    AND
        ukidss.dec <= '22.9'
    AND
        neighbour.masterObjID = ukidss.sourceID
    AND
        neighbour.slaveObjID = twomass.pts_key
    AND
        neighbour.distanceMins < 1E-3
EOF

        #
        # Create the ADQL query.
        POST "/adql/resource/3/queries/create" \
            --data-urlencode "adql.resource.query.create.name=test-query" \
            --data-urlencode "adql.resource.query.create.query=${query?}" \
            | ./pp



# ------------------------------------------------------------
# Build our OGSA-DAI activity components.
#

    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/activity/common"

        mvn clean install
        
    popd

    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/activity/server"

        mvn clean install
        
    popd

#
# Client tests need a live service. 
#   pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/activity/client"
#
#       mvn clean install
#        
#   popd


#---------------------------------------------------
# Deploy the ogsadai webapp in Tomcat ...
#
    #
    # Shell script function to configure the JDBC resources.
    dbconfg()
        {
        local dbname=${1?}
        local dbconf=${2?}

        local dbtype="$(sed -n 's/^type=\(.*\)/\1/p' ${dbconf?})"
        local dbdata="$(sed -n 's/^name=\(.*\)/\1/p' ${dbconf?})"
        local dbuser="$(sed -n 's/^user=\(.*\)/\1/p' ${dbconf?})"
        local dbpass="$(sed -n 's/^pass=\(.*\)/\1/p' ${dbconf?})"

        local dbdrv
        local dburi

        case ${dbtype?} in

            pgsql)
                echo "Postgresql database"
                dbdrv=org.postgresql.Driver
                dburi=jdbc:postgresql://localhost:5432
                ;;

            mssql)
                echo "SQLServer database"
                dbdrv=net.sourceforge.jtds.jdbc.Driver
                dburi=jdbc:jtds:sqlserver://localhost:1433
                ;;

            *)  echo "ERROR : unknown database type [${dbtype}]"
                ;;
        esac

        #
        # Set the database driver and url.
        sed -i '
            s|^dai.driver.class=.*|dai.driver.class='${dbdrv}'|
            s|^dai.data.resource.uri=.*|dai.data.resource.uri='${dburi}/${dbdata?}'|
            ' "target/ogsadai-webapp-1.0-SNAPSHOT/WEB-INF/etc/dai/resources/${dbname?}"

        #
        # Set the database password.
        sed -i '
            /^id='${dbname?}'/,/^END/ {
                s|^username=.*|username='${dbuser?}'|
                s|^password=.*|password='${dbpass?}'|
                }
            ' "target/ogsadai-webapp-1.0-SNAPSHOT/WEB-INF/etc/dai/logins.txt"
        }


    #
    # Update the metadata client.
    pushd "${FIRETHORN_CODE?}/firethorn-ogsadai/metadata/client"
        mvn clean install
    popd

    #
    # Deply the OGSA-DAI webapp.
    pushd ${FIRETHORN_CODE?}/firethorn-ogsadai/webapp

        #
        # Create a clean war file.
        mvn clean compile war:war

        #
        # Set the database passwords.
        dbconfg twomass /etc/firethorn/livetwomass.conf
        dbconfg ukidss  /etc/firethorn/liveukidss.conf
        dbconfg uber    /etc/firethorn/livetwoxmm.conf

        #
        # Run the webapp in Tomcat
        mvn tomcat6:run | tee /tmp/ogsadai-tomcat.log

        
    popd

#---------------------------------------------------
# Run the ogsadai client test ...
#

    pushd ${FIRETHORN_CODE?}/firethorn-ogsadai/activity/client/

        mvn -D test=TestDqpQueryTestCase clean test
        
    popd


#
#   WORKS :-D
#

 
