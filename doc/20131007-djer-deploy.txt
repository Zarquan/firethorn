#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2013, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# ------------------------------------------------
# Separate live and test deployment settings.
#[user@desktop]



    #
    # Edit local copy of live machines.
    source "${HOME:?}/firethorn.properties"
    cp "${FIRETHORN_CODE:?}/conf/base.machines" \
       "${HOME:?}/firethorn/live.machines"
    gedit "${HOME:?}/firethorn/live.machines" &

    #
    # Edit local copy of test machines
    source "${HOME:?}/firethorn.properties"
    cp "${FIRETHORN_CODE:?}/conf/base.machines" \
       "${HOME:?}/firethorn/test.machines"
    gedit "${HOME:?}/firethorn/test.machines" &

    #
    # Create local test properties.
    source "${HOME:?}/firethorn/test.machines"
    sed '

        /^firethorn.webapp.endpoint/ {
            s/#host#/'${firehost:?}'/
            s/#port#/8080/
            s/#path#/firethorn/
            }

        /^firethorn.ogsadai.endpoint/ {
            s/#host#/'${ogsahost:?}'/
            s/#port#/8080/
            s/#path#/ogsa-dai\/services/
            }

        ' "${FIRETHORN_CODE:?}/conf/base.properties" \
        > "${HOME:?}/firethorn/test.properties"

    #
    # Edit local test properties.
    gedit "${HOME:?}/firethorn/test.properties" &

    #
    # Create local live properties.
    source "${HOME:?}/firethorn/live.machines"
    sed '

        /^firethorn.webapp.endpoint/ {
            s/#host#/'${firehost:?}'/
            s/#port#/8080/
            s/#path#/firethorn/
            }

        /^firethorn.ogsadai.endpoint/ {
            s/#host#/'${ogsahost:?}'/
            s/#port#/8080/
            s/#path#/ogsa-dai\/services/
            }

        ' "${FIRETHORN_CODE:?}/conf/base.properties" \
        > "${HOME:?}/firethorn/live.properties"

    #
    # Edit local live properties.
    gedit "${HOME:?}/firethorn/live.properties" &
    
# ------------------------------------------------
# Create a new database.
#[user@desktop]

    source "${HOME:?}/firethorn/test.machines"
    ssh "${sqluser:?}@${sqlhost:?}"

        #
        # Set the new database properties.
        dbversion=Djer0107alpha06
        metadataname="FirethornMetadata${dbversion:?}"
        userdataname="FirethornUserdata${dbversion:?}"

        #
        # Function to fill in the template values.
        sqlsed()
            {
            sed '
                s|{databasename}|'"${databasename}"'|g
                s|{databasepath}|'"${databasepath}"'|g
                s|{databaseuser}|'"${databaseuser}"'|g
                s|{databasepass}|'"${databasepass}"'|g
                s|{databaselogin}|'"${databaselogin}"'|g
                ' "${1:?}"
            }

        source "${HOME:?}/sqlserver.properties"
        source "${HOME:?}/firethorn.settings"
        pushd "${FIRETHORN_CODE:?}"    
            pushd 'firethorn-sqlserver/src/sql'

                #
                # Set the template values
                databasehost="${devhost:?}"
                databaseport="1433"
                databasename="${metadataname:?}"
                databasepath='C:\\Program Files\\Microsoft SQL Server\\MSSQL10.MSSQLSERVER\\MSSQL\\DATA'
                databaseuser="${databasename:?}User"
                databaselogin="${databasename:?}Login"
                databasepass="${databasename:?}$(pwgen -s 8 1)"

                databasefile="${HOME:?}/firethorn-$(date +%Y%m%d%H%M%S).properties"
                cat >> "${databasefile:?}" << EOF
#
# Metadata database
firethorn.meta.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.meta.user=${databaselogin:?}
firethorn.meta.pass=${databasepass:?}
EOF

                #
                # Create our new metadata database.
                sqlsed 'create-database.sql' | sqsh -S "${devhost:?}" -U "${devuser:?}" -P "${devpass:?}" -D "${devdata:?}"
                sqlsed 'create-login.sql'    | sqsh -S "${devhost:?}" -U "${devuser:?}" -P "${devpass:?}" -D "${devdata:?}"
                sqlsed 'create-user.sql'     | sqsh -S "${devhost:?}" -U "${devuser:?}" -P "${devpass:?}" -D "${devdata:?}"

                #
                # Set the template values
                databasehost="${devhost:?}"
                databaseport="1433"
                databasename="${userdataname:?}"
                databasepath='C:\\Program Files\\Microsoft SQL Server\\MSSQL10.MSSQLSERVER\\MSSQL\\DATA'
                databaseuser="${databasename:?}User"
                databaselogin="${databasename:?}Login"
                databasepass="${databasename:?}$(pwgen -s 8 1)"

                cat >> "${databasefile:?}" << EOF
#
# Userdata database
firethorn.user.url=jdbc:jtds:sqlserver://${databasehost:?}:${databaseport:?}/${databasename:?}
firethorn.user.user=${databaselogin:?}
firethorn.user.pass=${databasepass:?}
EOF

                #
                # Create our userdata database (including empty table).
                sqlsed 'create-database.sql'   | sqsh -S "${devhost:?}" -U "${devuser:?}" -P "${devpass:?}" -D "${devdata:?}"
                sqlsed 'create-login.sql'      | sqsh -S "${devhost:?}" -U "${devuser:?}" -P "${devpass:?}" -D "${devdata:?}"
                sqlsed 'create-user.sql'       | sqsh -S "${devhost:?}" -U "${devuser:?}" -P "${devpass:?}" -D "${devdata:?}"
                sqlsed 'create-emptytable.sql' | sqsh -S "${devhost:?}" -U "${devuser:?}" -P "${devpass:?}" -D "${devdata:?}"

echo "Config [${databasefile:?}]"
cat  "${databasefile:?}"

            popd
        popd
    exit

# ------------------------------------------------
# Add the usernames and passwords to the service properties.
#[user@desktop]


    gedit "${HOME:?}/firethorn/live.properties" &
        ....
        
    gedit "${HOME:?}/firethorn/test.properties" &
        ....

# ------------------------------------------------
# Deploy the service properties.
# TODO filename "live.properties" is buried.
#[user@desktop]

    source "${HOME:?}/firethorn/live.machines"

    for vmname in "${vmlist[@]:?}"
    do
        echo "---------"
        echo "VM [${vmname:?}]"
        ssh "${vmname:?}" 'cp -f "firethorn.properties" "firethorn.properties-$(date +%Y%m%d%H%M%S)"'
        scp "${HOME:?}/firethorn/live.properties" "${vmname:?}:firethorn.properties"
    done

#----------------------------------------------------
# Deploy FireThorn webapp.
#[user@desktop]

    #
    # SSH login to tail the Tomcat log.
    # including port 8080 tunnel (-L) and SOCKS proxy (-D).
    source "${HOME:?}/firethorn/live.machines"
    ssh -L "${fireproxy:?}:localhost:8080" -D "${firesocks:?}" "${firelogin:?}"
        tail -f "${HOME:?}/tomcat/logs/catalina.out"

    #
    # SSH login to deploy the webapp
    source "${HOME:?}/firethorn/live.machines"
    ssh "${firelogin:?}"

        webappversion=01.07-alpha-06
        webappproject=firethorn-webapp
        webapppath=${HOME}/webapps
        webappfile=${webappproject:?}-${webappversion:?}.war

        #
        # Download the webapp war file.
        downloadhost="data.metagrid.co.uk"
        downloadrepo="http://${downloadhost:?}/wfau/maven/firethorn"
        downloadfile="uk/ac/roe/wfau/${webappproject:?}/${webappversion:?}/${webappfile:?}"
        downloadurl="${downloadrepo:?}/${downloadfile:?}"

        if [ ! -e "${webapppath:?}" ]
        then
            mkdir "${webapppath:?}"
        fi
        pushd "${webapppath:?}"

            if [ -e "${webappfile}" ]
            then
                rm "${webappfile}"
            fi            
            if [ -e "${webappname}" ]
            then
                rm -r "${webappname}"
            fi            

            wget "${downloadurl:?}"

        popd

        #
        # Deploy the webapp.
        contextpath=firethorn
        managername=$(sed -n 's/^firethorn.tomcat.manager.name=\(.*\)$/\1/p' "${HOME}/firethorn.properties")
        managerpass=$(sed -n 's/^firethorn.tomcat.manager.pass=\(.*\)$/\1/p' "${HOME}/firethorn.properties")

        wget -q -O - \
            --user=${managername:?} \
            --password=${managerpass:?} \
            "http://localhost:8080/manager/text/deploy?update=true&path=/${contextpath:?}&war=file:${webapppath:?}/${webappfile:?}"

    exit

#----------------------------------------------------
# Run the Java monitor
#[user@desktop]

    TODO

#----------------------------------------------------
# Deploy OGSADAI webapp.
#[user@desktop]

    TODO


#----------------------------------------------------
# Configure the test/control VM.
#[user@desktop]

    source "${HOME:?}/firethorn/live.machines"
    ssh "root@${testhost:?}" 

        apt-get -y install curl
        apt-get -y install perl
        apt-get -y install pwgen
        apt-get -y install libjson-perl

        apt-get -y install maven
        apt-get -y install mercurial

    exit

# ------------------------------------------------
# Update the source code on testvm.
#[user@desktop]

    source "${HOME:?}/firethorn/live.machines"
    ssh "${testuser}@${testhost:?}" 

        if [ ! -e "${HOME:?}/firethorn.settings" ]
        then
            cat >  "${HOME:?}/firethorn.settings" << 'EOF'
FIRETHORN_BASE=${FIRETHORN_BASE:-${HOME}/firethorn}
FIRETHORN_CODE=${FIRETHORN_CODE:-${FIRETHORN_BASE:?}/clone}
export MAVEN_OPTS=-Xmx128m
EOF
        fi

        source "${HOME:?}/firethorn.settings"

        codepath="$(dirname  ${FIRETHORN_CODE:?})"
        codename="$(basename ${FIRETHORN_CODE:?})"
        coderepo='http://wfau.metagrid.co.uk/code/firethorn/'

        if [ ! -e "${codepath:?}" ]
        then
            mkdir "${codepath:?}"
        fi
        pushd "${codepath:?}"
            if [ ! -e "${codename:?}" ]
            then
                 hg clone "${coderepo:?}" "${codename:?}"
            else
                pushd "${codename:?}"
                    hg pull
                    hg update
                popd
            fi
        popd
    exit
    
# ------------------------------------------------
# Initialise the metadata.
#[user@desktop]

    source "${HOME:?}/firethorn/live.machines"
    ssh "${testuser}@${testhost:?}" 

        source "${HOME:?}/firethorn.settings"
        FIRETHORN_TEST=${FIRETHORN_CODE:?}/integration/004
        FIRETHORN_META=${FIRETHORN_CODE:?}/metadata/20130902-metadocs

        pushd $(mktemp --directory)

            identity=$(pwgen 16 1)
            community=$(date '+%A')

            source "${FIRETHORN_TEST:?}/01-01-init-rest.sh"

            source "${FIRETHORN_TEST:?}/02-01-create-jdbc-space.sh" 'Atlas JDBC conection' 'spring:RoeATLAS'  '*' 'atlas'

            source "${FIRETHORN_TEST:?}/03-01-create-adql-space.sh" 'Atlas ADQL workspace'

            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'ATLASv20130304' 'dbo' "${FIRETHORN_META:?}/ATLASv20130304_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'ATLASv20130426' 'dbo' "${FIRETHORN_META:?}/ATLASv20130426_TablesSchema.xml"

#BUG - REST calls don't return anything

            cat > "${HOME:?}/firethorn.spaces.$(date +%Y%m%d%H%M%S)" << EOF
jdbcspace=${jdbcspace:?}
adqlspace=${adqlspace:?}
atlashome=${adqlschema:?}
EOF

            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'BESTDR5'        'dbo' "${FIRETHORN_META:?}/BESTDR5_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'BESTDR7'        'dbo' "${FIRETHORN_META:?}/BESTDR7_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'BESTDR8'        'dbo' "${FIRETHORN_META:?}/BESTDR8_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'BESTDR9'        'dbo' "${FIRETHORN_META:?}/BESTDR9_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'DENIS'          'dbo' "${FIRETHORN_META:?}/DENIS_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'FIRST'          'dbo' "${FIRETHORN_META:?}/FIRST_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'GLIMPSE'        'dbo' "${FIRETHORN_META:?}/GLIMPSE_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'IRAS'           'dbo' "${FIRETHORN_META:?}/IRAS_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'MGC'            'dbo' "${FIRETHORN_META:?}/MGC_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'ROSAT'          'dbo' "${FIRETHORN_META:?}/ROSAT_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'SEGUEDR6'       'dbo' "${FIRETHORN_META:?}/SEGUEDR6_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'SSA'            'dbo' "${FIRETHORN_META:?}/SSA_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'Stripe82'       'dbo' "${FIRETHORN_META:?}/Stripe82_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'TWOMASS'        'dbo' "${FIRETHORN_META:?}/TWOMASS_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'VHSDR1'         'dbo' "${FIRETHORN_META:?}/VHSDR1_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'VIKINGDR2'      'dbo' "${FIRETHORN_META:?}/VIKINGDR2_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'WISE'           'dbo' "${FIRETHORN_META:?}/WISE_TablesSchema.xml"
            source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'TWOXMM'         'dbo' "${FIRETHORN_META:?}/XMM_TablesSchema.xml"

            #
            # Not available yet.
            #source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'F287'           'dbo' "${FIRETHORN_META:?}/F287_TablesSchema.xml"
            #source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'GalexGR6'       'dbo' "${FIRETHORN_META:?}/GalexGR6_TablesSchema.xml"
            #source "${FIRETHORN_TEST:?}/03-03-import-jdbc-metadoc.sh" 'NVSS'           'dbo' "${FIRETHORN_META:?}/NVSS_TablesSchema.xml"

        popd
    exit

# ------------------------------------------------
# Configure OGSA-DAI service.
#[user@desktop]


    #
    # SSH login to tail the Tomcat log,
    source "${HOME:?}/firethorn/live.machines"
    ssh "${ogsauser}@${ogsahost:?}"
        tail -f "${HOME:?}/tomcat/logs/catalina.out"

    #
    # SSH login to deploy the webapp
    source "${HOME:?}/firethorn/live.machines"
    ssh "${ogsauser}@${ogsahost:?}" 

        webappversion=01.07-alpha-06
        webappproject=firethorn-ogsadai-webapp
        webapppath=${HOME}/webapps
        webappfile=${webappproject:?}-${webappversion:?}.war

        #
        # Download the webapp war file.
        downloadhost="data.metagrid.co.uk"
        downloadrepo="http://${downloadhost:?}/wfau/maven/firethorn"
        downloadfile="uk/ac/roe/wfau/${webappproject:?}/${webappversion:?}/${webappfile:?}"
        downloadurl="${downloadrepo:?}/${downloadfile:?}"

        if [ ! -e "${webapppath:?}" ]
        then
            mkdir "${webapppath:?}"
        fi
        pushd "${webapppath:?}"

            if [ -e "${webappfile}" ]
            then
                rm "${webappfile}"
            fi            
            if [ -e "${webappname}" ]
            then
                rm -r "${webappname}"
            fi            

            wget "${downloadurl:?}"

        popd

        #
        # Deploy the webapp.
        contextpath=ogsa-dai
        managername=$(sed -n 's/^firethorn.tomcat.manager.name=\(.*\)$/\1/p' "${HOME}/firethorn.properties")
        managerpass=$(sed -n 's/^firethorn.tomcat.manager.pass=\(.*\)$/\1/p' "${HOME}/firethorn.properties")

        wget -q -O - \
            --user=${managername:?} \
            --password=${managerpass:?} \
            "http://localhost:8080/manager/deploy?update=true&path=/${contextpath:?}&war=file:${webapppath:?}/${webappfile:?}"

        #
        # Install config tools
        if [ ! -e "${HOME}/bin" ]
        then
            mkdir "${HOME}/bin"
        fi
        pushd "${HOME}/bin"
            if [ ! -e 'jdbc-functions.sh' ]
            then
                wget 'http://wfau.metagrid.co.uk/code/firethorn/raw-file/tip/firethorn-ogsadai/webapp/src/test/bin/jdbc-functions.sh'
            fi
        popd
        source "${HOME:?}/bin/jdbc-functions.sh"

        #
        # Configure the webapp
        pushd "${HOME:?}/tomcat/webapps/${contextpath:?}/WEB-INF"

            jdbcconfig atlas    firethorn.atlas
            jdbcconfig wfau     firethorn.wfau
            jdbcconfig userdata firethorn.user

        popd

# BUGS
# localhost in metadata and userdata urls
# firethon in old config


# ------------------------------------------------
# Configure Python service.
# need to be member of group 'users'
#[user@desktop]

    source "${HOME:?}/firethorn/live.machines"
    ssh "${wepyuser}@${wepyhost:?}" 

        vi /var/www/osa/firethorn.ini

            adqlspace=http://coccinea:8080/firethorn/adql/resource/32770
            atlasschema=http://coccinea:8080/firethorn/adql/schema/163889
            firethorn_base=http://coccinea:8080/firethorn


# ------------------------------------------------
# TODO

# Configure tomcat manager
# Configure tomcat setenv

























