#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2013, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# ------------------------------------------------
# Install sqsh using notes (20130715-sqsh-install.txt)

# ------------------------------------------------
# Update the source code.
#[sqsh@tau]

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"    

        hg pull
        hg update 

    popd

# ------------------------------------------------
# Connect the SSH tunnel to ROE.
#[sqsh@tau]

    username=xxxx
    hostname=fenrir.roe.ac.uk
    
    ssh-keyscan ${hostname:?} >> ~/.ssh/known_hosts
    ssh -L '*:1435:ramses5:1433' -L '*:1439:ramses9:1433' "${username:?}@${hostname:?}"


# ------------------------------------------------
# Create our metadata and userdata databases.
#[sqsh@tau]

    servername=master
    serverlogin=xxxx
    serverpass=xxxx

    dbversion=Djer0722
    metadataname="FirethornMetadata${dbversion:?}"
    userdataname="FirethornUserdata${dbversion:?}"

    #
    # Function to fill in the template values.
    sqlsed()
        {
        sed '
            s|{databasename}|'"${databasename}"'|g
            s|{databasepath}|'"${databasepath}"'|g
            s|{databaseuser}|'"${databaseuser}"'|g
            s|{databasepass}|'"${databasepass}"'|g
            s|{databaselogin}|'"${databaselogin}"'|g
            ' "${1:?}"
        }

    source "${HOME:?}/firethorn.settings"
    pushd "${FIRETHORN_CODE:?}"    

        pushd 'firethorn-sqlserver/src/sql'

            #
            # Set the template values
            databasename="${metadataname:?}"
            databasepath='C:\\Program Files\\Microsoft SQL Server\\MSSQL10.MSSQLSERVER\\MSSQL\\DATA'
            databaseuser="${databasename:?}User"
            databaselogin="${databasename:?}Login"
            databasepass="${databasename:?}$(pwgen -s 8 1)"

            echo "databasename  [${databasename}]"
            echo "databaseuser  [${databaseuser}]"
            echo "databaselogin [${databaselogin}]"
            echo "databasepass  [${databasepass}]"

            #
            # Create our new metadata database.
            sqlsed 'create-database.sql' | sqsh -S ramses9 -U "${serverlogin}" -P "${serverpass}" -D "${servername}"
            sqlsed 'create-login.sql'    | sqsh -S ramses9 -U "${serverlogin}" -P "${serverpass}" -D "${servername}"
            sqlsed 'create-user.sql'     | sqsh -S ramses9 -U "${serverlogin}" -P "${serverpass}" -D "${servername}"

            #
            # Set the template values
            databasename="${userdataname:?}"
            databasepath='C:\\Program Files\\Microsoft SQL Server\\MSSQL10.MSSQLSERVER\\MSSQL\\DATA'
            databaseuser="${databasename:?}User"
            databaselogin="${databasename:?}Login"
            databasepass="${databasename:?}$(pwgen -s 8 1)"

            echo "databasename  [${databasename}]"
            echo "databaseuser  [${databaseuser}]"
            echo "databaselogin [${databaselogin}]"
            echo "databasepass  [${databasepass}]"

            #
            # Create our userdata database.
            sqlsed 'create-database.sql' | sqsh -S ramses9 -U "${serverlogin}" -P "${serverpass}" -D "${servername}"
            sqlsed 'create-login.sql'    | sqsh -S ramses9 -U "${serverlogin}" -P "${serverpass}" -D "${servername}"
            sqlsed 'create-user.sql'     | sqsh -S ramses9 -U "${serverlogin}" -P "${serverpass}" -D "${servername}"

        popd
    popd

# ------------------------------------------------
# Update the deployment settings.
#[user@desktop]

    #
    # Set the usernames and hostnames
    cat >  "${HOME:?}/deployment/deploy.logins" << 'EOF'

vmuser=firethorn
vmlist=(coccinea pyracantha malus pyrus)

firehost=coccinea
fireuser=${fireuser:-${vmuser}}
firelogin=${fireuser}@${firehost}

ogsahost=pyracantha
ogsauser=${ogsauser:-${vmuser}}
ogsalogin=${ogsauser}@${ogsahost}

testhost=pyrus
testuser=${testuser:-${vmuser}}
testlogin=${testuser}@${testhost}

EOF

#
# Edit our config properties.
#[user@desktop]

    gedit ${HOME:?}/deployment/deploy.properties &

        firethon.webapp.endpoint=http://coccinea:8080/firethorn

        firethon.ogsadai.dqp=testdqp
        firethon.ogsadai.store=userdata
        firethon.ogsadai.endpoint=http://pyracantha:8080/ogsa-dai/services

        firethorn.meta.url=jdbc:jtds:sqlserver://ramses9:1433/FirethornMetadata011
        firethorn.meta.user=xxxx-xxxx
        firethorn.meta.pass=xxxx-xxxx
        firethorn.meta.type=mssql
        firethorn.meta.driver=net.sourceforge.jtds.jdbc.Driver
        firethorn.meta.c3po.max.size=20
        firethorn.meta.c3po.min.size=5
        firethorn.meta.c3po.max.idle=1800

        firethorn.user.url=jdbc:jtds:sqlserver://ramses9:1433/FirethornUserdata011
        firethorn.user.user=xxxx-xxxx
        firethorn.user.pass=xxxx-xxxx
        firethorn.user.type=mssql
        firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver
        firethorn.user.c3po.max.size=20
        firethorn.user.c3po.min.size=5
        firethorn.user.c3po.max.idle=1800

        firethorn.wfau.url=jdbc:jtds:sqlserver://ramses5:1433/WFAU
        firethorn.wfau.user=xxxx-xxxx
        firethorn.wfau.pass=xxxx-xxxx
        firethorn.wfau.type=mssql
        firethorn.wfau.driver=net.sourceforge.jtds.jdbc.Driver

        firethorn.atlas.url=jdbc:jtds:sqlserver://ramses5:1433/ATLASv20130304
        firethorn.atlas.user=xxxx-xxxx
        firethorn.atlas.pass=xxxx-xxxx
        firethorn.atlas.type=mssql
        firethorn.atlas.driver=net.sourceforge.jtds.jdbc.Driver

#
# Deply our config properties.
#[user@desktop]

    source "${HOME:?}/deployment/deploy.logins"
    for vmname in ${vmlist[@]:?}
    do
        echo "vmname [${vmname:?}]"
        scp "${HOME:?}/deployment/deploy.properties" "${vmuser:?}@${vmname:?}:firethorn.properties"
    done

#----------------------------------------------------
# Firethon Tomcat
#

#
# Watch tomcat logs.
# Includes tunneled connection to port 8080 ..
#[user@desktop]

    source "${HOME:?}/deployment/deploy.logins"
    ssh -L 8088:localhost:8080 "${firelogin:?}"

        tail -f "${HOME}/tomcat/logs/catalina.out"

#
# Deploy firethorn webapp ...
# Firethorn works for any method - no need to edit the war file contents.
# Use our own webapps directory and add a pointer in context file.
#[user@desktop]

    source "${HOME:?}/deployment/deploy.logins"
    ssh "${firelogin:?}" 

        webappver=01.06-SNAPSHOT
        webappproj=firethorn-webapp
        webappname=${webappproj:?}-${webappver:?}
        webapppath=${HOME}/webapps
        webappfile=${webappname:?}.war

        downloadurl="http://data.metagrid.co.uk/wfau/maven/firethorn/uk/ac/roe/wfau/${webappproj:?}/${webappver:?}/${webappfile:?}"

        contextname=firethorn
        contextpath=${HOME}/tomcat/conf/Catalina/localhost
        contextfile=${contextname:?}.xml

        #
        # Undeploy context.
        pushd "${contextpath:?}"
            if [ -e "${contextfile:?}" ]
            then
                rm "${contextfile:?}"
            fi
        popd

        #
        # Install webapp.
        if [ ! -e "${webapppath:?}" ]
        then
            mkdir "${webapppath:?}"
        fi
        pushd "${webapppath:?}"

            #
            # Tidy up
            if [ -e "${webappfile}" ]
            then
                rm "${webappfile}"
            fi            
            if [ -e "${webappname}" ]
            then
                rm -r "${webappname}"
            fi            

            #
            # Download
            wget "${downloadurl:?}"

        popd

        #
        # Deploy context.
        pushd "${contextpath:?}"
            cat > "${contextfile:?}" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<Context path="/${contextname:?}" 
    docBase="${webapppath:?}/${webappfile:?}" 
    />
EOF
        popd

#
# Test with local browser ..
#[user@desktop]

    firefox 'http://localhost:8088/manager/' &
    firefox 'http://localhost:8088/firethorn/' &

#----------------------------------------------------
# OGSA-DAI Tomcat
#

#
# Watch tomcat logs.
# Includes tunneled connection to port 8080 ..
#[user@desktop]

    source "${HOME:?}/deployment/deploy.logins"
    ssh -L 8089:localhost:8080 "${ogsalogin:?}"

        tail -f "${HOME}/tomcat/logs/catalina.out"

#
# Deploy ogsadai webapp ...
# OGSA-DAI install needs to edit files inside the webapp.
# Use our own webapps directory and add a pointer in context file.
#[user@desktop]

    source "${HOME:?}/deployment/deploy.logins"
    ssh "${ogsalogin:?}" 

        webappver=01.06-SNAPSHOT
        webappproj=firethorn-ogsadai-webapp
        webappname=${webappproj:?}-${webappver:?}
        webapppath=${HOME}/webapps
        webappfile=${webappname:?}.war

        downloadurl="http://data.metagrid.co.uk/wfau/maven/firethorn/uk/ac/roe/wfau/${webappproj:?}/${webappver:?}/${webappfile:?}"

        contextname=ogsa-dai
        contextpath=${HOME}/tomcat/conf/Catalina/localhost
        contextfile=${contextname:?}.xml

        #
        # Undeploy context.
        pushd "${contextpath:?}"
            if [ -e "${contextfile:?}" ]
            then
                rm "${contextfile:?}"
            fi
        popd

        #
        # Install config tools
        if [ ! -e "${HOME}/bin" ]
        then
            mkdir "${HOME}/bin"
        fi
        pushd "${HOME}/bin"
            if [ ! -e 'jdbc-functions.sh' ]
            then
                wget 'http://wfau.metagrid.co.uk/code/firethorn/raw-file/tip/firethorn-ogsadai/webapp/src/test/bin/jdbc-functions.sh'
            fi
        popd

        #
        # Install webapp.
        if [ ! -e "${webapppath:?}" ]
        then
            mkdir "${webapppath:?}"
        fi
        pushd "${webapppath:?}"

            #
            # Tidy up
            if [ -e "${webappfile}" ]
            then
                rm "${webappfile}"
            fi            
            if [ -e "${webappname}" ]
            then
                rm -r "${webappname}"
            fi            

            #
            # Download
            wget "${downloadurl:?}"

            #
            # Unpack
            unzip -d "${webappname:?}" "${webappname:?}.war"

            #
            # Configure
            pushd "${webappname}/WEB-INF"
            
                source 'jdbc-functions.sh'
                jdbcconfig atlas    firethorn.atlas
                jdbcconfig wfau     firethorn.wfau
                jdbcconfig userdata firethorn.user

            popd
        popd

        #
        # Deploy context.
        pushd "${contextpath:?}"
            cat > "${contextfile:?}" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<Context path="/${contextname:?}" 
    docBase="${webapppath:?}/${webappname:?}" 
    />
EOF
        popd
        
#
# Test with browser ..
#[user@desktop]

    firefox 'http://localhost:8089/manager/'  &
    firefox 'http://localhost:8089/ogsa-dai/' &

#----------------------------------------------------
# Run the test scripts
#

#
# Install test tools.
#[user@desktop]


    source "${HOME:?}/deployment/deploy.logins"
    ssh "root@${testhost:?}" 

        apt-get -y install curl
        apt-get -y install perl
        apt-get -y install libjson-perl

        exit

#
# Install maven ......


#
# Run the OGSA-DAI login fix.
#[user@desktop]

    source "${HOME:?}/deployment/deploy.logins"
    ssh -L 8088:localhost:8080 "${testlogin:?}"

        #
        # Update the local copy of the source code

        source "${HOME:?}/firethorn.settings"

        codepath="$(dirname  ${FIRETHORN_CODE:?})"
        codename="$(basename ${FIRETHORN_CODE:?})"

        if [ ! -e "${codepath:?}" ]
        then
            mkdir "${codepath:?}"
        fi

        hgrepo=http://wfau.metagrid.co.uk/code/firethorn/

        pushd "${codepath:?}"
            if [ ! -e "${codename:?}" ]
            then
                 hg clone "${hgrepo:?}" "${codename:?}"
            else
                pushd "${codename:?}"
                    hg pull
                    hg update
                popd
            fi
        popd

    #
    # Run the OGSA-DAI login fix.

    source ${HOME:?}/firethorn.settings

    pushd "${FIRETHORN_CODE:?}"
        pushd 'firethorn-ogsadai/activity/client'

            mvn -D skipTests=false -D test=SingleQueryTestCase test 

        popd
    popd

