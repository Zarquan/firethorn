# ------------------------------------------------------------
# Project paths
#

FIRETHORN_BASE=${FIRETHORN_BASE:-/var/local/projects/edinburgh/wfau/firethorn}
FIRETHORN_NAME=devel
FIRETHORN_CODE=${FIRETHORN_BASE?}/${FIRETHORN_NAME?}


# TTY #1 ------------------------------------------------------------
# Create a SSH tunnel to the ROE database server.
# ** leave this running for the duration of the tests **
#

    ssh -v -L 1433:ramses3:1433 fenrir.roe.ac.uk

# TTY #2 ------------------------------------------------------------
# Build and run the firethorn webapp 
#

    pushd "${FIRETHORN_CODE?}/firethorn-war"

        #
        # Update the activity client (needs ogsa-dai service running).
        pushd "../firethorn-ogsadai/activity/common/" ; mvn clean install ; popd
        pushd "../firethorn-ogsadai/activity/client/" ; mvn clean install ; popd

        #
        # Update the core library.
        pushd ../firethorn-tap ; mvn -D test=TestJobTestCase clean install ; popd

        #
        # Build and run the webap.
        mvn clean tomcat7:run  | tee /tmp/firethorn-tomcat.log
        
    popd

# TTY #2 ------------------------------------------------------------
# Build and deploy the ogsa-dai webapp 
#

    #
    # Shell script function to configure the JDBC resources.
    dbconfg()
        {
        local dbname=${1?}
        local dbconf=${2?}

        local dbtype="$(sed -n 's/^type=\(.*\)/\1/p' ${dbconf?})"
        local dbdata="$(sed -n 's/^name=\(.*\)/\1/p' ${dbconf?})"
        local dbuser="$(sed -n 's/^user=\(.*\)/\1/p' ${dbconf?})"
        local dbpass="$(sed -n 's/^pass=\(.*\)/\1/p' ${dbconf?})"

        local dbdrv
        local dburi

        case ${dbtype?} in

            pgsql)
                echo "Postgresql database"
                dbdrv=org.postgresql.Driver
                dburi=jdbc:postgresql://localhost:5432
                ;;

            mssql)
                echo "SQLServer database"
                dbdrv=net.sourceforge.jtds.jdbc.Driver
                dburi=jdbc:jtds:sqlserver://localhost:1433
                ;;

            *)  echo "ERROR : unknown database type [${dbtype}]"
                ;;
        esac

        #
        # Set the database driver and url.
        sed -i '
            s|^dai.driver.class=.*|dai.driver.class='${dbdrv}'|
            s|^dai.data.resource.uri=.*|dai.data.resource.uri='${dburi}/${dbdata?}'|
            ' "target/ogsadai-webapp-1.0-SNAPSHOT/WEB-INF/etc/dai/resources/${dbname?}"

        #
        # Set the database password.
        sed -i '
            /^id='${dbname?}'/,/^END/ {
                s|^username=.*|username='${dbuser?}'|
                s|^password=.*|password='${dbpass?}'|
                }
            ' "target/ogsadai-webapp-1.0-SNAPSHOT/WEB-INF/etc/dai/logins.txt"
        }


    #
    # Deploy the OGSA-DAI webapp.
    pushd ${FIRETHORN_CODE?}/firethorn-ogsadai/webapp

        #
        # Update the metadata client.
        pushd "../metadata/common" ; mvn clean eclipse:eclipse install ; popd
        pushd "../metadata/client" ; mvn clean eclipse:eclipse install ; popd

        #
        # Update the server activity.
        pushd "../activity/common" ; mvn clean eclipse:eclipse install ; popd
        pushd "../activity/server" ; mvn clean eclipse:eclipse install ; popd

        #
        # Create a clean war file.
        mvn clean compile war:war

        #
        # Set the database passwords.
        dbconfg twomass  /etc/firethorn/livetwomass.conf
        dbconfg ukidss   /etc/firethorn/liveukidss.conf
        dbconfg uber     /etc/firethorn/livetwoxmm.conf
        dbconfg userdata /etc/firethorn/userdata.conf

#
# Add our CreateTable activity
cat >> 'target/ogsadai-webapp-1.0-SNAPSHOT/WEB-INF/etc/dai/activities.txt' << EOF
id=uk.ac.roe.wfau.firethorn.ogsadai.CreateTable
class=uk.ac.roe.wfau.firethorn.ogsadai.activity.server.CreateTableActivity
description=
CONFIG
END
EOF

        #
        # Run the webapp in Tomcat
        mvn tomcat6:run | tee /tmp/ogsadai-tomcat.log
        
    popd

# TTY #4 ------------------------------------------------------------
# Initialise our test metadata 
#

    base=$(mktemp --directory)
    pushd ${base?}

        #
        # Install the 'resty' wrapper for curl.
        curl -# -L http://github.com/micha/resty/raw/master/resty > resty
        source resty

        #
        # Install the 'pp' pretty print script.
        curl -# -L http://github.com/micha/resty/raw/master/pp > pp
        chmod a+x pp

        #
        # Set the base URL and options.
        metahostname=localhost
        metahostport=8080
        metabasename="http://${metahostname?}:${metahostport?}/firethorn"
        
        #
        # Unique name generator 
        unique()
            {
            date '+%Y%m%d-%H%M%S%N'
            }

        #
        # Create a 'define' function for setting heredoc variables.
        # http://stackoverflow.com/questions/1167746/how-to-assign-a-heredoc-value-to-a-variable-in-bash
        define()
            {
            IFS='\n' read -r -d '' ${1} || true;
            }

        #
        # Initialise our REST client.
        resty "${metabasename?}" -W -H 'Accept: application/json'

        # -------- --------
        # JDBC ....

cat > init-jdbc.sh << EOF

        #
        # Create our JDBC TWOMASS resource.
        POST "/jdbc/resource/create" \
            -d "jdbc.resource.create.url=spring:RoeTWOMASS" \
            -d "jdbc.resource.create.name=jdbc-twomass" \
            -d "jdbc.resource.create.ogsadai=twomass" \
            | ./pp

        #
        # Check the resouce properties.
        GET "/jdbc/resource/1" | ./pp

        #
        # Create our JDBC UKIDSS resource.
        POST "/jdbc/resource/create" \
            -d "jdbc.resource.create.url=spring:RoeUKIDSS" \
            -d "jdbc.resource.create.name=jdbc-ukidss" \
            -d "jdbc.resource.create.ogsadai=ukidss" \
            | ./pp

        #
        # Check the resouce properties.
        GET "/jdbc/resource/2" | ./pp

        #
        # List the JDBC TWOMASS schema.
        GET "/jdbc/resource/1/schemas/select" | ./pp

        #
        # List the JDBC UKIDSS schema.
        GET "/jdbc/resource/2/schemas/select" | ./pp

        #
        # List the JDBC TWOMASS tables.
        GET "/jdbc/schema/1/tables/select" | ./pp

        #
        # List the JDBC UKIDSS tables.
        GET "/jdbc/schema/2/tables/select" | ./pp

        #
        # Get the details for the twomass_psc table.
        # http://localhost:8080/firethorn/jdbc/table/5
        GET "/jdbc/schema/1/tables/select" \
            -q "jdbc.schema.table.select.name=twomass_psc" \
            | ./pp

        #
        # Get the details for the gcsPointSource table.
        # http://localhost:8080/firethorn/jdbc/table/120
        GET "/jdbc/schema/2/tables/select" \
            -q "jdbc.schema.table.select.name=gcsPointSource" \
            | ./pp

        #
        # Get the details for the gcsSourceXtwomass_psc table.
        # http://localhost:8080/firethorn/jdbc/table/41
        GET "/jdbc/schema/2/tables/select" \
            -q "jdbc.schema.table.select.name=gcsSourceXtwomass_psc" \
            | ./pp

        #
        # Get the details for the twomass_psc ra column.
        GET "/jdbc/table/5/columns/select" \
            -q "jdbc.table.column.select.name=ra" \
            | ./pp

        #
        # Get the details for the gcsPointSource ra column.
        GET "/jdbc/table/120/columns/select" \
            -q "jdbc.table.column.select.name=ra" \
            | ./pp

EOF

        # -------- --------
        # ADQL ....

cat > init-adql.sh << EOF

        #
        # Create a new ADQL resource.
        POST "/adql/resource/create" \
            --data "adql.resource.create.name=adql-workspace" \
            | ./pp

        #
        # Create a new ADQL schema.
        POST "/adql/resource/3/schemas/create" \
            --data "adql.resource.schema.create.name=adql_schema" \
            | ./pp

        #
        # Import the twomass table into the ADQL schema.
        # http://localhost:8080/firethorn/adql/table/140
        POST "/adql/schema/3/tables/import" \
            --data "adql.schema.table.import.base=${metabasename?}/jdbc/table/5" \
            | ./pp

        #
        # Import the ukidss tables into the ADQL schema.
        # http://localhost:8080/firethorn/adql/table/141
        POST "/adql/schema/3/tables/import" \
            --data "adql.schema.table.import.base=${metabasename?}/jdbc/table/41" \
            | ./pp

        # http://localhost:8080/firethorn/adql/table/142
        POST "/adql/schema/3/tables/import" \
            --data "adql.schema.table.import.base=${metabasename?}/jdbc/table/120" \
            | ./pp

        #
        # Check the ADQL tables.
        GET "/adql/schema/3/tables/select" | ./pp

        #
        # Check the table mapping service.
        GET "/meta/table/JDBC_5" | ./pp

        #
        # Get the attribute list for the twomass table.
        GET "/meta/table/JDBC_5/columns"   | ./pp

        #
        # Get a named attribute for the twomass table.
        GET "/meta/table/JDBC_5/column/ra" | ./pp

        #
        # Get the attribute list for the ukidss table(s).
        GET "/meta/table/JDBC_141/columns"   | ./pp

        GET "/meta/table/JDBC_142/columns"   | ./pp

EOF

cat > query-000.adql << EOF

    SELECT
        twomass.ra AS tmra,
        ukidss.ra  AS ukra,
        (twomass.ra - ukidss.ra) AS difra,
        twomass.dec AS tmdec,
        ukidss.dec  AS ukdec,
        (twomass.ra - ukidss.ra) AS difdec,
        neighbour.distanceMins AS dist
    FROM
        adql_schema.twomass_psc AS twomass,
        adql_schema.gcsPointSource AS ukidss,
        adql_schema.gcsSourceXtwomass_psc AS neighbour
    WHERE
        twomass.ra  >= '55.0'
    AND
        twomass.ra  <= '55.9'
    AND
        twomass.dec >= '20.0'
    AND
        twomass.dec <= '22.9'
    AND
        ukidss.ra  >= '55.0'
    AND
        ukidss.ra  <= '55.9'
    AND
        ukidss.dec >= '20.0'
    AND
        ukidss.dec <= '22.9'
    AND
        neighbour.masterObjID = ukidss.sourceID
    AND
        neighbour.slaveObjID = twomass.pts_key
    AND
        neighbour.distanceMins < 1E-3

EOF

cat > init-query.sh << 'EOF'

        #
        # Create the ADQL query.
        query=$(
        POST "/adql/resource/3/queries/create" \
            --data-urlencode "adql.resource.query.create.name=test-query" \
            --data-urlencode "adql.resource.query.create.query@query-000.adql" \
            | ./pp \
            | sed -n 's#"ident" : ".*\(/adql/query/[0-9]*\).*#\1#p'
            )
        query=$(echo "${query?}" | sed 's/[ ]*//g')

        GET "${query?}" \
            | ./pp

        #
        # Update the ADQL query.
        POST "${query?}" \
            --data-urlencode "adql.query.update.status=RUNNING" \
            | ./pp

EOF

#
# Run our scripts.

    source init-jdbc.sh
    source init-adql.sh
    source init-query.sh


# Exception in Firethorn ------------------------------------------------------------
#
    SEVERE: Servlet.service() for servlet [spring-servlet] in context with path [/firethorn] threw exception
    [Request processing failed; nested exception is org.springframework.dao.DuplicateKeyException:
        a different object with the same identifier value was already associated with the session:
            [uk.ac.roe.wfau.firethorn.meta.adql.AdqlColumnEntity#533];
    nested exception is org.hibernate.NonUniqueObjectException:
        a different object with the same identifier value was already associated with the session:
            [uk.ac.roe.wfau.firethorn.meta.adql.AdqlColumnEntity#533]]

# -----------------------------------------------------------------------------------

hexdump -C target/database/hsqlone.lck 

    00000000  48 53 51 4c 4c 4f 43 4b  00 00 01 3d 49 ba 7e 09  |HSQLLOCK...=I.~.|
    00000010

    00000000  48 53 51 4c 4c 4f 43 4b  00 00 01 3d 49 b0 b9 b6  |HSQLLOCK...=I...|
    00000010

# -----------------------------------------------------------------------------------

#
# Settings for the 'root' postgres password.
cat > /etc/firethorn/postgres.conf << EOF
type=pgsql
host=localhost
name=postgres
user=postgres
pass=$(pwgen -s 40 1)
EOF

#
# Settings for the userdata database.
cat > /etc/firethorn/userdata.conf << EOF
type=pgsql
host=localhost
name=userdata
user=$(pwgen -0 10 1)
pass=$(pwgen -s 40 1)
EOF

    #
    # Set the 'root' postgres password.
    dbpass="$(sed -n 's/^pass=\(.*\)/\1/p' /etc/firethorn/postgres.conf)"
    dbuser="$(sed -n 's/^user=\(.*\)/\1/p' /etc/firethorn/postgres.conf)"
    echo "ALTER ROLE ${dbuser?} WITH PASSWORD '${dbpass?}'" | su - postgres -c 'psql postgres'

    #
    # Create the test users and databases.
    dbhost="$(sed -n 's/^host=\(.*\)/\1/p' /etc/firethorn/userdata.conf)"
    dbdata="$(sed -n 's/^name=\(.*\)/\1/p' /etc/firethorn/userdata.conf)"
    dbuser="$(sed -n 's/^user=\(.*\)/\1/p' /etc/firethorn/userdata.conf)"
    dbpass="$(sed -n 's/^pass=\(.*\)/\1/p' /etc/firethorn/userdata.conf)"
    echo "${dbhost?}:*:${dbdata?}:${dbuser?}:${dbpass?}" >> /etc/firethorn/pgpass

    echo "CREATE USER     ${dbuser?} WITH LOGIN PASSWORD '${dbpass?}'" | su - postgres -c 'psql postgres'
    echo "CREATE DATABASE ${dbdata?} WITH OWNER ${dbuser?}"            | su - postgres -c 'psql postgres'

    unset dbhost
    unset dbdata
    unset dbpass
    unset dbuser

