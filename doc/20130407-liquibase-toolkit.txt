#
#
# Copyright (c) 2013, ROE (http://www.roe.ac.uk/)
# All rights reserved.
#
# This information is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This information is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

    #
    # HSQLDB server
    # http://stackoverflow.com/questions/3018066/starting-and-stopping-hsqldb-from-unit-tests?rq=1

    org.hsqldb.Server.main(new String[]{});

    #
    # Liquibase database change control
    # http://www.liquibase.org/

    #
    # Liquibase Maven integration
    # http://www.liquibase.org/manual/maven
    # https://tillias.wordpress.com/2012/11/10/unit-testing-and-integration-testing-using-junit-liquibase-hsqldb-hibernate-maven-and-spring-framework/

--------------------------------------------

    shared space for user data ... postgresql

    we know the names and types of the columns ... adql parser
    create the adql table when the query is created
    empty table, no columns and *no base*
    *ADQL table with no base*
    fill in adql columns from the CDS parser data
    *ADQL column with no base*
    
    run ogsadai
    create the JDBC table, base don ogsadai tuple metadata
    link the JDBC table to the ADQL table
    link the JDBC columns to the ADQL columns
    
    base can be null
    base can be changed

    interesting ....
    
    how much metadata do we have from the ADQL parser ?

    ideally .. the query should BE a table
    AdqlQuery extends AdqlTable ....
    but that would mean a lot of re-design


    looks like enough metadata to be able to predict the JDBC table
    functions (user functions) may be a problem
    we should be able to create the table and columns when the query is parsed
    then we update/correct the columns when the data comes back
    if there are correstions, then subsequent steps may see an error


#
# Query testing 

cat > init.sh << 'EOF'
source "${FIRETHORN_TEST?}/init-jdbc.sh"
source "${FIRETHORN_TEST?}/init-adql.sh"
source "${FIRETHORN_TEST?}/init-wfau.sh"
EOF

cat > query.sh << 'EOF'
wfauquery=$(
    POST "${wfauspace?}/queries/create" \
        --data-urlencode "adql.resource.query.create.name=query-$(unique)" \
        --data-urlencode "adql.resource.query.create.query@wfau-query-001.adql" \
        | ident
        )
EOF
    
--------------------------------------------

Ignoring user defined functions - the rest we know at query time.



--------------------------------------------





                    AdqlQuery
                    
                        AdqlTable  table();  --> not null
                        AdqlSchema schema(); --> not null

                        QueryTable base() <-- this is where to put our results
                                              if null, create a new one


                    BaseTable

                        AdqlQuery query() --> create(AdqlQuery query, ....)
                        columns().create(cols)
                        columns().update(cols)

                    AdqlTable

                        AdqlQuery query() = base().query()

                        BaseTable base()
                        BaseTable root()


--------------------------------------------

            JdbcTable jtable = JdbcSchema.tables.create(
                AdqlQuery query,
                String name
                )

            JdbcTable jtable = JdbcTable.Factory.create(
                JdbcSchema parent,
                AdqlQuery query,
                String name
                )

            AdqlTable atable = AdqlSchema.tables.create(
                AdqlQuery query
                )

            AdqlTable atable = AdqlTable.Factory.create(
                AdqlQuery 
                )

            AdqlQuery.results().adql()
            AdqlQuery.results().base()
            AdqlQuery.results().jdbc()
            
            //
            // Create an empty table.
            jtable.create();
            //
            // Create our columns.
            jtable.columns().create(
                Iter<ColMtea> query.cols()
                );

            //
            // Update our columns
            jtable.columns().update(
                Iter<ColMtea> cols
                );
            
            AdqlQuery query = schema.create(
                name,
                alias
                )

            AdqlQuery(AdqlSchema schema, String name)
                {
                this.name   = name;
                this.alias  = alias;
                this.schema = schema;
                }

            void table(JdbcTable jtable)
                {
                this.jtable = jtable;
                this.jtable.columns().create(
                    this.cols()
                    );
                this.atable = schema.tables().create(
                    this.jtable,
                    this.alias
                    );
                } 

            AdqlQuery {
                String name()
                Table table()
                    {
                    JdbcTable jdbc()
                    void jdbc(JdbcTable table)
                    AdqlTable adql()
                    }
                AdqlSchema   schema()
                AdqlResource resource()
                }

--------------------------------------------

    Creating a Query creates the corresponding Jdbc and Adql tables.
    Execute the OGSA-DAI action - no need to create the table.
    Probably (later) re-instate the action to verify/modify the TupleMeta.
    For now, just insert the data direct.    

    User functions ?
    Would need to guess (VARCHAR), and then update the type based on the actual result.
    TAP 'header' method - don't get the data, just the VOTable header.

--------------------------------------------

    BUG
    
    source "${FIRETHORN_TEST?}/query-adql.sh"

    java.lang.NullPointerException
	    uk.ac.roe.wfau.firethorn.widgeon.adql.AdqlResourceQueryController.jsonCreate(AdqlResourceQueryController.java:189)

--------------------------------------------

    TODO
    Remove the CreateTableAction
    Update the Controllers
    Fix the size problems
        size   (byte)
        length (unit)
        total  (unit x byte)

    AdqlColumnBean has no metadata

    Shared user data ...
    
    REST testing
    Table metadata .. count, nulls etc ..

--------------------------------------------

    TODO
    Ivoa Resource, Schema, Table, Column ...
    
--------------------------------------------

    TODO
    OGSA-DAI resources

--------------------------------------------

    TODO
    User identity

--------------------------------------------




