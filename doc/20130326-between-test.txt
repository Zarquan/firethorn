#
#
# Copyright (c) 2013, ROE (http://www.roe.ac.uk/)
# All rights reserved.
#
# This information is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This information is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

# ------------------------------------------------------------
# Install Java, Mercurial and Maven

    # ------------------
    # Ubuntu 12

        apt-get -y update
        apt-get -y upgrade

        apt-get -y install mercurial

        apt-get -y install openjdk-6-jdk
        apt-get -y install maven2

    # ------------------
    # Fedora 

        yum -y update

        yum -y install mercurial

        yum -y install java-1.7.0-openjdk
        yum -y install java-1.7.0-openjdk-devel
        yum -y install maven

    # ------------------
    # RedHat EL

        yum -y update

        yum -y install mercurial

        yum -y install java-1.6.0-openjdk
        yum -y install java-1.6.0-openjdk-devel

        # Manual install of Apache Maven.
        # http://maven.apache.org/download.html

        if [ ! -e '/var/local/toolkits' ]
        then
            mkdir '/var/local/toolkits'
        fi

        if [ ! -e '/var/local/toolkits/maven' ]
        then
            mkdir '/var/local/toolkits/maven'
            pushd '/var/local/toolkits/maven'

                if [ ! -e 'downloads' ]
                then 
                    mkdir 'downloads'
                fi
                pushd downloads

                    wget http://www.mirrorservice.org/sites/ftp.apache.org/maven/maven-3/3.0.4/binaries/apache-maven-3.0.4-bin.tar.gz

                popd

                tar xvf downloads/apache-maven-3.0.4-bin.tar.gz 
                ln -s apache-maven-3.0.4 current

            popd
        fi
            
        cat > /etc/profile.d/maven.sh << 'EOF'
        # /etc/profile.d/maven.sh
        #
        # Manual install of Apache Maven.
        # http://maven.apache.org/download.html
        export M2_HOME=${M2_HOME:-/var/local/toolkits/maven/current}
        export PATH=${M2_HOME}/bin:${PATH} 
        EOF

# ------------------------------------------------------------
# Test user

    useradd --create-home --shell /bin/bash Fabulous
    su - Fabulous

# ------------------------------------------------------------
# Configuration settings.
#

    cat > ${HOME?}/firethorn.settings << 'EOF'
    FIRETHORN_BASE=${FIRETHORN_BASE:-${HOME?}/firethorn}
    FIRETHORN_NAME=code
    FIRETHORN_CODE=${FIRETHORN_CODE:-${FIRETHORN_BASE?}/${FIRETHORN_NAME?}}
    EOF

# ------------------------------------------------------------
# Clone revision 447 of the FireThorn source code.
#

    source ${HOME?}/firethorn.settings

    if [ ! -e "$(dirname ${FIRETHORN_CODE?})" ]
    then
        mkdir --parents "$(dirname ${FIRETHORN_CODE?})"
    fi

    if [ ! -e "${FIRETHORN_CODE?}" ]
    then
        hg clone --rev 477 'http://wfau.metagrid.co.uk/code/firethorn/' "${FIRETHORN_CODE?}"
    else
        pushd "${FIRETHORN_CODE?}"
            hg update --rev 477
        popd
    fi
    
# TTY #1 ------------------------------------------------------------
# Build and deploy the service webapp. 
#

    source ${HOME?}/firethorn.settings
    pushd "${FIRETHORN_CODE?}"

        #
        # Build everything 
        mvn clean install
        
    popd

    #
    # Deploy the modified OGSA-DAI webapp.
    pushd ${FIRETHORN_CODE?}/firethorn-ogsadai/webapp

        #
        # Create a clean build.
        mvn clean compile war:war

        #
        # Deploy the webapp in Tomcat.
        mvn tomcat6:run | tee /tmp/ogsadai-tomcat.log
        
    popd

# TTY #2 ------------------------------------------------------------
# Run JUnit test.
#

    source ${HOME?}/firethorn.settings
    pushd ${FIRETHORN_CODE?}/firethorn-ogsadai/activity/client
    
        mvn -D skipTests=false -D test=MockDqpQueryTestCase test

    popd

# ------------------------------------------------------------
# Symptoms.
#

    test002() should fail with JDBC error, because database passwords are not set.
    However, it never gets that far.

    Using the mock TableMappingService, we see several requests using the aliases, table20, table21 and table22, and then a fail when a TableMapping request
    is sent using one of the real table names, gcsPointSource, rather than one of the aliases.

    2013-03-26 06:05:34,620 DEBUG mock.TableMappingServiceMock [pool-28-thread-2,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [table21]
    2013-03-26 06:05:34,623 DEBUG mock.TableMappingServiceMock [pool-28-thread-2,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [table22]
    2013-03-26 06:05:34,627 DEBUG mock.TableMappingServiceMock [pool-28-thread-2,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [table21]
    2013-03-26 06:05:34,628 DEBUG mock.TableMappingServiceMock [pool-28-thread-2,getTableMapping:108] TableMappingServiceMock.getTableMapping(String) [gcsPointSource]
    java.lang.RuntimeException: uk.org.ogsadai.dqp.lqp.exceptions.TableNotFoundException: Table not found gcsPointSource

    This suggests DQP is re-using an alias that has already beeen resolved through the TableMappingService.



