version: '2.1'

networks:

    # External network
    rosana:

    # Internal network
    miriam:

services:

    bethany:
        image:
           "firethorn/postgres:${buildtag:-latest}"
        read_only:
            true
        tmpfs:
            - '/run'
            - '/tmp'
        networks:
            - miriam
        environment:
            POSTGRES_DB:       "${metadata}"
            POSTGRES_USER:     "${metauser}"
            POSTGRES_PASSWORD: "${metapass}"

    carolina:
        image:
           "firethorn/postgres:${buildtag:-latest}"
        read_only:
            true
        tmpfs:
            - '/run'
            - '/tmp'
        networks:
            - miriam
        environment:
            POSTGRES_DB:       "${tapschemadata}"
            POSTGRES_USER:     "${tapschemauser}"
            POSTGRES_PASSWORD: "${tapschemapass}"

    jarmila:
        image:
           "firethorn/ogsadai:${buildtag:-latest}"
        read_only:
            false
        tmpfs:
            - /run
            - /tmp
        volumes:
            - /etc/localtime:/etc/localtime:ro
        networks:
            - miriam
        healthcheck:
            test: [
                "CMD-SHELL",
                "curl --silent --head --fail http://localhost:8080/ogsadai/services || exit 1"
                ]
            interval: 30s
            timeout: 5s
            retries: 5

    gillian:
        image:
           "firethorn/firethorn:${buildtag:-latest}"
        read_only:
            true
        tmpfs:
            - /run
            - /tmp
        volumes:
            - /etc/localtime:/etc/localtime:ro
            - ${HOME}/firethorn.properties:/etc/firethorn.properties
        networks:
            - miriam
            - rosana
        ports:
            - "8080:8080"
        environment:
            firethorn.ogsadai.endpoint: "http://jarmila:8080/ogsadai/services"
            firethorn.meta.url:  "jdbc:postgresql://bethany/${metadata}"
            firethorn.meta.user: "${metauser}"
            firethorn.meta.pass: "${metapass}"
            firethorn.meta.driver: "org.postgresql.Driver"
            firethorn.user.type: "${usertype}"
            firethorn.user.host: "${userhost}"
            firethorn.user.data: "${userdata}"
            firethorn.user.user: "${useruser}"
            firethorn.user.pass: "${userpass}"
            firethorn.admin.community: "${admingroup}"
            firethorn.guest.community: "${guestgroup}"
            firethorn.admin.user.name: "${adminuser}"
            firethorn.admin.user.pass: "${adminpass}"
            firethorn.tapschema.resource.name: "${tapschemajdbc}"
            firethorn.tapschema.database.type: "pgsql"
            firethorn.tapschema.database.name: "${tapschemadata}"
            firethorn.tapschema.database.host: "carolina"
            firethorn.tapschema.database.user: "${tapschemauser}"
            firethorn.tapschema.database.pass: "${tapschemapass}"

        depends_on:
            bethany:
                condition: service_started
            carolina:
                condition: service_started            
            jarmila:
                condition: service_healthy            

    firethorn-py:
        hostname:
            "firethorn-py"
        image:
           "firethorn/firethorn-py:${buildtag:-latest}"
        read_only:
            false
        stdin_open:
            true
        tty:
            true
        tmpfs:
            - /run
            - /tmp
        volumes:
            - /etc/localtime:/etc/localtime:ro
        networks:
            - miriam
        environment:
            datatype:    "${datatype}" 
            datahost:    "${datahost}"
            datadata:    "${datadata}" 
            datauser:    "${datauser}"
            datapass:    "${datapass}"
            datacatalog: "${datacatalog}"
            admingroup:  "${admingroup}"
            adminuser:   "${adminuser}"
            adminpass:   "${adminpass}"
            endpoint: "${endpoint}"
            osa_endpoint: "${osa_endpoint}"
        depends_on:
            gillian:
                condition: service_healthy
        command:
            [bash]



