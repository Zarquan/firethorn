package adql.db;

import java.util.ArrayList;

import adql.db.exception.CheckColumnException;
import adql.db.exception.CheckTableException;
import adql.parser.ParseException;
import adql.parser.QueryChecker;

import adql.query.ADQLObject;
import adql.query.ADQLQuery;
import adql.query.ClauseSelect;
import adql.query.ColumnReference;

import adql.query.from.ADQLTable;
import adql.query.operand.ADQLColumn;
import adql.query.operand.ADQLOperand;

import adql.search.ISearchHandler;
import adql.search.SearchColumnHandler;
import adql.search.SimpleSearchHandler;

/**
 * Merely checks the existence of tables and columns.
 * No information is added in {@link ADQLTable} and {@link ADQLColumn} instances.
 * 
 * @author Gr&eacute;gory Mantelet (CDS)
 * @version 07/2011
 */
public abstract class DBChecker implements QueryChecker {

	/**
	 * Followed algorithm:
	 * <pre>
	 * ArrayList tables;
	 * 
	 * For each ADQLTable t
	 *	if (!tableExists(t.getCatalogName(), t.getSchemaName(), t.getTableName()))
	 *		throw new CheckTableException(t);
	 *	tables.add(t);
	 * End
	 * 
	 * For each ADQLColumn c
	 * 	checkColumn(c, tables);
	 * End
	 * 
	 * For each ColumnReference colRef
	 * 	if (col.getTableName() != null && select.searchByAlias(colRef.getColumnName()) != null)
	 * 		continue;
	 * 	checkColumn(new ADQLColumn(colRef.getColumnName()), tables);
	 * End
	 * </pre>
	 * 
	 * @see #tableExists(String, String, String)
	 * @see #checkColumn(ADQLColumn, ArrayList)
	 * 
	 * @see adql.parser.QueryChecker#check(adql.query.ADQLQuery)
	 */
	public final void check(ADQLQuery query) throws ParseException {
		// Check the table existence:
		ISearchHandler sHandler = new SearchTableHandler();
		sHandler.search(query.getFrom());
		ArrayList<ADQLTable> tables = new ArrayList<ADQLTable>(sHandler.getNbMatch());
		for(ADQLObject result : sHandler){
			ADQLTable table = (ADQLTable)result;
			if (!table.isSubQuery()) {
				if (!tableExists(table.getCatalogName(), table.getSchemaName(), table.getTableName()))
					throw new CheckTableException(table);
			}
			tables.add(table);
		}

		// Check the columns existence:
		sHandler = new SearchColumnHandler();
		sHandler.search(query);
		for(ADQLObject result : sHandler){
			ADQLColumn column = (ADQLColumn)result;
			checkColumn(column, tables);
		}

		// Check the column references:
		sHandler = new SearchColReferenceHandler();
		sHandler.search(query);
		ClauseSelect select = query.getSelect();
		for(ADQLObject result : sHandler){
			ColumnReference colRef = (ColumnReference)result;
			ADQLColumn col = new ADQLColumn(colRef.getColumnName());
			// search among the select_item aliases:
			if (col.getTableName() == null){
				ADQLOperand foundOp = select.searchByAlias(colRef.getColumnName());
				if (foundOp != null)
					continue;
			}
			// check the corresponding column:
			checkColumn(col, tables);
		}
	}

	/**
	 * Checks the existence of the given column.
	 * 
	 * @param column			Column whose the existence must be checked.
	 * @param tables			The list of selected tables.
	 * 
	 * @throws ParseException	If the column can not be found.
	 */
	protected void checkColumn(ADQLColumn column, ArrayList<ADQLTable> tables) throws ParseException {
		ADQLTable foundTable = null;

		for(ADQLTable table : tables){

			// If the table is specified, search the column only if the current table matches:
			if (column.getTableName() != null){
				// If the current table has an alias, column which are in this table must use the table alias rather than its true name:
				if (table.hasAlias()){
					if (column.getTableName().equalsIgnoreCase(table.getAlias())){
						if (foundTable == null){
							if (columnExists(table, column.getColumnName()))
								foundTable = table;
							else // => ambiguous column name
								throw new CheckColumnException(column);
						}else // => ambiguous table reference
							throw new CheckColumnException(column, foundTable.isSubQuery()?(foundTable.getAlias()+" (sub-query)"):foundTable.getFullTableName(), table.isSubQuery()?(table.getAlias()+" (sub-query)"):table.getFullTableName());
					}
				}else{
					if (column.getTableName().equalsIgnoreCase(table.getTableName())
							&& (column.getSchemaName() == null || column.getSchemaName().equalsIgnoreCase(table.getSchemaName()))
							&& (column.getCatalogName() == null || column.getCatalogName().equalsIgnoreCase(table.getCatalogName()))){
						if (foundTable == null){
							if (columnExists(table, column.getColumnName()))
								foundTable = table;
							else // => ambiguous column name
								throw new CheckColumnException(column);
						}else // => ambiguous table reference
							throw new CheckTableException(column, foundTable.getFullTableName(), table.getFullTableName());
					}
				}

			}// Otherwise search the column in all selected tables:
			else{
				if (columnExists(table, column.getColumnName())){
					if (foundTable == null)
						foundTable = table;
					else // => ambiguous column name
						throw new CheckColumnException(column, foundTable.isSubQuery()?(foundTable.getAlias()+" (sub-query)"):foundTable.getFullTableName(), table.isSubQuery()?(table.getAlias()+" (sub-query)"):table.getFullTableName());
				}
			}
		}

		if (foundTable == null){
			if (column.getTableName() != null)
				throw new CheckTableException(column);  // => unknown table reference
			else
				throw new CheckColumnException(column); // => unknown column name
		}
	}

	/**
	 * Checks whether the specified column exists in the given table.
	 * 
	 * @param table			The table which is supposed to contain the specified column.
	 * @param columnName	Name of the column.
	 * 
	 * @return				<i>true</i> if the specified column exists in the given table, <i>false</i> otherwise.
	 * 
	 * @throws ParseException	Can be used to explain why the specified column does not exist in the given table.
	 * 
	 * @see #columnExists(String, String, String, String)
	 */
	protected boolean columnExists(ADQLTable table, String columnName) throws ParseException {
		if (table.isSubQuery()){
			DBColumn[] columns = table.getSubQuery().getResultingColumns();
			for(DBColumn column : columns){
				if (columnName.equalsIgnoreCase(column.getADQLName()))
					return true;
			}
			return false;
		}else
			return columnExists(table.getCatalogName(), table.getSchemaName(), table.getTableName(), columnName);
	}


	/* **************** */
	/* ABSTRACT METHODS */
	/* **************** */
	/**
	 * Checks that the specified table really exists.
	 * 
	 * @param catalog	The catalog prefix in the full table name (may be <i>null</i>).
	 * @param schema	The schema prefix in the full table name (may be <i>null</i>).
	 * @param table		The table name.
	 * 
	 * @return			<i>true</i> if the table exists, <i>false</i> otherwise.
	 * 
	 * @throws ParseException	Can be used to explain why the given table does not exist.
	 */
	public abstract boolean tableExists(String catalog, String schema, String table) throws ParseException;

	/**
	 * Checks whether the specified column really exists.
	 * 
	 * @param catalog	The catalog prefix in the full column name (may be <i>null</i).
	 * @param schema	The schema prefix in the full column name (may be <i>null</i>).
	 * @param table		The table prefix in the full column name (may be a table alias) (may be <i>null</i>).
	 * @param column	The column name.
	 * 
	 * @return			<i>true</i> if the column exists, <i>false</i> otherwise.
	 * 
	 * @throws ParseException	Can be used to explain why the given column does not exist.
	 */
	public abstract boolean columnExists(String catalog, String schema, String table, String column) throws ParseException;


	/* *************** */
	/* SEARCH HANDLERS */
	/* *************** */
	/**
	 * Lets searching all tables ({@link ADQLTable}).
	 * 
	 * @author Gr&eacute;gory Mantelet (CDS)
	 * @version 07/2011
	 */
	protected static class SearchTableHandler extends SimpleSearchHandler {
		@Override
		public boolean match(ADQLObject obj) {
			return obj instanceof ADQLTable;
		}
	}

	/**
	 * Lets searching column references ONLY WITH A COLUMN NAME.
	 * 
	 * @author Gr&eacute;gory Mantelet (CDS)
	 * @version 06/2011
	 */
	private static class SearchColReferenceHandler extends SimpleSearchHandler {
		@Override
		public boolean match(ADQLObject obj) {
			return (obj instanceof ColumnReference) && !((ColumnReference)obj).isIndex();
		}
	}
}
