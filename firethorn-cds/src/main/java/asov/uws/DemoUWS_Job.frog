package asov.uws;

import java.io.File;
import java.io.IOException;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import adql.db.DBChecker;
import adql.parser.ADQLParser;
import adql.parser.ParseException;

import adql.query.ADQLQuery;

import adql.search.IReplaceHandler;

import adql.translator.ADQLTranslator;
import adql.translator.PgSphereTranslator;
import adql.translator.TranslationException;

import asov.DemoASOV;

import asov.adql.ReplacePointHandler;

import uws.UWSException;

import uws.job.AbstractJob;
import uws.job.LocalResult;

//ZRQ
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DemoUWS_Job extends AbstractJob {

    //ZRQ
    private static Logger logger = LoggerFactory.getLogger(DemoUWS_Job.class);

	private static final long serialVersionUID = 1L;

	private String adql = null;

	public DemoUWS_Job(Map<String, String> lstParam) throws UWSException {
		super(lstParam);
//ZQR
logger.debug("DemoUWS_Job(Map<String, String>)");
	}

	@Override
	protected boolean loadAdditionalParams() throws UWSException {
logger.debug("loadAdditionalParams()");
		// Get the ADQL query (at the initialization but also, each time this parameter is changed):
		if (additionalParameters.containsKey("query")){
			adql = additionalParameters.get("query");
			return true;
		}
		return false;
	}

	@Override
	protected void jobWork() throws UWSException, InterruptedException {
logger.debug("jobWork()");
try {
    logger.debug("Sleeping");
    Thread.sleep(5000);
    logger.debug("Wakeing");
    }
catch(Exception ouch)
    {
    logger.debug("Exception during sleep() {}", ouch);
    }
		try{

			// 1. Build the ADQL parser:
			ADQLParser parser = new ADQLParser();
			parser.setQueryChecker(new DBChecker(DemoASOV.getDBTables()));
			parser.setCoordinateSystems(DemoASOV.getCoordinateSystems());

			// 2. Parse the query:
			ADQLQuery query = parser.parseQuery(adql);

			// 2bis. Manipulate the query: point('...', ra, dec) => coord:
			IReplaceHandler replacer = new ReplacePointHandler();
			replacer.searchAndReplace(query);

			// 3. Translate into SQL:
			ADQLTranslator translator = new PgSphereTranslator();
			String sql = translator.translate(query);

			// 4. Execute on the database:
			Connection conn = DemoASOV.connectDB();
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);

			// 5. Build and set the result:
			File resultFile = DemoASOV.buildResult(this, rs);
			addResult(new LocalResult(this, DemoASOV.RESULT_ID, resultFile));

		} catch(ParseException pe){
// ZRQ
//			throw new UWSException(HttpServletResponse.SC_BAD_REQUEST, pe, "Incorrect ADQL syntax between (l."+pe.getBeginLine()+",c."+pe.getBeginColumn()+") and (l."+pe.getEndLine()+",c."+pe.getEndColumn()+")");
			throw new UWSException(
			    HttpServletResponse.SC_BAD_REQUEST,
		        pe,
		        "Incorrect ADQL syntax at [" + pe.getPosition() + "][" + pe.getMessage() + "]"
		        );

		} catch (TranslationException e) {
			throw new UWSException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e, "Error when translating ADQL to SQL");
		} catch (SQLException e) {
			throw new UWSException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e, "SQL Error");
		} catch (ClassNotFoundException e) {
			throw new UWSException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e, "JDBC Driver not found");
		} catch (IOException e) {
			throw new UWSException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e, "Can not write the result file");
		}
	}

}
